# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Final-One.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import pyautogui
import pygetwindow as gw
import random
import sys
import wmi
import json
import uuid
import time
import signal
import socket
import qrcode
import psutil
import pyuac
import datetime
import keyboard
import subprocess
import threading
import requests
import win32gui
import win32con
import configparser
from PyQt5.QtCore import QSettings
# from PyQt5.QtQuick import LocalStorage
from PyQt5.QtCore import QTimer ,Qt ,QUrl,QThread,QProcess,pyqtSignal,QObject
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWidgets import QApplication, QGraphicsDropShadowEffect,QMainWindow, QPushButton, QWidget,QMessageBox,QVBoxLayout
from PyQt5.QtGui import QPixmap, QPainter, QBrush, QBitmap, QColor,QFont,QFontDatabase, QIcon

CONFIG_PATH = r"C:\Zeus_Config\config.ini"

first_time_check=0
login_user_id=0

set_qr_pc_number = 0

# set_qr_pc_id_from_pc_details = 0

set_qr_franchise_id = 0


# Handle Exe start--------

# handleExe_id=0
# handleExe_start_time=0
# handleExe_end_time=0
# handleExe_login_user_id=0

# Handle Exe end----------

class Communicate(QObject):
    show_signal = pyqtSignal()
    hide_signal = pyqtSignal()

class Ui_zeusConsole(QMainWindow): 
    
    def __init__(self):
        super().__init__()
        
        self.thread = None
        self.thread_otherapps = None
        # self.setWindowTitle("Disable Close, Minimize, and Maximize Buttons")
        self.setObjectName("self")
        self.resize(1366, 745)
        screenWidth = app.primaryScreen().size().width()
        screenHeight = app.primaryScreen().size().height()
        self.setFixedSize(screenWidth, screenHeight)
        self.showMaximized()
        self.setWindowFlags(Qt.FramelessWindowHint) 
        self.showFullScreen()
        # self.setWindowFlags(Qt.WindowStaysOnTopHint)
        # self.hide_taskbar()
        self.sendGameData = ''

        # try:

        #         self.exclude_processes = ['python', 'explorer', 'code.exe', 'zeus.exe']  # Add your app name

        #         # Create and start the AppMonitor thread
        #         self.monitor_thread = AppMonitor(self.exclude_processes)
        #         self.monitor_thread.start()

        # except Exception as e:
        #        print("Exception in AppMonitor >>>",e)
        #        pass

        try:
                keyboard.on_press_key('f1', self.emit_show_signal)
        except Exception as e:
                print(">>>>>>>>emit_show_signal",e)

        try:
                keyboard.on_press_key('f2', self.emit_hide_signal)
        except Exception as e:                   
                print(">>>>>>>>emit_hide_signal",e)
        
        try:
                keyboard.on_press_key('enter', on_enter_press)
        except Exception as e:
               print(">>>>>>eee>",e)

        # keyboard.on_press(block_ctrl_esc)
               
        try:
                self.communicate = Communicate()
                self.communicate.show_signal.connect(self.show_second_window)
                self.communicate.hide_signal.connect(self.hide_second_window)
        except Exception as e:
                               print(">>>>>>>>",e)

       

        # Disable close, minimize, and maximize buttons
        self.setWindowFlags(self.windowFlags() & ~ (Qt.WindowCloseButtonHint | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint))

        # self.setMinimumSize(QtCore.QSize(800, 700))
        self.setStyleSheet("QMainWindow {\n"
        " background-color: #DDDDDD;\n"
        "}")
        # ---------------------------------------
       
        # ---------------------------------------
        self.setupUi()

    def setupUi(self):
        # ---------------------------------------------------------------------
        try:
            url = "https://server.zeusgaming.gg/api/signup/softwaretoken"  # Replace with your API endpoint
            
            response = requests.post(url)
            print(">>>>>>>>>>>>>>>>>response.status_code  ",response.status_code)
            print(">>>>>>>>>>>>>>>>>response from ",response.json())
            if response.status_code == 200:
                print(">>>>>>>>>>res from group info",response)
                datas = response.json()

                settings = QSettings("MyCompany", "MyApp")
                settings.remove("webtoken")
                settings.setValue("webtoken", datas['token'])

                print(">>>>>>>>>>>>>>>>>>")
                print(">>>",datas['token'])
                print(">>>>>>>>>>>>>>>>>>")
                
            else:
              print("hello kese ho......elseeeee.")
        except:
              print("hello kese ho......except.")

        # ---------------------------------------------------------------------

        # -------------------category get start-----------------------------------------------------

        # try:
        #     # Make a GET request to your Node.js API endpoint
        #     response = requests.get('https://server.zeusgaming.gg/api/category/getCategory')  # Replace with your API endpoint

        #     # Check if request was successful (status code 200)
        #     print("response.status_code",response.status_code)
        #     if response.status_code == 200:
        #         data = response.json()  # Convert response to JSON format
        #         # Update the label text with the received data
        #         # self.label.setText(f"Response from Node.js API: {data}")
        #         print("data",data)
        #     else:
        #         print("data????")

        # except requests.exceptions.RequestException as e:
        #         print("data????---------")

        # -----------------------------category get end -------------------------------------------
        
        QFontDatabase.addApplicationFont(r"C:\ZEUS_Media\Artemus.otf")
        QFontDatabase.addApplicationFont(r"C:\ZEUS_Media\Raleway-Medium.ttf")
        QFontDatabase.addApplicationFont(r"C:\ZEUS_Media\Raleway-Bold.ttf")

        
        # --------------------------------------------------
        # self.monitor_thread = threading.Thread(target=self.monitor_chrome, daemon=True)
        # self.monitor_thread.start()

        # self.log_file = "chrome_log.json"
        # self.log_data = []
        # self.chrome_process = None
        # --------------------------------------------------

        self.centralWidget = QtWidgets.QWidget(self)
        self.centralWidget.setStyleSheet("QWidget {\n"
        " background-color: #DDDDDD;\n"
        "}")
        self.centralWidget.setObjectName("centralWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.outsideMainStackWidget = QtWidgets.QStackedWidget(self.centralWidget)
        self.outsideMainStackWidget.setObjectName("outsideMainStackWidget")
        self.SoftwareAfterLogin = QtWidgets.QWidget()
        self.SoftwareAfterLogin.setObjectName("SoftwareAfterLogin")
        self.verticalLayout_25 = QtWidgets.QVBoxLayout(self.SoftwareAfterLogin)
        self.verticalLayout_25.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_25.setSpacing(10)
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.HeaderFrameMainSoftware = QtWidgets.QFrame(self.SoftwareAfterLogin)
        self.HeaderFrameMainSoftware.setMinimumSize(QtCore.QSize(0, 60))
        self.HeaderFrameMainSoftware.setMaximumSize(QtCore.QSize(16777215, 60))
        self.HeaderFrameMainSoftware.setStyleSheet("QWidget {\n"
        " background-color: white;\n"
        "}")
        self.HeaderFrameMainSoftware.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.HeaderFrameMainSoftware.setFrameShadow(QtWidgets.QFrame.Raised)
        self.HeaderFrameMainSoftware.setObjectName("HeaderFrameMainSoftware")
        effect = QGraphicsDropShadowEffect()
        effect.setColor(QColor("#D158F8"))
        effect.setBlurRadius(45)
        effect.setOffset(0, 4)
        self.HeaderFrameMainSoftware.setGraphicsEffect(effect)
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.HeaderFrameMainSoftware)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(314, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.zeusLogoHeader = QtWidgets.QLabel(self.HeaderFrameMainSoftware)
        self.zeusLogoHeader.setText("")
        self.zeusLogoHeader.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\Logo 2@4x-8 2(1).png"))
        self.zeusLogoHeader.setObjectName("zeusLogoHeader")
        self.horizontalLayout.addWidget(self.zeusLogoHeader)
        spacerItem1 = QtWidgets.QSpacerItem(313, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout_25.addWidget(self.HeaderFrameMainSoftware)
        self.MainWidgetMainSoftware = QtWidgets.QWidget(self.SoftwareAfterLogin)
        self.MainWidgetMainSoftware.setEnabled(True)
        self.MainWidgetMainSoftware.setMinimumSize(QtCore.QSize(0, 0))
        self.MainWidgetMainSoftware.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.MainWidgetMainSoftware.setStyleSheet("QWidget {\n"
        " background-color: #DDDDDD;\n"
        "}")
        self.MainWidgetMainSoftware.setObjectName("MainWidgetMainSoftware")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.MainWidgetMainSoftware)
        
        self.horizontalLayout_2.setContentsMargins(0, 20, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.sidebarFrameMainSoftware = QtWidgets.QFrame(self.MainWidgetMainSoftware)

        self.sidebarFrameMainSoftware.setMinimumSize(QtCore.QSize(123, 500))
        self.sidebarFrameMainSoftware.setMaximumSize(QtCore.QSize(123, 500))

        self.sidebarFrameMainSoftware.setStyleSheet("QFrame {\n"
        "background-color: white;\n"
        "border-top-right-radius: 30px;\n"
        "border-bottom-right-radius: 30px;\n"
        "}")
        self.sidebarFrameMainSoftware.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.sidebarFrameMainSoftware.setFrameShadow(QtWidgets.QFrame.Raised)

        effect = QGraphicsDropShadowEffect()
        effect.setColor(QColor("#D158F8"))
        effect.setBlurRadius(30)
        effect.setOffset(5, 1)
        self.sidebarFrameMainSoftware.setGraphicsEffect(effect)

        self.sidebarFrameMainSoftware.setObjectName("sidebarFrameMainSoftware")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.sidebarFrameMainSoftware)
        self.verticalLayout_3.setContentsMargins(-1, 9, -1, -1)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.otherAppsFrameMainSoftwareSidebar = QtWidgets.QFrame(self.sidebarFrameMainSoftware)
        self.otherAppsFrameMainSoftwareSidebar.setMaximumSize(QtCore.QSize(16777215, 66))
        self.otherAppsFrameMainSoftwareSidebar.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.otherAppsFrameMainSoftwareSidebar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.otherAppsFrameMainSoftwareSidebar.setObjectName("otherAppsFrameMainSoftwareSidebar")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.otherAppsFrameMainSoftwareSidebar)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.otherAppsButtonMainSoftwareSidebar = QtWidgets.QPushButton(self.otherAppsFrameMainSoftwareSidebar)
        self.otherAppsButtonMainSoftwareSidebar.setFocusPolicy(QtCore.Qt.NoFocus)

        self.otherAppsButtonMainSoftwareSidebar.setMinimumSize(QtCore.QSize(75, 30))
        self.otherAppsButtonMainSoftwareSidebar.setMaximumSize(QtCore.QSize(30, 30))
        self.otherAppsButtonMainSoftwareSidebar.setSizeIncrement(QtCore.QSize(30, 30))
        self.otherAppsButtonMainSoftwareSidebar.setBaseSize(QtCore.QSize(30, 30))
        self.otherAppsButtonMainSoftwareSidebar.setAutoFillBackground(False)
        self.otherAppsButtonMainSoftwareSidebar.setStyleSheet("QPushButton {\n"
        "background-color : white;\n"
        "border:none;\n"
        "}")
        self.otherAppsButtonMainSoftwareSidebar.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\otherApps.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.otherAppsButtonMainSoftwareSidebar.setIcon(icon)
        self.otherAppsButtonMainSoftwareSidebar.setIconSize(QtCore.QSize(24, 24))
        self.otherAppsButtonMainSoftwareSidebar.setCheckable(True)
        self.otherAppsButtonMainSoftwareSidebar.setAutoDefault(False)
        self.otherAppsButtonMainSoftwareSidebar.setDefault(False)
        self.otherAppsButtonMainSoftwareSidebar.setFlat(False)
        self.otherAppsButtonMainSoftwareSidebar.clicked.connect(self.show_OtherApps_Stack)

        self.otherAppsButtonMainSoftwareSidebar.setObjectName("otherAppsButtonMainSoftwareSidebar")
        self.verticalLayout_2.addWidget(self.otherAppsButtonMainSoftwareSidebar)
        self.otherAppsLabelMainSofwareSidebar = QtWidgets.QPushButton(self.otherAppsFrameMainSoftwareSidebar)
        self.otherAppsLabelMainSofwareSidebar.setObjectName("otherAppsLabelMainSofwareSidebar")
        self.otherAppsLabelMainSofwareSidebar.setStyleSheet("background-color: #ffffff;\n" "border: none;\n")

        self.verticalLayout_2.addWidget(self.otherAppsLabelMainSofwareSidebar, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout_3.addWidget(self.otherAppsFrameMainSoftwareSidebar)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem2)
        self.gameLibraryFrameMainSoftwareSidebar = QtWidgets.QFrame(self.sidebarFrameMainSoftware)
        self.gameLibraryFrameMainSoftwareSidebar.setObjectName("gameLibraryFrameMainSoftwareSidebar")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.gameLibraryFrameMainSoftwareSidebar)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.gameLibraryButtonMainSoftwareSidebar = QtWidgets.QPushButton(self.gameLibraryFrameMainSoftwareSidebar)
        self.gameLibraryButtonMainSoftwareSidebar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.gameLibraryButtonMainSoftwareSidebar.setStyleSheet("QPushButton {\n"
"background-color : white;\n"
"border:none;\n"
"}")
        self.gameLibraryButtonMainSoftwareSidebar.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\gameLibPink.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.gameLibraryButtonMainSoftwareSidebar.setIcon(icon1)
        self.gameLibraryButtonMainSoftwareSidebar.setIconSize(QtCore.QSize(24, 24))
        self.gameLibraryButtonMainSoftwareSidebar.setCheckable(True)
        self.gameLibraryButtonMainSoftwareSidebar.setObjectName("gameLibraryButtonMainSoftwareSidebar")
        self.gameLibraryButtonMainSoftwareSidebar.clicked.connect(self.show_GameLib_Stack)

        self.verticalLayout_7.addWidget(self.gameLibraryButtonMainSoftwareSidebar)
        self.gameLibraryLabelMainSoftwareSidebar = QtWidgets.QPushButton(self.gameLibraryFrameMainSoftwareSidebar)
        self.gameLibraryLabelMainSoftwareSidebar.setObjectName("gameLibraryLabelMainSoftwareSidebar")
        self.gameLibraryLabelMainSoftwareSidebar.setStyleSheet("background-color: #ffffff;\n" "border: none;\n")
        self.gameLibraryLabelMainSoftwareSidebar.setMaximumWidth(240)

        # self.gameLibraryLabelMainSoftwareSidebar.setMaximumSize(QtCore.QSize(16777215, 40))

        self.verticalLayout_7.addWidget(self.gameLibraryLabelMainSoftwareSidebar, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        self.verticalLayout_3.addWidget(self.gameLibraryFrameMainSoftwareSidebar)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem3)
        
        self.orderFoodFrameMainSoftwareSidebar = QtWidgets.QFrame(self.sidebarFrameMainSoftware)
        self.orderFoodFrameMainSoftwareSidebar.setObjectName("orderFoodFrameMainSoftwareSidebar")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.orderFoodFrameMainSoftwareSidebar)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.foodOrderButtonMainSoftwareSidebar = QtWidgets.QPushButton(self.orderFoodFrameMainSoftwareSidebar)
        self.foodOrderButtonMainSoftwareSidebar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.foodOrderButtonMainSoftwareSidebar.setStyleSheet("QPushButton {\n"
"background-color : white;\n"
"border:none;\n"
"}")
        self.foodOrderButtonMainSoftwareSidebar.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\foodNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.foodOrderButtonMainSoftwareSidebar.setIcon(icon2)
        self.foodOrderButtonMainSoftwareSidebar.setIconSize(QtCore.QSize(30, 35))
        self.foodOrderButtonMainSoftwareSidebar.setCheckable(True)
        self.foodOrderButtonMainSoftwareSidebar.setObjectName("foodOrderButtonMainSoftwareSidebar")
        self.foodOrderButtonMainSoftwareSidebar.clicked.connect(self.show_OrderFood_Stack)
        
        self.verticalLayout_4.addWidget(self.foodOrderButtonMainSoftwareSidebar)
        self.foodOrderLabelMainSoftwareSidebar = QtWidgets.QPushButton(self.orderFoodFrameMainSoftwareSidebar)
        # self.foodOrderLabelMainSoftwareSidebar.setAlignment(QtCore.Qt.AlignCenter)
        self.foodOrderLabelMainSoftwareSidebar.setStyleSheet("background-color: #ffffff;\n" "border: none;\n")

        self.foodOrderLabelMainSoftwareSidebar.setObjectName("foodOrderLabelMainSoftwareSidebar")
        self.verticalLayout_4.addWidget(self.foodOrderLabelMainSoftwareSidebar)
        self.verticalLayout_3.addWidget(self.orderFoodFrameMainSoftwareSidebar)
       
        

        # self.setLayout(self.verticalLayout_4)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem4)
        self.walletFrameMainSoftwareSidebar = QtWidgets.QFrame(self.sidebarFrameMainSoftware)
        self.walletFrameMainSoftwareSidebar.setObjectName("walletFrameMainSoftwareSidebar")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.walletFrameMainSoftwareSidebar)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.walletButtonMainSoftwareSidebar = QtWidgets.QPushButton(self.walletFrameMainSoftwareSidebar)
        self.walletButtonMainSoftwareSidebar.setFocusPolicy(QtCore.Qt.NoFocus)

        self.walletButtonMainSoftwareSidebar.setStyleSheet("QPushButton {\n"
"background-color : white;\n"
"border:none;\n"
"}")
        self.walletButtonMainSoftwareSidebar.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\WalletNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.walletButtonMainSoftwareSidebar.setIcon(icon3)
        self.walletButtonMainSoftwareSidebar.setIconSize(QtCore.QSize(24, 24))
        self.walletButtonMainSoftwareSidebar.setCheckable(True)
        self.walletButtonMainSoftwareSidebar.setObjectName("walletButtonMainSoftwareSidebar")
        self.walletButtonMainSoftwareSidebar.clicked.connect(self.show_Wallet_Stack)

        self.verticalLayout_5.addWidget(self.walletButtonMainSoftwareSidebar)
        self.walletLabelMainSoftwareSidebar = QtWidgets.QPushButton(self.walletFrameMainSoftwareSidebar)
        # self.walletLabelMainSoftwareSidebar.setAlignment(QtCore.Qt.AlignCenter)
        self.walletLabelMainSoftwareSidebar.setStyleSheet("background-color: #ffffff;\n" "border: none;\n")

        self.walletLabelMainSoftwareSidebar.setObjectName("walletLabelMainSoftwareSidebar")
        
        
        self.verticalLayout_5.addWidget(self.walletLabelMainSoftwareSidebar)
        self.verticalLayout_3.addWidget(self.walletFrameMainSoftwareSidebar)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem5)
        self.profileFrameMainSoftwareSidebar = QtWidgets.QFrame(self.sidebarFrameMainSoftware)
        self.profileFrameMainSoftwareSidebar.setMinimumSize(QtCore.QSize(0, 0))
        self.profileFrameMainSoftwareSidebar.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.profileFrameMainSoftwareSidebar.setFrameShadow(QtWidgets.QFrame.Raised)
        self.profileFrameMainSoftwareSidebar.setObjectName("profileFrameMainSoftwareSidebar")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.profileFrameMainSoftwareSidebar)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.profileButtonMainSofwareSidebar = QtWidgets.QPushButton(self.profileFrameMainSoftwareSidebar)
        self.profileButtonMainSofwareSidebar.setFocusPolicy(QtCore.Qt.NoFocus)

        self.profileButtonMainSofwareSidebar.setStyleSheet("QPushButton {\n"
        "background-color : white;\n"
        "border:none;\n"
        "}")
        self.profileButtonMainSofwareSidebar.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\ProfileNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.profileButtonMainSofwareSidebar.setIcon(icon4)
        self.profileButtonMainSofwareSidebar.setIconSize(QtCore.QSize(24, 24))
        self.profileButtonMainSofwareSidebar.setCheckable(True)
        self.profileButtonMainSofwareSidebar.setObjectName("profileButtonMainSofwareSidebar")
        self.profileButtonMainSofwareSidebar.clicked.connect(self.show_Profile_Stack)

        self.verticalLayout_9.addWidget(self.profileButtonMainSofwareSidebar)
        self.profileLabelMainSoftwareSidebar = QtWidgets.QPushButton(self.profileFrameMainSoftwareSidebar)
        self.profileLabelMainSoftwareSidebar.setObjectName("profileLabelMainSoftwareSidebar")
        self.profileLabelMainSoftwareSidebar.setStyleSheet("background-color: #ffffff;\n" "border: none;\n")

        self.verticalLayout_9.addWidget(self.profileLabelMainSoftwareSidebar, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout_3.addWidget(self.profileFrameMainSoftwareSidebar)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem6)
        self.logoutFrameMainSoftwareSidebar = QtWidgets.QFrame(self.sidebarFrameMainSoftware)
        self.logoutFrameMainSoftwareSidebar.setObjectName("logoutFrameMainSoftwareSidebar")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.logoutFrameMainSoftwareSidebar)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.logoutButtonMainSoftwareSidebar = QtWidgets.QPushButton(self.logoutFrameMainSoftwareSidebar)
        self.logoutButtonMainSoftwareSidebar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.logoutButtonMainSoftwareSidebar.setStyleSheet("QPushButton {\n"
"background-color : white;\n"
"border:none;\n"
"}")
        self.logoutButtonMainSoftwareSidebar.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\LogoutNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.logoutButtonMainSoftwareSidebar.setIcon(icon5)
        self.logoutButtonMainSoftwareSidebar.setIconSize(QtCore.QSize(24, 24))
        self.logoutButtonMainSoftwareSidebar.setCheckable(True)
        self.logoutButtonMainSoftwareSidebar.setObjectName("logoutButtonMainSoftwareSidebar")

        # self.logoutButtonMainSoftwareSidebar.clicked.connect(self.show_Login_Stack_post)
        self.logoutButtonMainSoftwareSidebar.clicked.connect(self.Logout_Test)

        self.verticalLayout_6.addWidget(self.logoutButtonMainSoftwareSidebar)
        self.logoutLabelMainSoftwareSidebar = QtWidgets.QPushButton(self.logoutFrameMainSoftwareSidebar)
        # self.logoutLabelMainSoftwareSidebar.setAlignment(QtCore.Qt.AlignCenter)
        self.logoutLabelMainSoftwareSidebar.setStyleSheet("background-color: #ffffff;\n" "border: none;\n")

        self.logoutLabelMainSoftwareSidebar.setObjectName("logoutLabelMainSoftwareSidebar")
        self.verticalLayout_6.addWidget(self.logoutLabelMainSoftwareSidebar)
        self.verticalLayout_3.addWidget(self.logoutFrameMainSoftwareSidebar)
        self.horizontalLayout_2.addWidget(self.sidebarFrameMainSoftware)
        spacerItem7 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem7)
        self.rightSideMainWidgetMainSoftware = QtWidgets.QWidget(self.MainWidgetMainSoftware)
        self.rightSideMainWidgetMainSoftware.setMinimumSize(QtCore.QSize(0, 500))
        self.rightSideMainWidgetMainSoftware.setMaximumSize(QtCore.QSize(16777215, 1000))
        font = QtGui.QFont()
        font.setKerning(False)
        self.rightSideMainWidgetMainSoftware.setFont(font)
        self.rightSideMainWidgetMainSoftware.setObjectName("rightSideMainWidgetMainSoftware")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.rightSideMainWidgetMainSoftware)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setSpacing(0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.insideMainStackWidget = QtWidgets.QStackedWidget(self.rightSideMainWidgetMainSoftware)
        self.insideMainStackWidget.setObjectName("insideMainStackWidget")
        self.gameLibInsideMainStackWidget = QtWidgets.QWidget()
        self.gameLibInsideMainStackWidget.setObjectName("gameLibInsideMainStackWidget")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.gameLibInsideMainStackWidget)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.firstSectionFrameInsideMainStackWidget = QtWidgets.QFrame(self.gameLibInsideMainStackWidget)
        # self.firstSectionFrameInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 40))
        # self.firstSectionFrameInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 40))
        self.firstSectionFrameInsideMainStackWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.firstSectionFrameInsideMainStackWidget.setFrameShadow(QtWidgets.QFrame.Raised)
        self.firstSectionFrameInsideMainStackWidget.setObjectName("firstSectionFrameInsideMainStackWidget")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.firstSectionFrameInsideMainStackWidget)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setSpacing(0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.headingLabelRecentGamesInsideMainStackWidget = QtWidgets.QLabel(self.firstSectionFrameInsideMainStackWidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setKerning(False)
        self.headingLabelRecentGamesInsideMainStackWidget.setFont(QFont('Artemus',25))
        self.headingLabelRecentGamesInsideMainStackWidget.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.headingLabelRecentGamesInsideMainStackWidget.setObjectName("headingLabelRecentGamesInsideMainStackWidget")
        self.horizontalLayout_11.addWidget(self.headingLabelRecentGamesInsideMainStackWidget)
        spacerItem8 = QtWidgets.QSpacerItem(565, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_11.addItem(spacerItem8)
        self.arrowButtonForScrollInsideMainStackWidget = QtWidgets.QFrame(self.firstSectionFrameInsideMainStackWidget)
        self.arrowButtonForScrollInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 30))
        self.arrowButtonForScrollInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 30))
        self.arrowButtonForScrollInsideMainStackWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.arrowButtonForScrollInsideMainStackWidget.setFrameShadow(QtWidgets.QFrame.Raised)
        self.arrowButtonForScrollInsideMainStackWidget.setObjectName("arrowButtonForScrollInsideMainStackWidget")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.arrowButtonForScrollInsideMainStackWidget)
        self.horizontalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_12.setSpacing(0)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.leftArrowScrollInsideMainStackWidget = QtWidgets.QPushButton(self.arrowButtonForScrollInsideMainStackWidget)
        self.leftArrowScrollInsideMainStackWidget.setMouseTracking(False)
        self.leftArrowScrollInsideMainStackWidget.setStyleSheet("QPushButton {\n"
"    border: none;\n"
"    background-color: transparent;\n"
"}")
        self.leftArrowScrollInsideMainStackWidget.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\rightArrow.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.leftArrowScrollInsideMainStackWidget.setIcon(icon6)
        self.leftArrowScrollInsideMainStackWidget.setCheckable(True)
        self.leftArrowScrollInsideMainStackWidget.setChecked(False)
        self.leftArrowScrollInsideMainStackWidget.setAutoDefault(False)
        self.leftArrowScrollInsideMainStackWidget.setDefault(False)
        self.leftArrowScrollInsideMainStackWidget.setFlat(False)
        self.leftArrowScrollInsideMainStackWidget.setObjectName("leftArrowScrollInsideMainStackWidget")
        self.horizontalLayout_12.addWidget(self.leftArrowScrollInsideMainStackWidget)
        spacerItem9 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_12.addItem(spacerItem9)
        self.rightArrowScrollInsideMainStackWidget = QtWidgets.QPushButton(self.arrowButtonForScrollInsideMainStackWidget)
        self.rightArrowScrollInsideMainStackWidget.setStyleSheet("QPushButton {\n"
"    border: none;\n"
"    background-color: transparent;\n"
"}")
        self.rightArrowScrollInsideMainStackWidget.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\leftArrow.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.rightArrowScrollInsideMainStackWidget.setIcon(icon7)
        self.rightArrowScrollInsideMainStackWidget.setCheckable(True)
        self.rightArrowScrollInsideMainStackWidget.setObjectName("rightArrowScrollInsideMainStackWidget")
        self.horizontalLayout_12.addWidget(self.rightArrowScrollInsideMainStackWidget)
        self.horizontalLayout_11.addWidget(self.arrowButtonForScrollInsideMainStackWidget)
        self.verticalLayout_16.addWidget(self.firstSectionFrameInsideMainStackWidget)

        self.secondSectionScrollAreaInsideMainStackWidget = QtWidgets.QScrollArea(self.gameLibInsideMainStackWidget)
        self.secondSectionScrollAreaInsideMainStackWidget.setHorizontalScrollBarPolicy(1) # Hide horizontal scroll bar
        # self.secondSectionScrollAreaInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 300))
        # self.secondSectionScrollAreaInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 300))
        self.secondSectionScrollAreaInsideMainStackWidget.setStyleSheet("border-color: rgb(255, 255, 255);")
        self.secondSectionScrollAreaInsideMainStackWidget.setFrameShape(QtWidgets.QFrame.NoFrame)

        self.secondSectionScrollAreaInsideMainStackWidget.setWidgetResizable(True)
        self.secondSectionScrollAreaInsideMainStackWidget.setObjectName("secondSectionScrollAreaInsideMainStackWidget")
        self.scrollAreaWidgetContentsInsideMainStackWidget = QtWidgets.QWidget()
        self.scrollAreaWidgetContentsInsideMainStackWidget.setGeometry(QtCore.QRect(0, 0, 1216, 298))
        self.scrollAreaWidgetContentsInsideMainStackWidget.setStyleSheet("border-color: rgb(255, 255, 255);")
        self.scrollAreaWidgetContentsInsideMainStackWidget.setObjectName("scrollAreaWidgetContentsInsideMainStackWidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.scrollAreaWidgetContentsInsideMainStackWidget)
        self.gridLayout_2.setHorizontalSpacing(90)
        self.gridLayout_2.setObjectName("gridLayout_2")
        
        self.verticalLayout_16.addWidget(self.secondSectionScrollAreaInsideMainStackWidget)
        self.thirdSectionFrameInsideMainStackWidget = QtWidgets.QFrame(self.gameLibInsideMainStackWidget)
        self.thirdSectionFrameInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 40))
        self.thirdSectionFrameInsideMainStackWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.thirdSectionFrameInsideMainStackWidget.setFrameShadow(QtWidgets.QFrame.Raised)
        self.thirdSectionFrameInsideMainStackWidget.setObjectName("thirdSectionFrameInsideMainStackWidget")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.thirdSectionFrameInsideMainStackWidget)
        self.horizontalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_13.setSpacing(0)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")

        self.headingLabelCategoryInsideMainStackWidget = QtWidgets.QLabel(self.thirdSectionFrameInsideMainStackWidget)
        self.headingLabelCategoryInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 40))
        self.headingLabelCategoryInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(False)
        font.setKerning(False)
        self.headingLabelCategoryInsideMainStackWidget.setFont(QFont('Artemus',25))
        self.headingLabelCategoryInsideMainStackWidget.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.headingLabelCategoryInsideMainStackWidget.setObjectName("headingLabelCategoryInsideMainStackWidget")
        self.horizontalLayout_13.addWidget(self.headingLabelCategoryInsideMainStackWidget)
        spacerItem10 = QtWidgets.QSpacerItem(664, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_13.addItem(spacerItem10)
        self.verticalLayout_16.addWidget(self.thirdSectionFrameInsideMainStackWidget)
        self.fourthSectionTabWidgetInsideMainStackWidget = QtWidgets.QTabWidget(self.gameLibInsideMainStackWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)

        self.fourthSectionTabWidgetInsideMainStackWidget.setFont(font)
        self.fourthSectionTabWidgetInsideMainStackWidget.setAcceptDrops(False)
        self.fourthSectionTabWidgetInsideMainStackWidget.setStyleSheet("QTabBar::tab:selected {\n"
        "    background-color: transparent;\n"
        "    border-bottom: 2px solid #D158F8;\n"
        "    padding: 5px 2px;\n"
        "}\n"
        "\n"
        "QTabBar::tab {\n"
        "    margin: 0px 20px;\n"
        "    padding: 5px 2px;\n"
        "    border: none;\n"
        "}\n"
        "\n"
        "QTabWidget {\n"
        "    border: none;\n"
        "}")
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.fourthSectionTabWidgetInsideMainStackWidget.setIconSize(QtCore.QSize(16, 16))
        self.fourthSectionTabWidgetInsideMainStackWidget.setElideMode(QtCore.Qt.ElideMiddle)
        self.fourthSectionTabWidgetInsideMainStackWidget.setUsesScrollButtons(True)
        self.fourthSectionTabWidgetInsideMainStackWidget.setDocumentMode(False)
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabsClosable(False)
        self.fourthSectionTabWidgetInsideMainStackWidget.setMovable(False)
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabBarAutoHide(False)
        self.fourthSectionTabWidgetInsideMainStackWidget.setObjectName("fourthSectionTabWidgetInsideMainStackWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setStyleSheet("border:none;")
        self.tab.setObjectName("tab")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_17.setSpacing(0)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.categoriesMainWidgetInsideMainStackWidget = QtWidgets.QWidget(self.tab)
        self.categoriesMainWidgetInsideMainStackWidget.setObjectName("categoriesMainWidgetInsideMainStackWidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.categoriesMainWidgetInsideMainStackWidget)
        self.gridLayout_3.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_3.setSpacing(0)
        self.gridLayout_3.setObjectName("gridLayout_3")

        self.categoriesScrollAreaOfTabInsideMainStackWidget = QtWidgets.QScrollArea(self.categoriesMainWidgetInsideMainStackWidget)
        self.categoriesScrollAreaOfTabInsideMainStackWidget.setWidgetResizable(True)
        self.categoriesScrollAreaOfTabInsideMainStackWidget.setObjectName("categoriesScrollAreaOfTabInsideMainStackWidget")
        self.gridWidgetForCardsInsideScrollInsideMainStackWidget = QtWidgets.QWidget()
        self.gridWidgetForCardsInsideScrollInsideMainStackWidget.setGeometry(QtCore.QRect(0, 0, 1198, 214))
        self.gridWidgetForCardsInsideScrollInsideMainStackWidget.setObjectName("gridWidgetForCardsInsideScrollInsideMainStackWidget")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.gridWidgetForCardsInsideScrollInsideMainStackWidget)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.categoriesScrollAreaOfTabInsideMainStackWidget.setStyleSheet("""
                QScrollArea {
                border: 1px solid #cccccc;
                border-radius: 5px;
                }
                QScrollBar:vertical {
                border: none;
                background:white;
                width: 10px;
                margin: 0px 0px 0px 0px;
                }
                QScrollBar::handle:vertical {
                background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));
                min-height: 20px;
                border-radius: 5px;
                }
                QScrollBar::add-line:vertical {
                height: 0px;
                subcontrol-position: bottom;
                subcontrol-origin: margin;
                }
                QScrollBar::sub-line:vertical {
                height: 0px;
                subcontrol-position: top;
                subcontrol-origin: margin;
                }
        """)

        # ----------get for games files start-----------------------------------------------------------------------------------------------------
        try:
            settings = QSettings("MyCompany", "MyApp")
            handleweb_webtoken = settings.value("webtoken")
            
            headers={"Authorization":handleweb_webtoken}
            # Make a GET request to your Node.js API endpoint
            response = requests.get('https://server.zeusgaming.gg/api/gamefiles/getgamefiles',headers=headers)  # Replace with your API endpoint

            # Check if request was successful (status code 200)
            print("response.status_code det game files",response.status_code)
            if response.status_code == 200:
                data = response.json()  # Convert response to JSON format
                # Update the label text with the received data
                print("datanewwewewewewewe",data['data']['data'])
                self.sendGameData = data['data']['data']
            else:
                print("dataewewewewewe????")

        except requests.exceptions.RequestException as e:
                print("dataewewew????---------",e)

        # ----------get for games files end-----------------------------------------------------------------------------------------------------
        # print(">>>>>>>>>>>>>>helloooooooo",self.sendGameData[0]['filename'])
        print(">>>>>>>>>>>>>>helloooooooo-----------------------------------------------")
        # print(">>>>>>>>>>>>>>helloooooooo",self.sendGameData[0]['category_id']==1)
        print(">>>>>>>>>>>>>>helloooooooo-----------------------------------------------")

        row =0 
        col= 0
        for i in range(len(self.sendGameData)):
                self.categoriesGameCardInsideMainStackWidget = QtWidgets.QGroupBox(self.gridWidgetForCardsInsideScrollInsideMainStackWidget)
                self.categoriesGameCardInsideMainStackWidget.setObjectName("categoriesGameCardInsideMainStackWidget")
                self.categoriesGameCardInsideMainStackWidget.setMinimumSize(QtCore.QSize(250, 0))
                self.categoriesGameCardInsideMainStackWidget.setMaximumSize(QtCore.QSize(250, 272))
                self.categoriesGameCardInsideMainStackWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.categoriesGameCardInsideMainStackWidget.setTitle("")
                self.verticalLayout_101 = QtWidgets.QVBoxLayout(self.categoriesGameCardInsideMainStackWidget)
                self.verticalLayout_101.setContentsMargins(0, 0, 0, 0)
                self.verticalLayout_101.setSpacing(0)
                self.verticalLayout_101.setObjectName("verticalLayout_101")
                self.lebel_61 = QtWidgets.QLabel(self.categoriesGameCardInsideMainStackWidget)
                self.lebel_61.setMinimumSize(QtCore.QSize(0, 173))
                self.lebel_61.setMaximumSize(QtCore.QSize(16777215, 173))
                self.lebel_61.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.lebel_61.setText("")

                settings = QSettings("MyCompany", "MyApp")
                handleweb_webtoken = settings.value("webtoken")
                headers={"Authorization":handleweb_webtoken}
                get_pic=self.sendGameData[i]['imagepath']
                # print("getpic",get_pic)

                try:
                        response = requests.get(f'https://server.zeusgaming.gg/gamefiles/{get_pic}',headers=headers)

                        if response.status_code == 200:
                                # print(">>>>>>>>>>>>>>>>>>>>>>>>>innnnnnnnnnnnnnnnnnnnnnnnn")
                        # Load the image data into QPixmap
                                pixmap = QPixmap()
                                pixmap.loadFromData(response.content)
                                self.lebel_61.setPixmap(pixmap)

                        else:
                                print("hello else get gameeeeeee")
                except Exception as e:
                               print(">>>>>>>>",e)

                # self.lebel_61.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))
                self.lebel_61.setScaledContents(True)
                self.lebel_61.setObjectName("lebel_61")
                self.verticalLayout_101.addWidget(self.lebel_61)
                self.widget_41 = QtWidgets.QWidget(self.categoriesGameCardInsideMainStackWidget)
                self.widget_41.setMinimumSize(QtCore.QSize(0, 101))
                self.widget_41.setMaximumSize(QtCore.QSize(16777215, 101))
                self.widget_41.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.widget_41.setObjectName("widget_41")
                self.verticalLayout_111 = QtWidgets.QVBoxLayout(self.widget_41)
                self.verticalLayout_111.setSpacing(12)
                self.verticalLayout_111.setObjectName("verticalLayout_111")
                self.label_111 = QtWidgets.QLabel(self.widget_41)
                font = QtGui.QFont()
                font.setPointSize(11)
                self.label_111.setFont(QFont('raleway',12))
                self.label_111.setObjectName("label_111")
                self.label_111.setText(self.sendGameData[i]['filename'])
                self.verticalLayout_111.addWidget(self.label_111)
                self.pushButton_41 = QtWidgets.QPushButton(self.widget_41)
                self.pushButton_41.setMaximumSize(QtCore.QSize(75, 16777215))
                font = QtGui.QFont()
                font.setPointSize(11)
                self.pushButton_41.setFont(QFont('raleway',11,100))
                self.pushButton_41.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
                "color: rgb(255, 255, 255);\n"
                "border-radius : 5;\n"
                "padding-top: 8px; padding-bottom: 8px;")
                self.pushButton_41.setObjectName("pushButton_41")
                self.pushButton_41.setText("Play")
                # self.pushButton_41.clicked.connect(lambda state, path=self.sendGameData[i]['filepath']: self.launch_exe(path))
                # self.pushButton_41.clicked.connect(lambda state, path=self.sendGameData[i]['filepath'],id =self.sendGameData[i]['id']: execute_exe(path,id))
                self.pushButton_41.clicked.connect(lambda state, path=self.sendGameData[i]['filepath'],id =self.sendGameData[i]['id']: self.Not_start_process(path,id))

                self.verticalLayout_111.addWidget(self.pushButton_41)
                self.verticalLayout_101.addWidget(self.widget_41)

                self.gridLayout_6.addWidget(self.categoriesGameCardInsideMainStackWidget, row, col, 1, 1)
                self.categoriesScrollAreaOfTabInsideMainStackWidget.setWidget(self.gridWidgetForCardsInsideScrollInsideMainStackWidget)
                self.gridLayout_3.addWidget(self.categoriesScrollAreaOfTabInsideMainStackWidget, 0, 0, 1, 1)
                self.verticalLayout_17.addWidget(self.categoriesMainWidgetInsideMainStackWidget)

                col += 1
                if col == 5:  # Reset column count and move to the next row after every third executable
                        col = 0
                        row += 1

        self.fourthSectionTabWidgetInsideMainStackWidget.setFont(QFont('raleway',14))
        self.fourthSectionTabWidgetInsideMainStackWidget.addTab(self.tab, "")

# ----------------------------first person shooter category------------------------------------------------------------------------
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")

        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.tab_3)
        self.verticalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_18.setSpacing(0)
        self.verticalLayout_18.setObjectName("verticalLayout_18")

        self.widget_2 = QtWidgets.QWidget(self.tab_3)
        self.widget_2.setObjectName("widget_2")

        self.horizontalLayout_27 = QtWidgets.QGridLayout(self.widget_2)
        self.horizontalLayout_27.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_27.setSpacing(0)
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")

        self.scrollArea_3 = QtWidgets.QScrollArea(self.widget_2)
        self.scrollArea_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollArea_3.setObjectName("scrollArea_3")

        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 1530, 514))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")

        self.gridLayout_5 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents_3)
        self.gridLayout_5.setObjectName("gridLayout_5")

        row3 =0 
        col3 = 0
        for i in range(len(self.sendGameData)):
                if self.sendGameData[i]['category_id']==1:
                        self.groupBox_4 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_3)
                        self.groupBox_4.setObjectName("groupBox_4")
                        self.groupBox_4.setMinimumSize(QtCore.QSize(250, 0))
                        self.groupBox_4.setMaximumSize(QtCore.QSize(250, 272))
                        self.groupBox_4.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.groupBox_4.setTitle("")

                        self.verticalLayout_1013 = QtWidgets.QVBoxLayout(self.groupBox_4)
                        self.verticalLayout_1013.setContentsMargins(0, 0, 0, 0)
                        self.verticalLayout_1013.setSpacing(0)
                        self.verticalLayout_1013.setObjectName("verticalLayout_1013")

                        self.lebel_613 = QtWidgets.QLabel(self.groupBox_4)
                        self.lebel_613.setMinimumSize(QtCore.QSize(0, 173))
                        self.lebel_613.setMaximumSize(QtCore.QSize(16777215, 173))
                        self.lebel_613.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.lebel_613.setText("")
                        # -------------------------------------------------------------------------------
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        get_pic=self.sendGameData[i]['imagepath']
                        # print("getpic",get_pic)
                        try:
                                response = requests.get(f'https://server.zeusgaming.gg/gamefiles/{get_pic}',headers=headers)

                                if response.status_code == 200:
                                        # print(">>>>>>>>>>>>>>>>>>>>>>>>>innnnnnnnnnnnnnnnnnnnnnnnn")
                                # Load the image data into QPixmap
                                        pixmap = QPixmap()
                                        pixmap.loadFromData(response.content)
                                        self.lebel_613.setPixmap(pixmap)
                                # self.lebel_613.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))

                                else:
                                        print("hello else get first person shooter category")
                        except Exception as e:
                               print(">>>>>>>>",e)
                        # -------------------------------------------------------------------------------
                        # self.lebel_613.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))
                        self.lebel_613.setScaledContents(True)
                        self.lebel_613.setObjectName("lebel_613")
                        self.verticalLayout_1013.addWidget(self.lebel_613)
                        self.widget_413 = QtWidgets.QWidget(self.groupBox_4)
                        self.widget_413.setMinimumSize(QtCore.QSize(0, 101))
                        self.widget_413.setMaximumSize(QtCore.QSize(16777215, 101))
                        self.widget_413.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.widget_413.setObjectName("widget_413")
                        self.verticalLayout_1113 = QtWidgets.QVBoxLayout(self.widget_413)
                        self.verticalLayout_1113.setSpacing(12)
                        self.verticalLayout_1113.setObjectName("verticalLayout_1113")
                        self.label_1113 = QtWidgets.QLabel(self.widget_413)
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.label_1113.setFont(QFont('raleway',12))
                        self.label_1113.setObjectName("label_1113")
                        self.label_1113.setText(self.sendGameData[i]['filename'])
                        self.verticalLayout_1113.addWidget(self.label_1113)
                        self.pushButton_413 = QtWidgets.QPushButton(self.widget_413)
                        self.pushButton_413.setMaximumSize(QtCore.QSize(75, 16777215))
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.pushButton_413.setFont(QFont('raleway',11,100))
                        self.pushButton_413.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
                        "color: rgb(255, 255, 255);\n"
                        "border-radius : 5;\n"
                        "padding-top: 8px; padding-bottom: 8px;")
                        self.pushButton_413.setObjectName("pushButton_413")

                        self.pushButton_413.setText("Play")

                        self.pushButton_413.clicked.connect(lambda state, path=self.sendGameData[i]['filepath'],id =self.sendGameData[i]['id']: self.Not_start_process(path,id))


                        self.verticalLayout_1113.addWidget(self.pushButton_413)
                        self.verticalLayout_1013.addWidget(self.widget_413)

                        # self.gridLayout_6.addWidget(self.groupBox_4, row, col, 1, 1)
                        # self.categoriesScrollAreaOfTabInsideMainStackWidget.setWidget(self.gridWidgetForCardsInsideScrollInsideMainStackWidget)
                        # self.gridLayout_3.addWidget(self.categoriesScrollAreaOfTabInsideMainStackWidget, 0, 0, 1, 1)
                        # self.verticalLayout_17.addWidget(self.categoriesMainWidgetInsideMainStackWidget)

                        self.gridLayout_5.addWidget(self.groupBox_4, row3, col3, 1, 1)
                        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_3)
                        self.horizontalLayout_27.addWidget(self.scrollArea_3,0, 0, 1, 1)
                        self.verticalLayout_18.addWidget(self.widget_2)

                        col3 += 1
                        if col3 == 5:  # Reset column count and move to the next row after every third executable
                                col3 = 0
                                row3 += 1



        self.fourthSectionTabWidgetInsideMainStackWidget.addTab(self.tab_3, "")

# ----------------------------------------------------------------------------------------------------
# -------------------------sports and racing category---------------------------------------------------------------------------

        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.verticalLayout_35 = QtWidgets.QVBoxLayout(self.tab_2)
        self.verticalLayout_35.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_35.setSpacing(0)
        self.verticalLayout_35.setObjectName("verticalLayout_35")

        self.widget = QtWidgets.QWidget(self.tab_2)
        self.widget.setObjectName("widget")

        self.horizontalLayout_26 = QtWidgets.QGridLayout(self.widget)
        self.horizontalLayout_26.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_26.setSpacing(0)
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")

        self.scrollArea_2 = QtWidgets.QScrollArea(self.widget)
        self.scrollArea_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")

        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 1530, 514))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")

        self.gridLayout_7 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents_2)
        self.gridLayout_7.setObjectName("gridLayout_7")

        row2 =0 
        col2 = 0
        for i in range(len(self.sendGameData)):
                if self.sendGameData[i]['category_id']==2:
                        self.groupBox_2 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_2)
                        self.groupBox_2.setObjectName("groupBox_2")
                        self.groupBox_2.setMinimumSize(QtCore.QSize(250, 0))
                        self.groupBox_2.setMaximumSize(QtCore.QSize(250, 272))
                        self.groupBox_2.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.groupBox_2.setTitle("")

                        self.verticalLayout_1012 = QtWidgets.QVBoxLayout(self.groupBox_2)
                        self.verticalLayout_1012.setContentsMargins(0, 0, 0, 0)
                        self.verticalLayout_1012.setSpacing(0)
                        self.verticalLayout_1012.setObjectName("verticalLayout_1012")

                        self.lebel_612 = QtWidgets.QLabel(self.groupBox_2)
                        self.lebel_612.setMinimumSize(QtCore.QSize(0, 173))
                        self.lebel_612.setMaximumSize(QtCore.QSize(16777215, 173))
                        self.lebel_612.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.lebel_612.setText("")

                        # ---------------------------------------------------------------------------------------------
                        # -------------------------------------------------------------------------------
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        get_pic=self.sendGameData[i]['imagepath']
                        # print("getpic",get_pic)
                        try:
                                response = requests.get(f'https://server.zeusgaming.gg/gamefiles/{get_pic}',headers=headers)

                                if response.status_code == 200:
                                        # print(">>>>>>>>>>>>>>>>>>>>>>>>>innnnnnnnnnnnnnnnnnnnnnnnn")
                                # Load the image data into QPixmap
                                        pixmap = QPixmap()
                                        pixmap.loadFromData(response.content)
                                        self.lebel_612.setPixmap(pixmap)
                                # self.lebel_613.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))

                                else:
                                        print("hello else get sports and racing category")
                        except Exception as e:
                               print(">>>>>>>>",e)
                        # -------------------------------------------------------------------------------
                        # ---------------------------------------------------------------------------------------------

                        # self.lebel_612.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))
                        self.lebel_612.setScaledContents(True)
                        self.lebel_612.setObjectName("lebel_612")

                        self.verticalLayout_1012.addWidget(self.lebel_612)

                        self.widget_412 = QtWidgets.QWidget(self.groupBox_2)
                        self.widget_412.setMinimumSize(QtCore.QSize(0, 101))
                        self.widget_412.setMaximumSize(QtCore.QSize(16777215, 101))
                        self.widget_412.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.widget_412.setObjectName("widget_412")

                        self.verticalLayout_1112 = QtWidgets.QVBoxLayout(self.widget_412)
                        self.verticalLayout_1112.setSpacing(12)
                        self.verticalLayout_1112.setObjectName("verticalLayout_1112")

                        self.label_1112 = QtWidgets.QLabel(self.widget_412)
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.label_1112.setFont(QFont('raleway',12))
                        self.label_1112.setObjectName("label_1112")
                        self.label_1112.setText(self.sendGameData[i]['filename'])
                        self.verticalLayout_1112.addWidget(self.label_1112)

                        self.pushButton_412 = QtWidgets.QPushButton(self.widget_412)
                        self.pushButton_412.setMaximumSize(QtCore.QSize(75, 16777215))
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.pushButton_412.setFont(QFont('raleway',11,100))
                        self.pushButton_412.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
                        "color: rgb(255, 255, 255);\n"
                        "border-radius : 5;\n"
                        "padding-top: 8px; padding-bottom: 8px;")
                        self.pushButton_412.setObjectName("pushButton_412")

                        self.pushButton_412.setText("Play")

                        self.pushButton_412.clicked.connect(lambda state, path=self.sendGameData[i]['filepath'],id =self.sendGameData[i]['id']: self.Not_start_process(path,id))


                        self.verticalLayout_1112.addWidget(self.pushButton_412)
                        self.verticalLayout_1012.addWidget(self.widget_412)


                        self.gridLayout_7.addWidget(self.groupBox_2, row2, col2, 1, 1)
                        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
                        self.horizontalLayout_26.addWidget(self.scrollArea_2,0, 0, 1, 1)
                        self.verticalLayout_35.addWidget(self.widget)

                        col2 += 1
                        if col2 == 5:  # Reset column count and move to the next row after every third executable
                                col2 = 0
                                row2 += 1


        self.fourthSectionTabWidgetInsideMainStackWidget.addTab(self.tab_2, "")

# ----------------------------------------------------------------------------------------------------
# --------------------------------battle royale category--------------------------------------------------------------------

        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")

        self.verticalLayout_3366 = QtWidgets.QVBoxLayout(self.tab_4)
        self.verticalLayout_3366.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3366.setSpacing(0)
        self.verticalLayout_3366.setObjectName("verticalLayout_3366")

        self.widget_3 = QtWidgets.QWidget(self.tab_4)
        self.widget_3.setObjectName("widget_3")

        self.horizontalLayout_28 = QtWidgets.QGridLayout(self.widget_3)
        self.horizontalLayout_28.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_28.setSpacing(0)
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")

        self.scrollArea_4 = QtWidgets.QScrollArea(self.widget_3)
        self.scrollArea_4.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea_4.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea_4.setWidgetResizable(True)
        self.scrollArea_4.setObjectName("scrollArea_4")

        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 1530, 514))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")

        self.gridLayout_8 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents_4)
        self.gridLayout_8.setObjectName("gridLayout_8")

        
        row4 =0 
        col4 = 0
        for i in range(len(self.sendGameData)):
                if self.sendGameData[i]['category_id']==3:
                        self.groupBox_5 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_4)
                        self.groupBox_5.setObjectName("groupBox_5")
                        self.groupBox_5.setMinimumSize(QtCore.QSize(250, 0))
                        self.groupBox_5.setMaximumSize(QtCore.QSize(250, 272))
                        self.groupBox_5.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.groupBox_5.setTitle("")

                        self.verticalLayout_1014 = QtWidgets.QVBoxLayout(self.groupBox_5)
                        self.verticalLayout_1014.setContentsMargins(0, 0, 0, 0)
                        self.verticalLayout_1014.setSpacing(0)
                        self.verticalLayout_1014.setObjectName("verticalLayout_1014")

                        self.lebel_614 = QtWidgets.QLabel(self.groupBox_5)
                        self.lebel_614.setMinimumSize(QtCore.QSize(0, 173))
                        self.lebel_614.setMaximumSize(QtCore.QSize(16777215, 173))
                        self.lebel_614.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.lebel_614.setText("")

                        # -------------------------battle royale category------------------------------------------------------
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        get_pic=self.sendGameData[i]['imagepath']
                        # print("getpic",get_pic)

                        try:
                                response = requests.get(f'https://server.zeusgaming.gg/gamefiles/{get_pic}',headers=headers)
                                if response.status_code == 200:
                                # Load the image data into QPixmap
                                        pixmap = QPixmap()
                                        pixmap.loadFromData(response.content)
                                        self.lebel_614.setPixmap(pixmap)
                                else:
                                        print("hello else get battle royale category category")
                        except Exception as e:
                               print(">>>>>>>>",e)
                        # -------------------------------------------------------------------------------
                        # self.lebel_614.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))
                        self.lebel_614.setScaledContents(True)
                        self.lebel_614.setObjectName("lebel_614")

                        self.verticalLayout_1014.addWidget(self.lebel_614)

                        self.widget_414 = QtWidgets.QWidget(self.groupBox_5)
                        self.widget_414.setMinimumSize(QtCore.QSize(0, 101))
                        self.widget_414.setMaximumSize(QtCore.QSize(16777215, 101))
                        self.widget_414.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.widget_414.setObjectName("widget_414")

                        self.verticalLayout_1114 = QtWidgets.QVBoxLayout(self.widget_414)
                        self.verticalLayout_1114.setSpacing(12)
                        self.verticalLayout_1114.setObjectName("verticalLayout_1114")

                        self.label_1114 = QtWidgets.QLabel(self.widget_414)
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.label_1114.setFont(QFont('raleway',12))
                        self.label_1114.setObjectName("label_1114")
                        self.label_1114.setText(self.sendGameData[i]['filename'])
                        self.verticalLayout_1114.addWidget(self.label_1114)

                        self.pushButton_414 = QtWidgets.QPushButton(self.widget_414)
                        self.pushButton_414.setMaximumSize(QtCore.QSize(75, 16777215))
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.pushButton_414.setFont(QFont('raleway',11,100))
                        self.pushButton_414.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
                        "color: rgb(255, 255, 255);\n"
                        "border-radius : 5;\n"
                        "padding-top: 8px; padding-bottom: 8px;")
                        self.pushButton_414.setObjectName("pushButton_414")

                        self.pushButton_414.setText("Play")

                        self.pushButton_414.clicked.connect(lambda state, path=self.sendGameData[i]['filepath'],id =self.sendGameData[i]['id']: self.Not_start_process(path,id))

                        self.verticalLayout_1114.addWidget(self.pushButton_414)
                        self.verticalLayout_1014.addWidget(self.widget_414)


                        self.gridLayout_8.addWidget(self.groupBox_5, row4, col4, 1, 1)
                        self.scrollArea_4.setWidget(self.scrollAreaWidgetContents_4)
                        self.horizontalLayout_28.addWidget(self.scrollArea_4,0, 0, 1, 1)
                        self.verticalLayout_3366.addWidget(self.widget_3)

                        col4 += 1
                        if col4 == 5:  # Reset column count and move to the next row after every third executable
                                col4 = 0
                                row4 += 1

        self.fourthSectionTabWidgetInsideMainStackWidget.addTab(self.tab_4, "")

# ----------------------------------------------------------------------------------------------------
# -----------------------strategy category-----------------------------------------------------------------------------

        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")

        self.verticalLayout_37 = QtWidgets.QVBoxLayout(self.tab_5)
        self.verticalLayout_37.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_37.setSpacing(0)
        self.verticalLayout_37.setObjectName("verticalLayout_37")

        self.widget_4 = QtWidgets.QWidget(self.tab_5)
        self.widget_4.setObjectName("widget_4")

        self.horizontalLayout_29 = QtWidgets.QGridLayout(self.widget_4)
        self.horizontalLayout_29.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_29.setSpacing(0)
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")

        self.scrollArea_5 = QtWidgets.QScrollArea(self.widget_4)
        self.scrollArea_5.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea_5.setWidgetResizable(True)
        self.scrollArea_5.setObjectName("scrollArea_5")

        self.scrollAreaWidgetContents_5 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_5.setGeometry(QtCore.QRect(0, 0, 1530, 514))
        self.scrollAreaWidgetContents_5.setObjectName("scrollAreaWidgetContents_5")

        self.gridLayout_9 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents_5)
        self.gridLayout_9.setObjectName("gridLayout_9")


        row5 =0 
        col5 = 0
        for i in range(len(self.sendGameData)):
                if self.sendGameData[i]['category_id']==4:
                        self.groupBox_7 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_5)
                        self.groupBox_7.setObjectName("groupBox_7")
                        self.groupBox_7.setMinimumSize(QtCore.QSize(250, 0))
                        self.groupBox_7.setMaximumSize(QtCore.QSize(250, 272))
                        self.groupBox_7.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.groupBox_7.setTitle("")

                        self.verticalLayout_1015 = QtWidgets.QVBoxLayout(self.groupBox_7)
                        self.verticalLayout_1015.setContentsMargins(0, 0, 0, 0)
                        self.verticalLayout_1015.setSpacing(0)
                        self.verticalLayout_1015.setObjectName("verticalLayout_1015")

                        self.lebel_615 = QtWidgets.QLabel(self.groupBox_7)
                        self.lebel_615.setMinimumSize(QtCore.QSize(0, 173))
                        self.lebel_615.setMaximumSize(QtCore.QSize(16777215, 173))
                        self.lebel_615.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.lebel_615.setText("")

                        # ------------------------strategy category-------------------------------------------------------
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        get_pic=self.sendGameData[i]['imagepath']
                        # print("getpic",get_pic)
                        try:
                                response = requests.get(f'https://server.zeusgaming.gg/gamefiles/{get_pic}',headers=headers)

                                if response.status_code == 200:
                                        # print(">>>>>>>>>>>>>>>>>>>>>>>>>innnnnnnnnnnnnnnnnnnnnnnnn")
                                # Load the image data into QPixmap
                                        pixmap = QPixmap()
                                        pixmap.loadFromData(response.content)
                                        self.lebel_615.setPixmap(pixmap)
                                # self.lebel_613.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))

                                else:
                                        print("hello else get strategy category")
                        except Exception as e:
                               print(">>>>>>>>",e)
                        # -------------------------------------------------------------------------------

                        # self.lebel_615.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))
                        self.lebel_615.setScaledContents(True)
                        self.lebel_615.setObjectName("lebel_615")

                        self.verticalLayout_1015.addWidget(self.lebel_615)

                        self.widget_415 = QtWidgets.QWidget(self.groupBox_7)
                        self.widget_415.setMinimumSize(QtCore.QSize(0, 101))
                        self.widget_415.setMaximumSize(QtCore.QSize(16777215, 101))
                        self.widget_415.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.widget_415.setObjectName("widget_415")

                        self.verticalLayout_1115 = QtWidgets.QVBoxLayout(self.widget_415)
                        self.verticalLayout_1115.setSpacing(12)
                        self.verticalLayout_1115.setObjectName("verticalLayout_1115")

                        self.label_1115 = QtWidgets.QLabel(self.widget_415)
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.label_1115.setFont(QFont('raleway',12))
                        self.label_1115.setObjectName("label_1115")
                        self.label_1115.setText(self.sendGameData[i]['filename'])
                        self.verticalLayout_1115.addWidget(self.label_1115)

                        self.pushButton_415 = QtWidgets.QPushButton(self.widget_415)
                        self.pushButton_415.setMaximumSize(QtCore.QSize(75, 16777215))
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.pushButton_415.setFont(QFont('raleway',11,100))
                        self.pushButton_415.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
                        "color: rgb(255, 255, 255);\n"
                        "border-radius : 5;\n"
                        "padding-top: 8px; padding-bottom: 8px;")
                        self.pushButton_415.setObjectName("pushButton_415")

                        self.pushButton_415.setText("Play")

                        self.pushButton_415.clicked.connect(lambda state, path=self.sendGameData[i]['filepath'],id =self.sendGameData[i]['id']: self.Not_start_process(path,id))

                        self.verticalLayout_1115.addWidget(self.pushButton_415)
                        self.verticalLayout_1015.addWidget(self.widget_415)

                        self.gridLayout_9.addWidget(self.groupBox_7, row5, col5, 1, 1)
                        self.scrollArea_5.setWidget(self.scrollAreaWidgetContents_5)
                        self.horizontalLayout_29.addWidget(self.scrollArea_5, 0, 0, 1, 1)
                        self.verticalLayout_37.addWidget(self.widget_4)

                        col5 += 1
                        if col5 == 5:  # Reset column count and move to the next row after every third executable
                                col5 = 0
                                row5 += 1


        self.fourthSectionTabWidgetInsideMainStackWidget.addTab(self.tab_5, "")

# ----------------------------------------------------------------------------------------------------
# ------------------------------ Story based category ----------------------------------------------------------------------

        self.tab_6 = QtWidgets.QWidget()
        self.tab_6.setObjectName("tab_6")

        self.verticalLayout_38 = QtWidgets.QVBoxLayout(self.tab_6)
        self.verticalLayout_38.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_38.setSpacing(0)
        self.verticalLayout_38.setObjectName("verticalLayout_38")

        self.widget_5 = QtWidgets.QWidget(self.tab_6)
        self.widget_5.setObjectName("widget_5")

        self.horizontalLayout_30 = QtWidgets.QGridLayout(self.widget_5)
        self.horizontalLayout_30.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_30.setSpacing(0)
        self.horizontalLayout_30.setObjectName("horizontalLayout_30")
        
        self.scrollArea_6 = QtWidgets.QScrollArea(self.widget_5)
        self.scrollArea_6.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea_6.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea_6.setWidgetResizable(True)
        self.scrollArea_6.setObjectName("scrollArea_6")

        self.scrollAreaWidgetContents_6 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_6.setGeometry(QtCore.QRect(0, 0, 1530, 514))
        self.scrollAreaWidgetContents_6.setObjectName("scrollAreaWidgetContents_6")

        self.gridLayout_10 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents_6)
        self.gridLayout_10.setObjectName("gridLayout_10")


        row6 =0 
        col6 = 0
        for i in range(len(self.sendGameData)):
                if self.sendGameData[i]['category_id']==5:
                        self.groupBox_8 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_6)
                        self.groupBox_8.setObjectName("groupBox_8")
                        self.groupBox_8.setMinimumSize(QtCore.QSize(250, 0))
                        self.groupBox_8.setMaximumSize(QtCore.QSize(250, 272))
                        self.groupBox_8.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.groupBox_8.setTitle("")

                        self.verticalLayout_1016 = QtWidgets.QVBoxLayout(self.groupBox_8)
                        self.verticalLayout_1016.setContentsMargins(0, 0, 0, 0)
                        self.verticalLayout_1016.setSpacing(0)
                        self.verticalLayout_1016.setObjectName("verticalLayout_1016")

                        self.lebel_616 = QtWidgets.QLabel(self.groupBox_8)
                        self.lebel_616.setMinimumSize(QtCore.QSize(0, 173))
                        self.lebel_616.setMaximumSize(QtCore.QSize(16777215, 173))
                        self.lebel_616.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.lebel_616.setText("")
                        # ---------------------------Story based----------------------------------------------------
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        get_pic=self.sendGameData[i]['imagepath']
                        # print("getpic",get_pic)
                        try:
                                response = requests.get(f'https://server.zeusgaming.gg/gamefiles/{get_pic}',headers=headers)

                                if response.status_code == 200:
                                        # print(">>>>>>>>>>>>>>>>>>>>>>>>>innnnnnnnnnnnnnnnnnnnnnnnn")
                                # Load the image data into QPixmap
                                        pixmap = QPixmap()
                                        pixmap.loadFromData(response.content)
                                        self.lebel_616.setPixmap(pixmap)
                                # self.lebel_613.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))

                                else:
                                        print("hello else get Story based category")
                        except Exception as e:
                               print(">>>>>>>>",e)
                        # -------------------------------------------------------------------------------
                        # self.lebel_616.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))
                        self.lebel_616.setScaledContents(True)
                        self.lebel_616.setObjectName("lebel_616")

                        self.verticalLayout_1016.addWidget(self.lebel_616)

                        self.widget_416 = QtWidgets.QWidget(self.groupBox_8)
                        self.widget_416.setMinimumSize(QtCore.QSize(0, 101))
                        self.widget_416.setMaximumSize(QtCore.QSize(16777215, 101))
                        self.widget_416.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.widget_416.setObjectName("widget_416")

                        self.verticalLayout_1116 = QtWidgets.QVBoxLayout(self.widget_416)
                        self.verticalLayout_1116.setSpacing(12)
                        self.verticalLayout_1116.setObjectName("verticalLayout_1116")

                        self.label_1116 = QtWidgets.QLabel(self.widget_416)
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.label_1116.setFont(QFont('raleway',12))
                        self.label_1116.setObjectName("label_1116")
                        self.label_1116.setText(self.sendGameData[i]['filename'])
                        self.verticalLayout_1116.addWidget(self.label_1116)

                        self.pushButton_416 = QtWidgets.QPushButton(self.widget_416)
                        self.pushButton_416.setMaximumSize(QtCore.QSize(75, 16777215))
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.pushButton_416.setFont(QFont('raleway',11,100))
                        self.pushButton_416.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
                        "color: rgb(255, 255, 255);\n"
                        "border-radius : 5;\n"
                        "padding-top: 8px; padding-bottom: 8px;")
                        self.pushButton_416.setObjectName("pushButton_416")

                        self.pushButton_416.setText("Play")

                        self.pushButton_416.clicked.connect(lambda state, path=self.sendGameData[i]['filepath'],id =self.sendGameData[i]['id']: self.Not_start_process(path,id))


                        self.verticalLayout_1116.addWidget(self.pushButton_416)
                        self.verticalLayout_1016.addWidget(self.widget_416)

                        self.gridLayout_10.addWidget(self.groupBox_8, row6, col6, 1, 1)
                        self.scrollArea_6.setWidget(self.scrollAreaWidgetContents_6)
                        self.horizontalLayout_30.addWidget(self.scrollArea_6, 0, 0, 1, 1)
                        self.verticalLayout_38.addWidget(self.widget_5)

                        col6 += 1
                        if col6 == 5:  # Reset column count and move to the next row after every third executable
                                col6 = 0
                                row6 += 1


        self.fourthSectionTabWidgetInsideMainStackWidget.addTab(self.tab_6, "")

# ----------------------------------------------------------------------------------------------------
# ----------------------------------multiplayer category------------------------------------------------------------------

        self.tab_7 = QtWidgets.QWidget()
        self.tab_7.setObjectName("tab_7")

        self.verticalLayout_39 = QtWidgets.QVBoxLayout(self.tab_7)
        self.verticalLayout_39.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_39.setSpacing(0)
        self.verticalLayout_39.setObjectName("verticalLayout_39")

        self.widget_6 = QtWidgets.QWidget(self.tab_7)
        self.widget_6.setObjectName("widget_6")

        self.horizontalLayout_31 = QtWidgets.QGridLayout(self.widget_6)
        self.horizontalLayout_31.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_31.setSpacing(0)
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")

        self.scrollArea_7 = QtWidgets.QScrollArea(self.widget_6)
        self.scrollArea_7.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea_7.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea_7.setWidgetResizable(True)
        self.scrollArea_7.setObjectName("scrollArea_7")

        self.scrollAreaWidgetContents_7 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_7.setGeometry(QtCore.QRect(0, 0, 1530, 514))
        self.scrollAreaWidgetContents_7.setObjectName("scrollAreaWidgetContents_7")

        self.gridLayout_11 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents_7)
        self.gridLayout_11.setObjectName("gridLayout_11")


        row7 =0 
        col7 = 0
        for i in range(len(self.sendGameData)):
                if self.sendGameData[i]['category_id']==6:

                        self.groupBox_9 = QtWidgets.QGroupBox(self.scrollAreaWidgetContents_7)
                        self.groupBox_9.setObjectName("groupBox_9")
                        self.groupBox_9.setMinimumSize(QtCore.QSize(250, 0))
                        self.groupBox_9.setMaximumSize(QtCore.QSize(250, 272))
                        self.groupBox_9.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.groupBox_9.setTitle("")

                        self.verticalLayout_1017 = QtWidgets.QVBoxLayout(self.groupBox_9)
                        self.verticalLayout_1017.setContentsMargins(0, 0, 0, 0)
                        self.verticalLayout_1017.setSpacing(0)
                        self.verticalLayout_1017.setObjectName("verticalLayout_1017")

                        self.lebel_617 = QtWidgets.QLabel(self.groupBox_9)
                        self.lebel_617.setMinimumSize(QtCore.QSize(0, 173))
                        self.lebel_617.setMaximumSize(QtCore.QSize(16777215, 173))
                        self.lebel_617.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.lebel_617.setText("")
                        # -------------------------------multiplayer------------------------------------------------
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        get_pic=self.sendGameData[i]['imagepath']
                        # print("getpic",get_pic)
                        try:
                                response = requests.get(f'https://server.zeusgaming.gg/gamefiles/{get_pic}',headers=headers)

                                if response.status_code == 200:
                                        # print(">>>>>>>>>>>>>>>>>>>>>>>>>innnnnnnnnnnnnnnnnnnnnnnnn")
                                # Load the image data into QPixmap
                                        pixmap = QPixmap()
                                        pixmap.loadFromData(response.content)
                                        self.lebel_617.setPixmap(pixmap)
                                # self.lebel_613.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))

                                else:
                                        print("hello else get multiplayer category")
                        except Exception as e:
                               print(">>>>>>>>",e)
                        # -------------------------------------------------------------------------------
                        # self.lebel_617.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))
                        self.lebel_617.setScaledContents(True)
                        self.lebel_617.setObjectName("lebel_617")

                        self.verticalLayout_1017.addWidget(self.lebel_617)

                        self.widget_417 = QtWidgets.QWidget(self.groupBox_9)
                        self.widget_417.setMinimumSize(QtCore.QSize(0, 101))
                        self.widget_417.setMaximumSize(QtCore.QSize(16777215, 101))
                        self.widget_417.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.widget_417.setObjectName("widget_417")

                        self.verticalLayout_1117 = QtWidgets.QVBoxLayout(self.widget_417)
                        self.verticalLayout_1117.setSpacing(12)
                        self.verticalLayout_1117.setObjectName("verticalLayout_1117")

                        self.label_1117 = QtWidgets.QLabel(self.widget_417)
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.label_1117.setFont(QFont('raleway',12))
                        self.label_1117.setObjectName("label_1117")
                        self.label_1117.setText(self.sendGameData[i]['filename'])
                        self.verticalLayout_1117.addWidget(self.label_1117)

                        self.pushButton_417 = QtWidgets.QPushButton(self.widget_417)
                        self.pushButton_417.setMaximumSize(QtCore.QSize(75, 16777215))
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.pushButton_417.setFont(QFont('raleway',11,100))
                        self.pushButton_417.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
                        "color: rgb(255, 255, 255);\n"
                        "border-radius : 5;\n"
                        "padding-top: 8px; padding-bottom: 8px;")
                        self.pushButton_417.setObjectName("pushButton_417")

                        self.pushButton_417.setText("Play")

                        self.pushButton_417.clicked.connect(lambda state, path=self.sendGameData[i]['filepath'],id =self.sendGameData[i]['id']: self.Not_start_process(path,id))


                        self.verticalLayout_1117.addWidget(self.pushButton_417)
                        self.verticalLayout_1017.addWidget(self.widget_417)

                        self.gridLayout_11.addWidget(self.groupBox_9, row7, col7, 1, 1)
                        self.scrollArea_7.setWidget(self.scrollAreaWidgetContents_7)
                        self.horizontalLayout_31.addWidget(self.scrollArea_7, 0, 0, 1, 1)
                        self.verticalLayout_39.addWidget(self.widget_6)

                        col7 += 1
                        if col7 == 5:  # Reset column count and move to the next row after every third executable
                                col7 = 0
                                row7 += 1


        self.fourthSectionTabWidgetInsideMainStackWidget.addTab(self.tab_7, "")

# ----------------------------------------------------------------------------------------------------
# -------------------------------single player category---------------------------------------------------------------------

        self.tab_15 = QtWidgets.QWidget()
        self.tab_15.setFocusPolicy(QtCore.Qt.NoFocus)
        self.tab_15.setObjectName("tab_15")
        
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.tab_15)
        self.verticalLayout_19.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_19.setSpacing(0)
        self.verticalLayout_19.setObjectName("verticalLayout_19")

        self.widget_16 = QtWidgets.QWidget(self.tab_15)
        self.widget_16.setObjectName("widget_16")

        self.horizontalLayout_25 = QtWidgets.QGridLayout(self.widget_16)
        self.horizontalLayout_25.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_25.setSpacing(0)
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")

        self.scrollArea = QtWidgets.QScrollArea(self.widget_16)
        self.scrollArea.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.scrollArea.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")

        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1530, 514))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")

        self.gridLayout_4 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout_4.setObjectName("gridLayout_4")


        row15 =0 
        col15 = 0
        for i in range(len(self.sendGameData)):
                if self.sendGameData[i]['category_id']==7:
                        self.groupBox = QtWidgets.QGroupBox(self.scrollAreaWidgetContents)
                        self.groupBox.setObjectName("groupBox")
                        self.groupBox.setMinimumSize(QtCore.QSize(250, 0))
                        self.groupBox.setMaximumSize(QtCore.QSize(250, 272))
                        self.groupBox.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.groupBox.setTitle("")

                        self.verticalLayout_10115 = QtWidgets.QVBoxLayout(self.groupBox)
                        self.verticalLayout_10115.setContentsMargins(0, 0, 0, 0)
                        self.verticalLayout_10115.setSpacing(0)
                        self.verticalLayout_10115.setObjectName("verticalLayout_10115")

                        self.lebel_6115 = QtWidgets.QLabel(self.groupBox)
                        self.lebel_6115.setMinimumSize(QtCore.QSize(0, 173))
                        self.lebel_6115.setMaximumSize(QtCore.QSize(16777215, 173))
                        self.lebel_6115.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.lebel_6115.setText("")
                        # ----------------------single player---------------------------------------------------------
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        get_pic=self.sendGameData[i]['imagepath']
                        # print("getpic",get_pic)
                        try:
                                response = requests.get(f'https://server.zeusgaming.gg/gamefiles/{get_pic}',headers=headers)

                                if response.status_code == 200:
                                        # print(">>>>>>>>>>>>>>>>>>>>>>>>>innnnnnnnnnnnnnnnnnnnnnnnn")
                                # Load the image data into QPixmap
                                        pixmap = QPixmap()
                                        pixmap.loadFromData(response.content)
                                        self.lebel_6115.setPixmap(pixmap)
                                # self.lebel_613.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))

                                else:
                                        print("hello else get single player category")
                        except Exception as e:
                               print(">>>>>>>>",e)
                        # -------------------------------------------------------------------------------
                        # self.lebel_6115.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(self.sendGameData[i]['filename'])))
                        self.lebel_6115.setScaledContents(True)
                        self.lebel_6115.setObjectName("lebel_6115")

                        self.verticalLayout_10115.addWidget(self.lebel_6115)

                        self.widget_4115 = QtWidgets.QWidget(self.groupBox)
                        self.widget_4115.setMinimumSize(QtCore.QSize(0, 101))
                        self.widget_4115.setMaximumSize(QtCore.QSize(16777215, 101))
                        self.widget_4115.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.widget_4115.setObjectName("widget_4115")

                        self.verticalLayout_11115 = QtWidgets.QVBoxLayout(self.widget_4115)
                        self.verticalLayout_11115.setSpacing(12)
                        self.verticalLayout_11115.setObjectName("verticalLayout_11115")

                        self.label_11115 = QtWidgets.QLabel(self.widget_4115)
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.label_11115.setFont(QFont('raleway',12))
                        self.label_11115.setObjectName("label_11115")
                        self.label_11115.setText(self.sendGameData[i]['filename'])
                        self.verticalLayout_11115.addWidget(self.label_11115)

                        self.pushButton_4115 = QtWidgets.QPushButton(self.widget_4115)
                        self.pushButton_4115.setMaximumSize(QtCore.QSize(75, 16777215))
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.pushButton_4115.setFont(QFont('raleway',11,100))
                        self.pushButton_4115.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
                        "color: rgb(255, 255, 255);\n"
                        "border-radius : 5;\n"
                        "padding-top: 8px; padding-bottom: 8px;")
                        self.pushButton_4115.setObjectName("pushButton_4115")

                        self.pushButton_4115.setText("Play")

                        self.pushButton_4115.clicked.connect(lambda state, path=self.sendGameData[i]['filepath'],id =self.sendGameData[i]['id']: self.Not_start_process(path,id))


                        self.verticalLayout_11115.addWidget(self.pushButton_4115)
                        self.verticalLayout_10115.addWidget(self.widget_4115)

                        self.gridLayout_4.addWidget(self.groupBox, row15, col15, 1, 1)
                        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
                        self.horizontalLayout_25.addWidget(self.scrollArea, 0, 0, 1, 1)
                        self.verticalLayout_19.addWidget(self.widget_16)

                        col15 += 1
                        if col15 == 5:  # Reset column count and move to the next row after every third executable
                                col15 = 0
                                row15 += 1


        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.tab_15)
        self.fourthSectionTabWidgetInsideMainStackWidget.addTab(self.tab_15, "")
# ----------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------

        # self.verticalLayout_19.setObjectName("verticalLayout_19")
        # self.widget_16 = QtWidgets.QWidget(self.tab_15)
        # self.widget_16.setObjectName("widget_16")
        # self.verticalLayout_19.addWidget(self.widget_16)
        self.verticalLayout_16.addWidget(self.fourthSectionTabWidgetInsideMainStackWidget)
        self.insideMainStackWidget.addWidget(self.gameLibInsideMainStackWidget)
# -------------------------------------------------------------------------------------------------------------------------
        self.headingLabelCategoryInsideMainStackWidget.setText( "Categories")

        # self.categoriesGameCardInsideMainStackWidget.setTitle( "GroupBox")
        
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabText(self.fourthSectionTabWidgetInsideMainStackWidget.indexOf(self.tab),  "All")
        # self.groupBox_4.setTitle( "GroupBox")
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabText(self.fourthSectionTabWidgetInsideMainStackWidget.indexOf(self.tab_3),  "First Person Shooter")
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabText(self.fourthSectionTabWidgetInsideMainStackWidget.indexOf(self.tab_2),  "Sports && Racing")
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabText(self.fourthSectionTabWidgetInsideMainStackWidget.indexOf(self.tab_4),  "Battle Royale")
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabText(self.fourthSectionTabWidgetInsideMainStackWidget.indexOf(self.tab_5),  "Strategy")
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabText(self.fourthSectionTabWidgetInsideMainStackWidget.indexOf(self.tab_6),  "Story based")
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabText(self.fourthSectionTabWidgetInsideMainStackWidget.indexOf(self.tab_7),  "Multi Player")
        self.fourthSectionTabWidgetInsideMainStackWidget.setTabText(self.fourthSectionTabWidgetInsideMainStackWidget.indexOf(self.tab_15),  "Single Player")

# -------------------------------------------------------------------------------------------------------------------------
        self.otherAppsInsideMainStackWidget = QtWidgets.QWidget()
        self.otherAppsInsideMainStackWidget.setObjectName("otherAppsInsideMainStackWidget")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.otherAppsInsideMainStackWidget)
        self.horizontalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_14.setSpacing(20)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.widgetInsideWidgetOtherAppsInsideMainStackWidget = QtWidgets.QWidget(self.otherAppsInsideMainStackWidget)
        self.widgetInsideWidgetOtherAppsInsideMainStackWidget.setObjectName("widgetInsideWidgetOtherAppsInsideMainStackWidget")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.widgetInsideWidgetOtherAppsInsideMainStackWidget)
        self.verticalLayout_22.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_22.setSpacing(10)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.sectionOneOtherAppsInsideMainStackWidget = QtWidgets.QFrame(self.widgetInsideWidgetOtherAppsInsideMainStackWidget)
        self.sectionOneOtherAppsInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 65))
        self.sectionOneOtherAppsInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 65))
        self.sectionOneOtherAppsInsideMainStackWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.sectionOneOtherAppsInsideMainStackWidget.setFrameShadow(QtWidgets.QFrame.Raised)
        self.sectionOneOtherAppsInsideMainStackWidget.setObjectName("sectionOneOtherAppsInsideMainStackWidget")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.sectionOneOtherAppsInsideMainStackWidget)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.otherAppsLabelInsideMainStackWidget = QtWidgets.QLabel(self.sectionOneOtherAppsInsideMainStackWidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(15)
        self.otherAppsLabelInsideMainStackWidget.setFont(QFont('Artemus',25))
        self.otherAppsLabelInsideMainStackWidget.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.otherAppsLabelInsideMainStackWidget.setObjectName("otherAppsLabelInsideMainStackWidget")
        self.horizontalLayout_15.addWidget(self.otherAppsLabelInsideMainStackWidget)
        self.verticalLayout_22.addWidget(self.sectionOneOtherAppsInsideMainStackWidget)
        self.sectionTwoOtherAppsInsideMainStackWidget = QtWidgets.QFrame(self.widgetInsideWidgetOtherAppsInsideMainStackWidget)
        self.sectionTwoOtherAppsInsideMainStackWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.sectionTwoOtherAppsInsideMainStackWidget.setFrameShadow(QtWidgets.QFrame.Raised)
        self.sectionTwoOtherAppsInsideMainStackWidget.setObjectName("sectionTwoOtherAppsInsideMainStackWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.sectionTwoOtherAppsInsideMainStackWidget)
        self.gridLayout.setHorizontalSpacing(10)
        self.gridLayout.setObjectName("gridLayout")
        # ---------------------------------------------------------------------------------
        # ---------------------------------------------------------------------------------

#         self.groupBox_6 = QtWidgets.QGroupBox(self.sectionTwoOtherAppsInsideMainStackWidget)
#         self.groupBox_6.setMinimumSize(QtCore.QSize(225, 275))
#         self.groupBox_6.setMaximumSize(QtCore.QSize(225, 275))
#         self.groupBox_6.setStyleSheet("#groupBox_6 {\n"
# "background-color: white;\n"
# "}")
#         self.groupBox_6.setTitle("")
#         self.groupBox_6.setAlignment(QtCore.Qt.AlignCenter)
#         self.groupBox_6.setObjectName("groupBox_6")
#         self.verticalLayout_24 = QtWidgets.QVBoxLayout(self.groupBox_6)
#         self.verticalLayout_24.setContentsMargins(0, 0, 0, 0)
#         self.verticalLayout_24.setSpacing(0)
#         self.verticalLayout_24.setObjectName("verticalLayout_24")
#         self.otherAppsCardImageInsideMainStackWidget_2 = QtWidgets.QLabel(self.groupBox_6)
#         self.otherAppsCardImageInsideMainStackWidget_2.setText("")
#         self.otherAppsCardImageInsideMainStackWidget_2.setPixmap(QtGui.QPixmap("../Other Projects/pythonSoftwareExp/transparentBackground/profileImage.png"))
#         self.otherAppsCardImageInsideMainStackWidget_2.setScaledContents(True)
#         self.otherAppsCardImageInsideMainStackWidget_2.setAlignment(QtCore.Qt.AlignCenter)
#         self.otherAppsCardImageInsideMainStackWidget_2.setObjectName("otherAppsCardImageInsideMainStackWidget_2")
#         self.verticalLayout_24.addWidget(self.otherAppsCardImageInsideMainStackWidget_2)
#         self.otherAppsCardButtonInsideMainStackWidget_2 = QtWidgets.QPushButton(self.groupBox_6)
#         self.otherAppsCardButtonInsideMainStackWidget_2.setMinimumSize(QtCore.QSize(0, 100))
#         self.otherAppsCardButtonInsideMainStackWidget_2.setMaximumSize(QtCore.QSize(16777215, 100))
#         font = QtGui.QFont()
#         font.setFamily("Cascadia Code")
#         font.setPointSize(20)
#         self.otherAppsCardButtonInsideMainStackWidget_2.setFont(QFont('raleway',12))
#         self.otherAppsCardButtonInsideMainStackWidget_2.setStyleSheet("#pushButton_5 {\n"
# "    background-color: transparent;\n"
# "    border: none;\n"
# "}")
#         self.otherAppsCardButtonInsideMainStackWidget_2.setObjectName("otherAppsCardButtonInsideMainStackWidget_2")
#         self.verticalLayout_24.addWidget(self.otherAppsCardButtonInsideMainStackWidget_2)
#         self.gridLayout.addWidget(self.groupBox_6, 0, 1, 1, 1)

        self.verticalLayout_22.addWidget(self.sectionTwoOtherAppsInsideMainStackWidget, 0, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.horizontalLayout_14.addWidget(self.widgetInsideWidgetOtherAppsInsideMainStackWidget)
        self.insideMainStackWidget.addWidget(self.otherAppsInsideMainStackWidget)
        self.orderFoodPageInsideMainStackWidget = QtWidgets.QWidget()
        self.orderFoodPageInsideMainStackWidget.setObjectName("orderFoodPageInsideMainStackWidget")
        
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout(self.orderFoodPageInsideMainStackWidget)
        self.horizontalLayout_25.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_25.setSpacing(0)
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.orderFoodMainWidgetInsideMainStackWidget = QtWidgets.QWidget(self.orderFoodPageInsideMainStackWidget)
        self.orderFoodMainWidgetInsideMainStackWidget.setObjectName("orderFoodMainWidgetInsideMainStackWidget")

        # web_view_food = QWebEngineView()
        # web_view_food.setUrl(QUrl("https://www.zomato.com/vadodara"))  # Corrected line
        # self.horizontalLayout_25.addWidget(web_view_food)

        self.insideMainStackWidget.addWidget(self.orderFoodPageInsideMainStackWidget)
        # -----------------
        self.walletPageInsideMainStackWidget = QtWidgets.QWidget()
        self.walletPageInsideMainStackWidget.setObjectName("walletPageInsideMainStackWidget")
        # ----------------------------------------------------------------------
        self.verticalLayout_36 = QtWidgets.QVBoxLayout(self.walletPageInsideMainStackWidget)
        self.verticalLayout_36.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_36.setSpacing(0)
        self.verticalLayout_36.setObjectName("verticalLayout_36")
        self.walletPageMainWidgetInsideMainStackWidget = QtWidgets.QWidget(self.walletPageInsideMainStackWidget)
        self.walletPageMainWidgetInsideMainStackWidget.setObjectName("walletPageMainWidgetInsideMainStackWidget")

        
        # web_view_wallet = QWebEngineView()
        # web_view_wallet.setUrl(QUrl("https://www.zeusgaming.gg/software_wallet/{0}".format(login_user_id)))  # Corrected line
        # self.verticalLayout_36.addWidget(web_view_wallet)

        # self.verticalLayout_36.addWidget(self.walletPageMainWidgetInsideMainStackWidget)
        self.insideMainStackWidget.addWidget(self.walletPageInsideMainStackWidget)
        # ----------------------------------------------------------------------
        
        # self.insideMainStackWidget.addWidget(self.walletPageInsideMainStackWidget)
        self.profilePageInsideMainStackWidget = QtWidgets.QWidget()
        self.profilePageInsideMainStackWidget.setObjectName("profilePageInsideMainStackWidget")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.profilePageInsideMainStackWidget)
        self.verticalLayout_8.setContentsMargins(-1, -1, 25, -1)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.sectionOneProfileInsideMainStackWidget = QtWidgets.QWidget(self.profilePageInsideMainStackWidget)
        self.sectionOneProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 100))
        self.sectionOneProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 100))
        self.sectionOneProfileInsideMainStackWidget.setObjectName("sectionOneProfileInsideMainStackWidget")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.sectionOneProfileInsideMainStackWidget)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.profilePhotoProfileInsideMainStackWidget = QtWidgets.QLabel(self.sectionOneProfileInsideMainStackWidget)
        self.profilePhotoProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(100, 100))
        self.profilePhotoProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(100, 100))
        # self.profilePhotoProfileInsideMainStackWidget.setStyleSheet("border-radius :50px;\n")
        self.profilePhotoProfileInsideMainStackWidget.setText("")

       

        # self.profilePhotoProfileInsideMainStackWidget.setPixmap(QtGui.QPixmap("../Other Projects/pythonSoftwareExp/transparentBackground/profileImage.png"))
        self.profilePhotoProfileInsideMainStackWidget.setScaledContents(False)
        self.profilePhotoProfileInsideMainStackWidget.setAlignment(QtCore.Qt.AlignCenter)
        self.profilePhotoProfileInsideMainStackWidget.setWordWrap(False)
        self.profilePhotoProfileInsideMainStackWidget.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.profilePhotoProfileInsideMainStackWidget.setObjectName("profilePhotoProfileInsideMainStackWidget")
        self.horizontalLayout_4.addWidget(self.profilePhotoProfileInsideMainStackWidget)
        self.nameElementProfileInsideMainStackWidget = QtWidgets.QWidget(self.sectionOneProfileInsideMainStackWidget)
        self.nameElementProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(200, 0))
        self.nameElementProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(200, 16777215))
        self.nameElementProfileInsideMainStackWidget.setObjectName("nameElementProfileInsideMainStackWidget")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.nameElementProfileInsideMainStackWidget)
        self.verticalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_11.setSpacing(0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.nameLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.nameElementProfileInsideMainStackWidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        self.nameLabelProfileInsideMainStackWidget.setFont(QFont('raleway',12))
        self.nameLabelProfileInsideMainStackWidget.setAlignment(QtCore.Qt.AlignCenter)
        self.nameLabelProfileInsideMainStackWidget.setObjectName("nameLabelProfileInsideMainStackWidget")
        self.verticalLayout_11.addWidget(self.nameLabelProfileInsideMainStackWidget)
        self.nameOfUserLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.nameElementProfileInsideMainStackWidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(13)
        font.setBold(True)
        self.nameOfUserLabelProfileInsideMainStackWidget.setFont(QFont('raleway',14,100))
        self.nameOfUserLabelProfileInsideMainStackWidget.setAlignment(QtCore.Qt.AlignCenter)
        self.nameOfUserLabelProfileInsideMainStackWidget.setObjectName("nameOfUserLabelProfileInsideMainStackWidget")
        self.verticalLayout_11.addWidget(self.nameOfUserLabelProfileInsideMainStackWidget, 0, QtCore.Qt.AlignTop)
        self.horizontalLayout_4.addWidget(self.nameElementProfileInsideMainStackWidget)
        self.userNameElementProfileInsideMainStackWidget = QtWidgets.QWidget(self.sectionOneProfileInsideMainStackWidget)
        self.userNameElementProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(200, 0))
        self.userNameElementProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(200, 16777215))
        self.userNameElementProfileInsideMainStackWidget.setObjectName("userNameElementProfileInsideMainStackWidget")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.userNameElementProfileInsideMainStackWidget)
        self.verticalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_13.setSpacing(0)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.usernameLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.userNameElementProfileInsideMainStackWidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        self.usernameLabelProfileInsideMainStackWidget.setFont(QFont('raleway',12))
        self.usernameLabelProfileInsideMainStackWidget.setAlignment(QtCore.Qt.AlignCenter)
        self.usernameLabelProfileInsideMainStackWidget.setObjectName("usernameLabelProfileInsideMainStackWidget")
        self.verticalLayout_13.addWidget(self.usernameLabelProfileInsideMainStackWidget)
        self.usernameOfUserLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.userNameElementProfileInsideMainStackWidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(13)
        font.setBold(True)
        self.usernameOfUserLabelProfileInsideMainStackWidget.setFont(QFont('raleway',14,100))
        self.usernameOfUserLabelProfileInsideMainStackWidget.setAlignment(QtCore.Qt.AlignCenter)
        self.usernameOfUserLabelProfileInsideMainStackWidget.setObjectName("usernameOfUserLabelProfileInsideMainStackWidget")
        self.verticalLayout_13.addWidget(self.usernameOfUserLabelProfileInsideMainStackWidget, 0, QtCore.Qt.AlignTop)
        self.horizontalLayout_4.addWidget(self.userNameElementProfileInsideMainStackWidget)
        self.emailElementProfileInsideMainStackWidget = QtWidgets.QWidget(self.sectionOneProfileInsideMainStackWidget)
        self.emailElementProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(350, 0))
        self.emailElementProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(350, 16777215))
        self.emailElementProfileInsideMainStackWidget.setObjectName("emailElementProfileInsideMainStackWidget")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.emailElementProfileInsideMainStackWidget)
        self.verticalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_14.setSpacing(0)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.emailLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.emailElementProfileInsideMainStackWidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        self.emailLabelProfileInsideMainStackWidget.setFont(QFont('raleway',12))
        self.emailLabelProfileInsideMainStackWidget.setAlignment(QtCore.Qt.AlignCenter)
        self.emailLabelProfileInsideMainStackWidget.setObjectName("emailLabelProfileInsideMainStackWidget")
        self.verticalLayout_14.addWidget(self.emailLabelProfileInsideMainStackWidget)
        self.emailOfUserProfileInsideMainStackWidget = QtWidgets.QLabel(self.emailElementProfileInsideMainStackWidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(13)
        font.setBold(True)
        self.emailOfUserProfileInsideMainStackWidget.setFont(QFont('raleway',14,100))
        self.emailOfUserProfileInsideMainStackWidget.setAlignment(QtCore.Qt.AlignCenter)
        self.emailOfUserProfileInsideMainStackWidget.setObjectName("emailOfUserProfileInsideMainStackWidget")
        self.verticalLayout_14.addWidget(self.emailOfUserProfileInsideMainStackWidget, 0, QtCore.Qt.AlignTop)
        self.horizontalLayout_4.addWidget(self.emailElementProfileInsideMainStackWidget)
        # self.levelElementProfileInsideMainStackWidget = QtWidgets.QWidget(self.sectionOneProfileInsideMainStackWidget)
        # self.levelElementProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(250, 60))
        # self.levelElementProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(250, 60))
        # self.levelElementProfileInsideMainStackWidget.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0.40678 rgba(151, 71, 255, 255), stop:1 rgba(209, 88, 248, 255));")
        # self.levelElementProfileInsideMainStackWidget.setObjectName("levelElementProfileInsideMainStackWidget")
#         self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.levelElementProfileInsideMainStackWidget)
#         self.horizontalLayout_8.setSpacing(0)
#         self.horizontalLayout_8.setObjectName("horizontalLayout_8")
#         # self.levelLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.levelElementProfileInsideMainStackWidget)
#         self.levelLabelProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 30))
#         self.levelLabelProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 30))
#         font = QtGui.QFont()
#         font.setFamily("Cascadia Code")
#         font.setPointSize(12)
#         font.setBold(True)
#         self.levelLabelProfileInsideMainStackWidget.setFont(QFont('raleway',12,100))
#         self.levelLabelProfileInsideMainStackWidget.setStyleSheet("background: transparent;\n"
# "color: white;\n"
# "border-right: 1px solid white;")
#         self.levelLabelProfileInsideMainStackWidget.setAlignment(QtCore.Qt.AlignCenter)
#         self.levelLabelProfileInsideMainStackWidget.setObjectName("levelLabelProfileInsideMainStackWidget")
#         self.horizontalLayout_8.addWidget(self.levelLabelProfileInsideMainStackWidget)
        # self.levelOfUserLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.levelElementProfileInsideMainStackWidget)
#         self.levelOfUserLabelProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 30))
#         self.levelOfUserLabelProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 30))
#         font = QtGui.QFont()
#         font.setFamily("Cascadia Code")
#         font.setPointSize(12)
#         font.setBold(True)
#         self.levelOfUserLabelProfileInsideMainStackWidget.setFont(QFont('raleway',12,100))
#         self.levelOfUserLabelProfileInsideMainStackWidget.setStyleSheet("background: transparent;\n"
# "color: white;\n"
# "border-left: 1px solid white;")
#         self.levelOfUserLabelProfileInsideMainStackWidget.setAlignment(QtCore.Qt.AlignCenter)
#         self.levelOfUserLabelProfileInsideMainStackWidget.setObjectName("levelOfUserLabelProfileInsideMainStackWidget")
#         self.horizontalLayout_8.addWidget(self.levelOfUserLabelProfileInsideMainStackWidget)
#         self.horizontalLayout_4.addWidget(self.levelElementProfileInsideMainStackWidget)
#         # self.referralElementProfileInsideMainStackWidget = QtWidgets.QWidget(self.sectionOneProfileInsideMainStackWidget)
#         self.referralElementProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(250, 60))
#         self.referralElementProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(250, 60))
#         self.referralElementProfileInsideMainStackWidget.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0.40678 rgba(151, 71, 255, 255), stop:1 rgba(209, 88, 248, 255));")
#         self.referralElementProfileInsideMainStackWidget.setObjectName("referralElementProfileInsideMainStackWidget")
#         self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.referralElementProfileInsideMainStackWidget)
#         self.horizontalLayout_9.setContentsMargins(5, 0, 5, 0)
#         self.horizontalLayout_9.setSpacing(0)
#         self.horizontalLayout_9.setObjectName("horizontalLayout_9")
#         # self.sectionOneReferralProfileInsideMainStackWidget = QtWidgets.QFrame(self.referralElementProfileInsideMainStackWidget)
#         self.sectionOneReferralProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 35))
#         self.sectionOneReferralProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 35))
#         self.sectionOneReferralProfileInsideMainStackWidget.setStyleSheet("#frame_2{\n"
# "    border-right: 1px solid white;\n"
# "    background: transparent;\n"
# "}")
#         self.sectionOneReferralProfileInsideMainStackWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
#         self.sectionOneReferralProfileInsideMainStackWidget.setFrameShadow(QtWidgets.QFrame.Raised)
#         self.sectionOneReferralProfileInsideMainStackWidget.setObjectName("sectionOneReferralProfileInsideMainStackWidget")
#         self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.sectionOneReferralProfileInsideMainStackWidget)
#         self.verticalLayout_15.setContentsMargins(0, 0, 5, 0)
#         self.verticalLayout_15.setSpacing(5)
#         self.verticalLayout_15.setObjectName("verticalLayout_15")
#         self.referralLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.sectionOneReferralProfileInsideMainStackWidget)
#         font = QtGui.QFont()
#         font.setFamily("Cascadia Code")
#         font.setPointSize(8)
#         self.referralLabelProfileInsideMainStackWidget.setFont(QFont('raleway',7))
#         self.referralLabelProfileInsideMainStackWidget.setStyleSheet("color: white;\n"
# "background: transparent;")
#         self.referralLabelProfileInsideMainStackWidget.setObjectName("referralLabelProfileInsideMainStackWidget")
#         self.verticalLayout_15.addWidget(self.referralLabelProfileInsideMainStackWidget, 0, QtCore.Qt.AlignHCenter)
        # self.referralOfCodeProfileInsideMainStackWidget = QtWidgets.QLabel(self.sectionOneReferralProfileInsideMainStackWidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        # self.referralOfCodeProfileInsideMainStackWidget.setFont(QFont('raleway',10,100))
        # self.referralOfCodeProfileInsideMainStackWidget.setStyleSheet("color: white;\n""background: transparent;")
        # self.referralOfCodeProfileInsideMainStackWidget.setObjectName("referralOfCodeProfileInsideMainStackWidget")
        # self.verticalLayout_15.addWidget(self.referralOfCodeProfileInsideMainStackWidget, 0, QtCore.Qt.AlignHCenter)
        # self.horizontalLayout_9.addWidget(self.sectionOneReferralProfileInsideMainStackWidget)
        # self.sectoionTwoReferralProfileInsideMainStackWidget = QtWidgets.QFrame(self.referralElementProfileInsideMainStackWidget)
        # self.sectoionTwoReferralProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 35))
        # self.sectoionTwoReferralProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 35))
        # self.sectoionTwoReferralProfileInsideMainStackWidget.setStyleSheet("background: transparent;")
        # self.sectoionTwoReferralProfileInsideMainStackWidget.setFrameShape(QtWidgets.QFrame.StyledPanel)
        # self.sectoionTwoReferralProfileInsideMainStackWidget.setFrameShadow(QtWidgets.QFrame.Raised)
        # self.sectoionTwoReferralProfileInsideMainStackWidget.setObjectName("sectoionTwoReferralProfileInsideMainStackWidget")
        # self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.sectoionTwoReferralProfileInsideMainStackWidget)
        # self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        # self.horizontalLayout_10.setSpacing(0)
        # self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        # self.copyReferralButtonProfileInsideMainStackWidget = QtWidgets.QPushButton(self.sectoionTwoReferralProfileInsideMainStackWidget)
        # self.copyReferralButtonProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 35))
        # self.copyReferralButtonProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 35))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        # self.copyReferralButtonProfileInsideMainStackWidget.setFont(QFont('raleway',10,100))
        # self.copyReferralButtonProfileInsideMainStackWidget.clicked.connect(self.copy_text)

        # self.copyReferralButtonProfileInsideMainStackWidget.setStyleSheet("color: white;")
        # self.copyReferralButtonProfileInsideMainStackWidget.setObjectName("copyReferralButtonProfileInsideMainStackWidget")
        # self.horizontalLayout_10.addWidget(self.copyReferralButtonProfileInsideMainStackWidget)
        # self.horizontalLayout_9.addWidget(self.sectoionTwoReferralProfileInsideMainStackWidget)
        # self.horizontalLayout_4.addWidget(self.referralElementProfileInsideMainStackWidget)
        self.verticalLayout_8.addWidget(self.sectionOneProfileInsideMainStackWidget)
        self.sectionSecondProfileInsideMainStackWidget = QtWidgets.QWidget(self.profilePageInsideMainStackWidget)
        self.sectionSecondProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 70))
        self.sectionSecondProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 70))
        self.sectionSecondProfileInsideMainStackWidget.setStyleSheet("#widget_5 {\n"
"    border-bottom: 2px solid #959595;\n"
"}")
        self.sectionSecondProfileInsideMainStackWidget.setObjectName("sectionSecondProfileInsideMainStackWidget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.sectionSecondProfileInsideMainStackWidget)
        self.horizontalLayout_3.setContentsMargins(0, 20, 0, 20)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.recentActivityLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.sectionSecondProfileInsideMainStackWidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        self.recentActivityLabelProfileInsideMainStackWidget.setFont(QFont('Artemus',20))
        self.recentActivityLabelProfileInsideMainStackWidget.setObjectName("recentActivityLabelProfileInsideMainStackWidget")
        self.horizontalLayout_3.addWidget(self.recentActivityLabelProfileInsideMainStackWidget)
        spacerItem11 = QtWidgets.QSpacerItem(224, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem11)
        self.hoursPlayedLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.sectionSecondProfileInsideMainStackWidget)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        font.setBold(True)
        self.hoursPlayedLabelProfileInsideMainStackWidget.setFont(QFont('raleway',16,100))
        self.hoursPlayedLabelProfileInsideMainStackWidget.setObjectName("hoursPlayedLabelProfileInsideMainStackWidget")
        self.horizontalLayout_3.addWidget(self.hoursPlayedLabelProfileInsideMainStackWidget)
        self.verticalLayout_8.addWidget(self.sectionSecondProfileInsideMainStackWidget)


        self.SectionthirdProfileInsideMainStackWidget = QtWidgets.QWidget(self.profilePageInsideMainStackWidget)
        self.SectionthirdProfileInsideMainStackWidget.setStyleSheet("#gamesWidget{\n"
        "    margin-top : 20px;\n"
        "}")
        self.SectionthirdProfileInsideMainStackWidget.setObjectName("SectionthirdProfileInsideMainStackWidget")

        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.SectionthirdProfileInsideMainStackWidget)
        self.verticalLayout_10.setContentsMargins(0, 20, 0, -1)
        self.verticalLayout_10.setSpacing(20)
        self.verticalLayout_10.setObjectName("verticalLayout_10")

       


        # self.widget_11 = QtWidgets.QWidget(self.SectionthirdProfileInsideMainStackWidget)
        # self.widget_11.setMinimumSize(QtCore.QSize(0, 50))
        # self.widget_11.setMaximumSize(QtCore.QSize(16777215, 50))
        # self.widget_11.setStyleSheet("background-color: white;")
        # self.widget_11.setObjectName("widget_11")

        # self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.widget_11)
        # self.horizontalLayout_6.setContentsMargins(15, -1, 15, -1)
        # self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        # self.label_13 = QtWidgets.QLabel(self.widget_11)
        # font = QtGui.QFont()
        # font.setFamily("Cascadia Code")
        # font.setPointSize(13)
        # font.setBold(True)
        # self.label_13.setFont(QFont('raleway',16,100))
        # self.label_13.setObjectName("label_13")
        # self.horizontalLayout_6.addWidget(self.label_13)
        # spacerItem13 = QtWidgets.QSpacerItem(784, 19, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        # self.horizontalLayout_6.addItem(spacerItem13)

        # self.label_14 = QtWidgets.QLabel(self.widget_11)
        # font = QtGui.QFont()
        # font.setFamily("Cascadia Code")
        # font.setPointSize(12)
        # self.label_14.setFont(QFont('raleway',14))
        # self.label_14.setObjectName("label_14")
        # self.horizontalLayout_6.addWidget(self.label_14)
        # self.verticalLayout_10.addWidget(self.widget_11)

        # self.gameNameMainCardProfileInsideMainStackWidget = QtWidgets.QWidget(self.SectionthirdProfileInsideMainStackWidget)
        # self.gameNameMainCardProfileInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 50))
        # self.gameNameMainCardProfileInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 50))
        # self.gameNameMainCardProfileInsideMainStackWidget.setStyleSheet("background-color: white;")
        # self.gameNameMainCardProfileInsideMainStackWidget.setObjectName("gameNameMainCardProfileInsideMainStackWidget")
        # self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.gameNameMainCardProfileInsideMainStackWidget)
        # self.horizontalLayout_7.setContentsMargins(15, -1, 15, -1)
        # self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        # self.gameNameLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.gameNameMainCardProfileInsideMainStackWidget)
        # font = QtGui.QFont()
        # font.setFamily("Cascadia Code")
        # font.setPointSize(13)
        # font.setBold(True)
        # self.gameNameLabelProfileInsideMainStackWidget.setFont(QFont('raleway',16,100))
        # self.gameNameLabelProfileInsideMainStackWidget.setObjectName("gameNameLabelProfileInsideMainStackWidget")
        # self.horizontalLayout_7.addWidget(self.gameNameLabelProfileInsideMainStackWidget)
        # spacerItem14 = QtWidgets.QSpacerItem(844, 19, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        # self.horizontalLayout_7.addItem(spacerItem14)
        # self.gamePlayedTimeLabelProfileInsideMainStackWidget = QtWidgets.QLabel(self.gameNameMainCardProfileInsideMainStackWidget)
        # font = QtGui.QFont()
        # font.setFamily("Cascadia Code")
        # font.setPointSize(12)
        # self.gamePlayedTimeLabelProfileInsideMainStackWidget.setFont(QFont('raleway',14))
        # self.gamePlayedTimeLabelProfileInsideMainStackWidget.setObjectName("gamePlayedTimeLabelProfileInsideMainStackWidget")
        # self.horizontalLayout_7.addWidget(self.gamePlayedTimeLabelProfileInsideMainStackWidget)
        # self.verticalLayout_10.addWidget(self.gameNameMainCardProfileInsideMainStackWidget)

        self.verticalLayout_8.addWidget(self.SectionthirdProfileInsideMainStackWidget, 0, QtCore.Qt.AlignTop)
        self.insideMainStackWidget.addWidget(self.profilePageInsideMainStackWidget)
        self.verticalLayout_12.addWidget(self.insideMainStackWidget)
        self.horizontalLayout_2.addWidget(self.rightSideMainWidgetMainSoftware)
        self.verticalLayout_25.addWidget(self.MainWidgetMainSoftware)
        self.outsideMainStackWidget.addWidget(self.SoftwareAfterLogin)
#         self.LoginPage = QtWidgets.QWidget()
#         self.LoginPage.setObjectName("LoginPage")
#         self.verticalLayout_27 = QtWidgets.QVBoxLayout(self.LoginPage)
#         self.verticalLayout_27.setContentsMargins(0, 0, 0, 0)
#         self.verticalLayout_27.setSpacing(0)
#         self.verticalLayout_27.setObjectName("verticalLayout_27")
#         self.MainWidgetLogin = QtWidgets.QWidget(self.LoginPage)
#         self.MainWidgetLogin.setMinimumSize(QtCore.QSize(0, 0))
#         self.MainWidgetLogin.setLayoutDirection(QtCore.Qt.LeftToRight)
#         self.MainWidgetLogin.setAutoFillBackground(False)
#         self.MainWidgetLogin.setStyleSheet("background-image: url(C:/ZEUS_Media/LoginBackImg.png) no-repeat;\n"
# "background-repeat: no-repeat;\n"
# "background-position: center;")
#         self.MainWidgetLogin.setObjectName("MainWidgetLogin")
#         self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.MainWidgetLogin)
#         self.horizontalLayout_16.setContentsMargins(-1, 20, -1, 40)
#         self.horizontalLayout_16.setObjectName("horizontalLayout_16")
#         self.MainFrameLogin = QtWidgets.QFrame(self.MainWidgetLogin)
#         self.MainFrameLogin.setMinimumSize(QtCore.QSize(800, 0))
#         self.MainFrameLogin.setMaximumSize(QtCore.QSize(800, 16777215))
#         self.MainFrameLogin.setStyleSheet("background: transparent;")
#         self.MainFrameLogin.setFrameShape(QtWidgets.QFrame.StyledPanel)
#         self.MainFrameLogin.setFrameShadow(QtWidgets.QFrame.Raised)
#         self.MainFrameLogin.setObjectName("MainFrameLogin")
#         self.verticalLayout_26 = QtWidgets.QVBoxLayout(self.MainFrameLogin)
#         self.verticalLayout_26.setObjectName("verticalLayout_26")
#         self.zeusLogoLogin = QtWidgets.QLabel(self.MainFrameLogin)
#         self.zeusLogoLogin.setMaximumSize(QtCore.QSize(16777215, 143))
#         self.zeusLogoLogin.setStyleSheet("background: transparent;\n"
# "background-image: url(C:/ZEUS_Media/LoginLogo.png);\n"
# "background-repeat: no-repeat;\n"
# " background-position: center;")
#         self.zeusLogoLogin.setLineWidth(0)
#         self.zeusLogoLogin.setText("")
#         self.zeusLogoLogin.setPixmap(QtGui.QPixmap(r"C:/ZEUS_Media/LoginLogo.png"))
#         self.zeusLogoLogin.setAlignment(QtCore.Qt.AlignCenter)
#         self.zeusLogoLogin.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
#         self.zeusLogoLogin.setObjectName("zeusLogoLogin")
#         self.verticalLayout_26.addWidget(self.zeusLogoLogin)
#         self.mainHeadingLogin = QtWidgets.QLabel(self.MainFrameLogin)
#         self.mainHeadingLogin.setMaximumSize(QtCore.QSize(16777215, 60))
#         font = QtGui.QFont()
#         font.setFamily("Cascadia Code")
#         font.setPointSize(27)
#         font.setBold(False)
#         font.setStrikeOut(False)
#         font.setStyleStrategy(QtGui.QFont.PreferDefault)
#         self.mainHeadingLogin.setFont(QFont('Artemus',35))
#         # self.mainHeadingLogin.setFont(font)
#         self.mainHeadingLogin.setStyleSheet("background: transparent;")
#         self.mainHeadingLogin.setAlignment(QtCore.Qt.AlignCenter)
#         self.mainHeadingLogin.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
#         self.mainHeadingLogin.setObjectName("mainHeadingLogin")
#         self.verticalLayout_26.addWidget(self.mainHeadingLogin)
#         self.secondHeadingLogin = QtWidgets.QLabel(self.MainFrameLogin)
#         self.secondHeadingLogin.setMaximumSize(QtCore.QSize(16777215, 30))
#         font = QtGui.QFont()
#         font.setFamily("Cascadia Code")
#         font.setPointSize(11)
#         # self.secondHeadingLogin.setFont(font)
#         self.secondHeadingLogin.setFont(QFont('raleway',14))
#         self.secondHeadingLogin.setStyleSheet("background: transparent;")
#         self.secondHeadingLogin.setAlignment(QtCore.Qt.AlignCenter)
#         self.secondHeadingLogin.setObjectName("secondHeadingLogin")
#         self.verticalLayout_26.addWidget(self.secondHeadingLogin)
#         self.usernameLabelLogin = QtWidgets.QLabel(self.MainFrameLogin)
#         self.usernameLabelLogin.setMaximumSize(QtCore.QSize(16777215, 70))
#         font = QtGui.QFont()
#         font.setPointSize(12)
#         # self.usernameLabelLogin.setFont(font)
#         self.usernameLabelLogin.setFont(QFont('raleway',13))

#         self.usernameLabelLogin.setStyleSheet("background: transparent;")
#         self.usernameLabelLogin.setObjectName("usernameLabelLogin")
#         self.verticalLayout_26.addWidget(self.usernameLabelLogin)
#         self.usernameInputLogin = QtWidgets.QLineEdit(self.MainFrameLogin)
#         self.usernameInputLogin.setMinimumSize(QtCore.QSize(0, 30))
#         font = QtGui.QFont()
#         font.setFamily("Cascadia Code")
#         font.setPointSize(12)
#         self.usernameInputLogin.setFont(font)
#         self.usernameInputLogin.setStyleSheet("background: transparent;\n"
# "border: none;\n"
# "border-bottom: 2px solid black;")
#         self.usernameInputLogin.setObjectName("usernameInputLogin")
#         self.verticalLayout_26.addWidget(self.usernameInputLogin)
#         self.passwordLabelLogin = QtWidgets.QLabel(self.MainFrameLogin)
#         self.passwordLabelLogin.setMaximumSize(QtCore.QSize(16777215, 70))
#         font = QtGui.QFont()
#         font.setPointSize(12)
#         # self.passwordLabelLogin.setFont(font)
#         self.passwordLabelLogin.setFont(QFont('raleway',13))
#         self.passwordLabelLogin.setStyleSheet("background: transparent;")
#         self.passwordLabelLogin.setObjectName("passwordLabelLogin")
#         self.verticalLayout_26.addWidget(self.passwordLabelLogin)
#         self.passwordInputLogin = QtWidgets.QLineEdit(self.MainFrameLogin)
#         self.passwordInputLogin.setMinimumSize(QtCore.QSize(0, 30))
#         font = QtGui.QFont()
#         font.setFamily("Cascadia Code")
#         font.setPointSize(12)
#         self.passwordInputLogin.setFont(font)
#         self.passwordInputLogin.setStyleSheet("background: transparent;\n"
# "border: none;\n"
# "border-bottom: 2px solid black;")
#         self.passwordInputLogin.setEchoMode(QtWidgets.QLineEdit.Password)
#         self.passwordInputLogin.setObjectName("passwordInputLogin")
#         self.verticalLayout_26.addWidget(self.passwordInputLogin)
#         self.sectionOneLogin = QtWidgets.QFrame(self.MainFrameLogin)
#         self.sectionOneLogin.setMinimumSize(QtCore.QSize(0, 30))
#         self.sectionOneLogin.setMaximumSize(QtCore.QSize(16777215, 30))
#         self.sectionOneLogin.setStyleSheet("")
#         self.sectionOneLogin.setFrameShape(QtWidgets.QFrame.NoFrame)
#         self.sectionOneLogin.setFrameShadow(QtWidgets.QFrame.Raised)
#         self.sectionOneLogin.setObjectName("sectionOneLogin")
#         self.verticalLayout_34 = QtWidgets.QVBoxLayout(self.sectionOneLogin)
#         self.verticalLayout_34.setContentsMargins(0, 0, 0, 0)
#         self.verticalLayout_34.setSpacing(0)
#         self.verticalLayout_34.setObjectName("verticalLayout_34")
#         self.forgotPassButtonLogin = QtWidgets.QPushButton(self.sectionOneLogin)
#         self.forgotPassButtonLogin.setMinimumSize(QtCore.QSize(0, 30))
#         self.forgotPassButtonLogin.setMaximumSize(QtCore.QSize(16777215, 30))
#         font = QtGui.QFont()
#         font.setFamily("Cascadia Code")
#         font.setPointSize(11)
#         # self.forgotPassButtonLogin.setFont(font)
#         self.forgotPassButtonLogin.setFont(QFont('raleway',13))

#         self.forgotPassButtonLogin.setLayoutDirection(QtCore.Qt.LeftToRight)
#         self.forgotPassButtonLogin.setStyleSheet("background-color: transparent;\n"
# "border: none;")
#         self.forgotPassButtonLogin.setObjectName("forgotPassButtonLogin")

#         self.forgotPassButtonLogin.clicked.connect(self.show_ForgotPass_Stack)

#         self.verticalLayout_34.addWidget(self.forgotPassButtonLogin, 0, QtCore.Qt.AlignRight)
#         self.verticalLayout_26.addWidget(self.sectionOneLogin)
#         self.signInButtonLogin = QtWidgets.QPushButton(self.MainFrameLogin)
#         font = QtGui.QFont()
#         font.setFamily("Cascadia Code")
#         font.setPointSize(12)
#         # self.signInButtonLogin.setFont(font)

#         self.signInButtonLogin.setFont(QFont('raleway',12,100))

#         self.signInButtonLogin.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0.389831 rgba(151, 71, 255, 255), stop:1 rgba(209, 88, 248, 255));\n"
#         "padding: 10px 0px;\n"
#         "border-radius: 10px;\n"
#         "color: white;\n"
#         "margin-top: 20px;")
#         self.signInButtonLogin.setObjectName("signInButtonLogin")

#         self.signInButtonLogin.clicked.connect(self.show_otpVerify_Stack)

#         self.verticalLayout_26.addWidget(self.signInButtonLogin)
#         self.loginWithQRButtonLogin = QtWidgets.QPushButton(self.MainFrameLogin)
#         self.loginWithQRButtonLogin.setLayoutDirection(QtCore.Qt.RightToLeft)

#         self.loginWithQRButtonLogin.setFont(QFont('raleway',13))

#         self.loginWithQRButtonLogin.setStyleSheet("background: transparent;\n"
# "margin-top: 50px;")
#         icon8 = QtGui.QIcon()
#         icon8.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\qrSignInSmall.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
#         self.loginWithQRButtonLogin.setIcon(icon8)
#         self.loginWithQRButtonLogin.setIconSize(QtCore.QSize(19, 19))
#         self.loginWithQRButtonLogin.setAutoRepeat(False)
#         self.loginWithQRButtonLogin.setAutoExclusive(False)
#         self.loginWithQRButtonLogin.setObjectName("loginWithQRButtonLogin")

#         self.loginWithQRButtonLogin.clicked.connect(lambda state, path="from solo login" :self.show_QRCode_Stack(path))


#         self.verticalLayout_26.addWidget(self.loginWithQRButtonLogin)


#         self.horizontalLayout_16.addWidget(self.MainFrameLogin)
#         self.verticalLayout_27.addWidget(self.MainWidgetLogin)
#         self.outsideMainStackWidget.addWidget(self.LoginPage)

# ------------------------------------------------------------------------------------------------------------
        self.LoginPage = QtWidgets.QWidget()
        self.LoginPage.setObjectName("LoginPage")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout(self.LoginPage)
        self.verticalLayout_27.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_27.setSpacing(0)
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.MainWidgetLogin = QtWidgets.QWidget(self.LoginPage)
        self.MainWidgetLogin.setMinimumSize(QtCore.QSize(0, 0))
        self.MainWidgetLogin.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.MainWidgetLogin.setAutoFillBackground(False)
        self.MainWidgetLogin.setStyleSheet("background-image: url(C:/ZEUS_Media/LoginBackImg.png) no-repeat;\n"
"background-repeat: no-repeat;\n"
"background-position: center;")
        self.MainWidgetLogin.setObjectName("MainWidgetLogin")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.MainWidgetLogin)
        self.horizontalLayout_16.setContentsMargins(-1, 20, -1, 40)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.MainFrameLogin = QtWidgets.QFrame(self.MainWidgetLogin)
        self.MainFrameLogin.setMinimumSize(QtCore.QSize(800, 0))
        self.MainFrameLogin.setMaximumSize(QtCore.QSize(800, 16777215))
        self.MainFrameLogin.setStyleSheet("background: transparent;")
        self.MainFrameLogin.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.MainFrameLogin.setFrameShadow(QtWidgets.QFrame.Raised)
        self.MainFrameLogin.setObjectName("MainFrameLogin")
        self.verticalLayout_26 = QtWidgets.QVBoxLayout(self.MainFrameLogin)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.zeusLogoLogin = QtWidgets.QLabel(self.MainFrameLogin)
        self.zeusLogoLogin.setMaximumSize(QtCore.QSize(16777215, 143))
        self.zeusLogoLogin.setStyleSheet("background: transparent;\n"
"background-image: url(C:/ZEUS_Media/LoginLogo.png);\n"
"background-repeat: no-repeat;\n"
" background-position: center;")
        self.zeusLogoLogin.setLineWidth(0)
        self.zeusLogoLogin.setText("")
        self.zeusLogoLogin.setPixmap(QtGui.QPixmap(r"C:/ZEUS_Media/LoginLogo.png"))
        self.zeusLogoLogin.setAlignment(QtCore.Qt.AlignCenter)
        self.zeusLogoLogin.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.zeusLogoLogin.setObjectName("zeusLogoLogin")
        self.verticalLayout_26.addWidget(self.zeusLogoLogin)
        self.mainHeadingLogin = QtWidgets.QLabel(self.MainFrameLogin)
        self.mainHeadingLogin.setMaximumSize(QtCore.QSize(16777215, 60))

        self.mainHeadingLogin.setFont(QFont('Artemus',35))
        self.mainHeadingLogin.setStyleSheet("background: transparent;")
        self.mainHeadingLogin.setAlignment(QtCore.Qt.AlignCenter)
        self.mainHeadingLogin.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.mainHeadingLogin.setObjectName("mainHeadingLogin")
        self.verticalLayout_26.addWidget(self.mainHeadingLogin)
        self.secondHeadingLogin = QtWidgets.QLabel(self.MainFrameLogin)
        self.secondHeadingLogin.setMaximumSize(QtCore.QSize(16777215, 30))
     
        self.secondHeadingLogin.setFont(QFont('raleway',14))
        self.secondHeadingLogin.setStyleSheet("background: transparent;")
        self.secondHeadingLogin.setAlignment(QtCore.Qt.AlignCenter)
        self.secondHeadingLogin.setObjectName("secondHeadingLogin")
        self.verticalLayout_26.addWidget(self.secondHeadingLogin)
        self.usernameLabelLogin = QtWidgets.QLabel(self.MainFrameLogin)
        self.usernameLabelLogin.setMaximumSize(QtCore.QSize(16777215, 70))
      
        self.usernameLabelLogin.setFont(QFont('raleway',13))
        self.usernameLabelLogin.setStyleSheet("background: transparent;")
        self.usernameLabelLogin.setObjectName("usernameLabelLogin")
        self.verticalLayout_26.addWidget(self.usernameLabelLogin)
        self.usernameInputLogin = QtWidgets.QLineEdit(self.MainFrameLogin)
        self.usernameInputLogin.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.usernameInputLogin.setFont(font)
        self.usernameInputLogin.setFont(QFont('raleway',12))
        self.usernameInputLogin.setStyleSheet("background: transparent;\n"
        "border: none;\n"
        "border-bottom: 2px solid black;")
        self.usernameInputLogin.setObjectName("usernameInputLogin")
        self.verticalLayout_26.addWidget(self.usernameInputLogin)
        self.passwordLabelLogin = QtWidgets.QLabel(self.MainFrameLogin)
        self.passwordLabelLogin.setMaximumSize(QtCore.QSize(16777215, 70))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.passwordLabelLogin.setFont(QFont('raleway',13))
        self.passwordLabelLogin.setStyleSheet("background: transparent;")
        self.passwordLabelLogin.setObjectName("passwordLabelLogin")
        self.verticalLayout_26.addWidget(self.passwordLabelLogin)
        self.passwordInputLogin = QtWidgets.QLineEdit(self.MainFrameLogin)
        self.passwordInputLogin.setFont(QFont('raleway',12))
        self.passwordInputLogin.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.passwordInputLogin.setFont(font)
        self.passwordInputLogin.setStyleSheet("background: transparent;\n"
        "border: none;\n"
        "border-bottom: 2px solid black;")
        self.passwordInputLogin.setEchoMode(QtWidgets.QLineEdit.Password)
        self.passwordInputLogin.setObjectName("passwordInputLogin")
        self.verticalLayout_26.addWidget(self.passwordInputLogin)
        self.sectionOneLogin = QtWidgets.QFrame(self.MainFrameLogin)
        self.sectionOneLogin.setMinimumSize(QtCore.QSize(0, 30))
        self.sectionOneLogin.setMaximumSize(QtCore.QSize(16777215, 30))
        self.sectionOneLogin.setStyleSheet("")
        self.sectionOneLogin.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.sectionOneLogin.setFrameShadow(QtWidgets.QFrame.Raised)
        self.sectionOneLogin.setObjectName("sectionOneLogin")
        self.verticalLayout_34 = QtWidgets.QVBoxLayout(self.sectionOneLogin)
        self.verticalLayout_34.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_34.setSpacing(0)
        self.verticalLayout_34.setObjectName("verticalLayout_34")
        self.forgotPassButtonLogin = QtWidgets.QPushButton(self.sectionOneLogin)
        self.forgotPassButtonLogin.setMinimumSize(QtCore.QSize(0, 30))
        self.forgotPassButtonLogin.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        self.forgotPassButtonLogin.clicked.connect(self.show_ForgotPass_Stack)
        self.forgotPassButtonLogin.setFont(QFont('raleway',13))
        self.forgotPassButtonLogin.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.forgotPassButtonLogin.setStyleSheet("background-color: transparent;\n"
        "border: none;")
        self.forgotPassButtonLogin.setObjectName("forgotPassButtonLogin")
        self.verticalLayout_34.addWidget(self.forgotPassButtonLogin, 0, QtCore.Qt.AlignRight)
        self.verticalLayout_26.addWidget(self.sectionOneLogin)
        self.signInButtonLogin = QtWidgets.QPushButton(self.MainFrameLogin)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.signInButtonLogin.setFont(QFont('raleway',12,100))
        self.signInButtonLogin.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0.389831 rgba(151, 71, 255, 255), stop:1 rgba(209, 88, 248, 255));\n"
        "padding: 10px 0px;\n"
        "border-radius: 10px;\n"
        "color: white;\n"
        "margin-top: 20px;")
        self.signInButtonLogin.setObjectName("signInButtonLogin")
        self.signInButtonLogin.clicked.connect(self.show_otpVerify_Stack)

        self.verticalLayout_26.addWidget(self.signInButtonLogin)
        self.loginWithQRButtonLogin = QtWidgets.QPushButton(self.MainFrameLogin)
        self.loginWithQRButtonLogin.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.loginWithQRButtonLogin.setFont(QFont('raleway',13))

        self.loginWithQRButtonLogin.setStyleSheet("background: transparent;\n"
        "margin-top: 50px;")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\qrSignInSmall.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.loginWithQRButtonLogin.setIcon(icon8)
        self.loginWithQRButtonLogin.setIconSize(QtCore.QSize(19, 19))
        self.loginWithQRButtonLogin.setAutoRepeat(False)
        self.loginWithQRButtonLogin.setAutoExclusive(False)
        self.loginWithQRButtonLogin.setObjectName("loginWithQRButtonLogin")
        self.loginWithQRButtonLogin.clicked.connect(lambda state, path="from solo login" :self.show_QRCode_Stack(path))

        self.verticalLayout_26.addWidget(self.loginWithQRButtonLogin)
        self.frame_6_login = QtWidgets.QFrame(self.MainFrameLogin)
        self.frame_6_login.setMinimumSize(QtCore.QSize(0, 80))
        self.frame_6_login.setMaximumSize(QtCore.QSize(16777215, 80))
        self.frame_6_login.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6_login.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6_login.setObjectName("frame_6_login")
        self.horizontalLayout_37 = QtWidgets.QHBoxLayout(self.frame_6_login)
        self.horizontalLayout_37.setObjectName("horizontalLayout_37")
        self.label_21_login = QtWidgets.QLabel(self.frame_6_login)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        self.label_21_login.setFont(QFont('raleway', 12))
        self.label_21_login.setObjectName("label_21_login")
        self.horizontalLayout_37.addWidget(self.label_21_login, 0, QtCore.Qt.AlignRight|QtCore.Qt.AlignVCenter)
        self.pushButton_7_login = QtWidgets.QPushButton(self.frame_6_login)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setUnderline(True)
        self.pushButton_7_login.setFont(QFont('raleway', 12,100))
        self.pushButton_7_login.setStyleSheet("#pushButton_7_login {\n"
        "border: none;\n"
        "background: transparent;\n"
        "color: #D158F8;\n"
        "text-decoration: underline;\n"
        "}")
        self.pushButton_7_login.setObjectName("pushButton_7_login")
        self.pushButton_7_login.clicked.connect(self.show_group_id_page)
        

        self.horizontalLayout_37.addWidget(self.pushButton_7_login, 0, QtCore.Qt.AlignLeft)
        self.verticalLayout_26.addWidget(self.frame_6_login)
        self.horizontalLayout_16.addWidget(self.MainFrameLogin)
        self.verticalLayout_27.addWidget(self.MainWidgetLogin)
        self.outsideMainStackWidget.addWidget(self.LoginPage)
# ------------------------------------------------------------------------------------------------------------

        self.OTPPage = QtWidgets.QWidget()
        self.OTPPage.setObjectName("OTPPage")
        self.verticalLayout_31 = QtWidgets.QVBoxLayout(self.OTPPage)
        self.verticalLayout_31.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_31.setSpacing(0)
        self.verticalLayout_31.setObjectName("verticalLayout_31")
        self.MainWidgetOTP = QtWidgets.QWidget(self.OTPPage)
        self.MainWidgetOTP.setMinimumSize(QtCore.QSize(0, 0))
        self.MainWidgetOTP.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.MainWidgetOTP.setAutoFillBackground(False)
        self.MainWidgetOTP.setStyleSheet("background-image: url(C:/ZEUS_Media/LoginBackImg.png) no-repeat;\n"
"background-repeat: no-repeat;\n"
"background-position: center;")
        self.MainWidgetOTP.setObjectName("MainWidgetOTP")
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout(self.MainWidgetOTP)
        self.horizontalLayout_21.setContentsMargins(-1, 20, -1, 40)
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.MainFrameOTP = QtWidgets.QFrame(self.MainWidgetOTP)
        self.MainFrameOTP.setMinimumSize(QtCore.QSize(700, 0))
        self.MainFrameOTP.setMaximumSize(QtCore.QSize(700, 16777215))
        self.MainFrameOTP.setStyleSheet("background: transparent;")
        self.MainFrameOTP.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.MainFrameOTP.setFrameShadow(QtWidgets.QFrame.Raised)
        self.MainFrameOTP.setObjectName("MainFrameOTP")
        self.verticalLayout_30 = QtWidgets.QVBoxLayout(self.MainFrameOTP)
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.zeusLogoOTP = QtWidgets.QLabel(self.MainFrameOTP)
        self.zeusLogoOTP.setMinimumSize(QtCore.QSize(0, 143))
        self.zeusLogoOTP.setMaximumSize(QtCore.QSize(16777215, 143))
        self.zeusLogoOTP.setStyleSheet("background: transparent;\n"
"background-image: url(C:/ZEUS_Media/LoginLogo.png);\n"
"background-repeat: no-repeat;\n"
" background-position: center;")
        self.zeusLogoOTP.setLineWidth(0)
        self.zeusLogoOTP.setText("")
        self.zeusLogoOTP.setPixmap(QtGui.QPixmap(r"C:/ZEUS_Media/LoginLogo.png"))
        self.zeusLogoOTP.setAlignment(QtCore.Qt.AlignCenter)
        self.zeusLogoOTP.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.zeusLogoOTP.setObjectName("zeusLogoOTP")
        self.verticalLayout_30.addWidget(self.zeusLogoOTP)
        self.FirstMainHeadingLabel = QtWidgets.QLabel(self.MainFrameOTP)
        self.FirstMainHeadingLabel.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(27)
        font.setBold(False)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.FirstMainHeadingLabel.setFont(QFont('Artemus',30))
        self.FirstMainHeadingLabel.setStyleSheet("background: transparent;")
        self.FirstMainHeadingLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.FirstMainHeadingLabel.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.FirstMainHeadingLabel.setObjectName("FirstMainHeadingLabel")
        self.verticalLayout_30.addWidget(self.FirstMainHeadingLabel)
        self.secondMainLabel = QtWidgets.QLabel(self.MainFrameOTP)
        self.secondMainLabel.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        self.secondMainLabel.setFont(QFont('raleway',14))
        self.secondMainLabel.setStyleSheet("background: transparent;")
        self.secondMainLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.secondMainLabel.setObjectName("secondMainLabel")
        self.verticalLayout_30.addWidget(self.secondMainLabel)
        spacerItem15 = QtWidgets.QSpacerItem(20, 25, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_30.addItem(spacerItem15)
        self.frameInputOTP = QtWidgets.QFrame(self.MainFrameOTP)
        self.frameInputOTP.setMinimumSize(QtCore.QSize(0, 60))
        self.frameInputOTP.setMaximumSize(QtCore.QSize(400, 30))
        self.frameInputOTP.setStyleSheet("")
        self.frameInputOTP.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frameInputOTP.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameInputOTP.setObjectName("frameInputOTP")
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout(self.frameInputOTP)
        self.horizontalLayout_22.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_22.setSpacing(20)
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.firstInputOTP = QtWidgets.QLineEdit(self.frameInputOTP)
        self.firstInputOTP.setMinimumSize(QtCore.QSize(40, 40))
        self.firstInputOTP.setMaximumSize(QtCore.QSize(40, 40))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(15)
        self.firstInputOTP.setFont(font)
        self.firstInputOTP.setFont(QFont('raleway',14))
        self.firstInputOTP.setStyleSheet("border: 2px solid black;\n"
"border-radius: 5px;")
        self.firstInputOTP.setMaxLength(1)
        self.firstInputOTP.setAlignment(QtCore.Qt.AlignCenter)
        self.firstInputOTP.setDragEnabled(False)
        self.firstInputOTP.setReadOnly(False)
        self.firstInputOTP.setClearButtonEnabled(False)
        self.firstInputOTP.setObjectName("firstInputOTP")
        self.horizontalLayout_22.addWidget(self.firstInputOTP)
        self.secondInputOTP = QtWidgets.QLineEdit(self.frameInputOTP)
        self.secondInputOTP.setMinimumSize(QtCore.QSize(40, 40))
        self.secondInputOTP.setMaximumSize(QtCore.QSize(40, 40))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(15)
        self.secondInputOTP.setFont(font)
        self.secondInputOTP.setFont(QFont('raleway',14))
        self.secondInputOTP.setStyleSheet("border: 2px solid black;\n"
"border-radius: 5px;")
        self.secondInputOTP.setMaxLength(1)
        self.secondInputOTP.setAlignment(QtCore.Qt.AlignCenter)
        self.secondInputOTP.setObjectName("secondInputOTP")
        self.horizontalLayout_22.addWidget(self.secondInputOTP)
        self.thirdInputOTP = QtWidgets.QLineEdit(self.frameInputOTP)
        self.thirdInputOTP.setMinimumSize(QtCore.QSize(40, 40))
        self.thirdInputOTP.setMaximumSize(QtCore.QSize(40, 40))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(15)
        self.thirdInputOTP.setFont(font)
        self.thirdInputOTP.setFont(QFont('raleway',14))
        self.thirdInputOTP.setStyleSheet("border: 2px solid black;\n"
"border-radius: 5px;")
        self.thirdInputOTP.setMaxLength(1)
        self.thirdInputOTP.setAlignment(QtCore.Qt.AlignCenter)
        self.thirdInputOTP.setObjectName("thirdInputOTP")
        self.horizontalLayout_22.addWidget(self.thirdInputOTP)
        self.fourthInputOTP = QtWidgets.QLineEdit(self.frameInputOTP)
        self.fourthInputOTP.setMinimumSize(QtCore.QSize(40, 40))
        self.fourthInputOTP.setMaximumSize(QtCore.QSize(40, 40))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(15)
        self.fourthInputOTP.setFont(font)
        self.fourthInputOTP.setFont(QFont('raleway',14))
        self.fourthInputOTP.setStyleSheet("border: 2px solid black;\n"
"border-radius: 5px;")
        self.fourthInputOTP.setMaxLength(1)
        self.fourthInputOTP.setAlignment(QtCore.Qt.AlignCenter)
        self.fourthInputOTP.setObjectName("fourthInputOTP")
        self.horizontalLayout_22.addWidget(self.fourthInputOTP)
        self.fifthInputOTP = QtWidgets.QLineEdit(self.frameInputOTP)
        self.fifthInputOTP.setMinimumSize(QtCore.QSize(40, 40))
        self.fifthInputOTP.setMaximumSize(QtCore.QSize(40, 40))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(15)
        self.fifthInputOTP.setFont(font)
        self.fifthInputOTP.setFont(QFont('raleway',14))
        self.fifthInputOTP.setStyleSheet("border: 2px solid black;\n"
"border-radius: 5px;")
        self.fifthInputOTP.setMaxLength(1)
        self.fifthInputOTP.setAlignment(QtCore.Qt.AlignCenter)
        self.fifthInputOTP.setObjectName("fifthInputOTP")
        self.horizontalLayout_22.addWidget(self.fifthInputOTP)
        self.sixthInputOTP = QtWidgets.QLineEdit(self.frameInputOTP)
        self.sixthInputOTP.setMinimumSize(QtCore.QSize(40, 40))
        self.sixthInputOTP.setMaximumSize(QtCore.QSize(40, 40))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(15)
        self.sixthInputOTP.setFont(font)
        self.sixthInputOTP.setFont(QFont('raleway',14))
        self.sixthInputOTP.setStyleSheet("border: 2px solid black;\n"
"border-radius: 5px;")
        self.sixthInputOTP.setMaxLength(1)
        self.sixthInputOTP.setAlignment(QtCore.Qt.AlignCenter)
        self.sixthInputOTP.setObjectName("sixthInputOTP")
        self.horizontalLayout_22.addWidget(self.sixthInputOTP)
        self.verticalLayout_30.addWidget(self.frameInputOTP, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
        spacerItem16 = QtWidgets.QSpacerItem(20, 25, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_30.addItem(spacerItem16)
        self.verifyButtonOTP = QtWidgets.QPushButton(self.MainFrameOTP)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.verifyButtonOTP.setFont(QFont('raleway',12,100))
        self.verifyButtonOTP.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0.389831 rgba(151, 71, 255, 255), stop:1 rgba(209, 88, 248, 255));\n"
"padding: 10px 0px;\n"
"border-radius: 10px;\n"
"color: white;\n"
"margin-top: 20px;")
        self.verifyButtonOTP.setObjectName("verifyButtonOTP")

        self.verifyButtonOTP.clicked.connect(self.show_MainSW_Stack)


        self.verticalLayout_30.addWidget(self.verifyButtonOTP)
        self.resendCodeButtonOTP = QtWidgets.QPushButton(self.MainFrameOTP)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.resendCodeButtonOTP.setFont(QFont('raleway',12))
        self.resendCodeButtonOTP.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.resendCodeButtonOTP.setStyleSheet("background: transparent;\n"
        "margin-top: 10px;\n"
        "border: 2px solid black;\n"
        "border-radius: 10px;\n"
        "padding: 9px 0px;")
        self.resendCodeButtonOTP.setIconSize(QtCore.QSize(19, 19))
        self.resendCodeButtonOTP.setAutoRepeat(False)
        self.resendCodeButtonOTP.setAutoExclusive(False)
        self.resendCodeButtonOTP.setObjectName("resendCodeButtonOTP")
        self.verticalLayout_30.addWidget(self.resendCodeButtonOTP)
        # -----------------------------------------------------------------------
        self.backToSigninFromOTP = QtWidgets.QPushButton(self.MainFrameOTP)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.backToSigninFromOTP.setFont(QFont('raleway',12))
        self.backToSigninFromOTP.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.backToSigninFromOTP.setStyleSheet("background: transparent;\n"
        "margin-top: 10px;\n"
        "border: 2px solid black;\n"
        "border-radius: 10px;\n"
        "padding: 9px 0px;")
        self.backToSigninFromOTP.setIconSize(QtCore.QSize(19, 19))
        self.backToSigninFromOTP.setAutoRepeat(False)
        self.backToSigninFromOTP.setAutoExclusive(False)
        self.backToSigninFromOTP.setObjectName("backToSigninFromOTP")

        self.backToSigninFromOTP.clicked.connect(self.Back_Login_From_OTP)

        self.verticalLayout_30.addWidget(self.backToSigninFromOTP)
        # -----------------------------------------------------------------------
        spacerItem17 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_30.addItem(spacerItem17)
        self.horizontalLayout_21.addWidget(self.MainFrameOTP, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout_31.addWidget(self.MainWidgetOTP)
        self.outsideMainStackWidget.addWidget(self.OTPPage)
        self.QRCodePage = QtWidgets.QWidget()
        self.QRCodePage.setObjectName("QRCodePage")
        self.verticalLayout_29 = QtWidgets.QVBoxLayout(self.QRCodePage)
        self.verticalLayout_29.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_29.setSpacing(0)
        self.verticalLayout_29.setObjectName("verticalLayout_29")
        self.MainWidgetQRCode = QtWidgets.QWidget(self.QRCodePage)
        self.MainWidgetQRCode.setMinimumSize(QtCore.QSize(0, 0))
        self.MainWidgetQRCode.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.MainWidgetQRCode.setAutoFillBackground(False)
        self.MainWidgetQRCode.setStyleSheet("background-image: url(C:/ZEUS_Media/LoginBackImg.png) no-repeat;\n"
"background-repeat: no-repeat;\n"
"background-position: center;")
        self.MainWidgetQRCode.setObjectName("MainWidgetQRCode")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.MainWidgetQRCode)
        self.horizontalLayout_17.setContentsMargins(-1, 20, -1, 40)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.MainFrameQRCode = QtWidgets.QFrame(self.MainWidgetQRCode)
        self.MainFrameQRCode.setMinimumSize(QtCore.QSize(600, 0))
        self.MainFrameQRCode.setMaximumSize(QtCore.QSize(600, 16777215))
        self.MainFrameQRCode.setStyleSheet("background: transparent;")
        self.MainFrameQRCode.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.MainFrameQRCode.setFrameShadow(QtWidgets.QFrame.Raised)
        self.MainFrameQRCode.setObjectName("MainFrameQRCode")
        self.verticalLayout_28 = QtWidgets.QVBoxLayout(self.MainFrameQRCode)
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.zeusLogoQRCode = QtWidgets.QLabel(self.MainFrameQRCode)
        self.zeusLogoQRCode.setMinimumSize(QtCore.QSize(0, 143))
        self.zeusLogoQRCode.setMaximumSize(QtCore.QSize(16777215, 143))
        self.zeusLogoQRCode.setStyleSheet("background: transparent;\n"
"background-image: url(C:/ZEUS_Media/LoginLogo.png);\n"
"background-repeat: no-repeat;\n"
" background-position: center;")
        self.zeusLogoQRCode.setLineWidth(0)
        self.zeusLogoQRCode.setText("")
        self.zeusLogoQRCode.setPixmap(QtGui.QPixmap("C:/ZEUS_Media/LoginLogo.png"))
        self.zeusLogoQRCode.setAlignment(QtCore.Qt.AlignCenter)
        self.zeusLogoQRCode.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.zeusLogoQRCode.setObjectName("zeusLogoQRCode")
        self.verticalLayout_28.addWidget(self.zeusLogoQRCode)
        self.mainHeadingQRCode = QtWidgets.QLabel(self.MainFrameQRCode)
        self.mainHeadingQRCode.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(27)
        font.setBold(False)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        # self.mainHeadingQRCode.setFont(font)

        self.mainHeadingQRCode.setFont(QFont('Artemus',30))
        self.mainHeadingQRCode.setStyleSheet("background: transparent;")
        self.mainHeadingQRCode.setAlignment(QtCore.Qt.AlignCenter)
        self.mainHeadingQRCode.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.mainHeadingQRCode.setObjectName("mainHeadingQRCode")
        self.verticalLayout_28.addWidget(self.mainHeadingQRCode)
        spacerItem18 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_28.addItem(spacerItem18)
        self.sectionOneWidgetQRCode = QtWidgets.QWidget(self.MainFrameQRCode)
        self.sectionOneWidgetQRCode.setMinimumSize(QtCore.QSize(0, 30))
        self.sectionOneWidgetQRCode.setMaximumSize(QtCore.QSize(16777215, 30))
        self.sectionOneWidgetQRCode.setObjectName("sectionOneWidgetQRCode")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.sectionOneWidgetQRCode)
        self.horizontalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_18.setSpacing(0)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        spacerItem19 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_18.addItem(spacerItem19)
        self.firstLabelSecondHeadingQRCode = QtWidgets.QLabel(self.sectionOneWidgetQRCode)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        # self.firstLabelSecondHeadingQRCode.setFont(font)
        self.firstLabelSecondHeadingQRCode.setFont(QFont('raleway',15))

        self.firstLabelSecondHeadingQRCode.setObjectName("firstLabelSecondHeadingQRCode")
        self.horizontalLayout_18.addWidget(self.firstLabelSecondHeadingQRCode)
        self.secondLabelSecondHeadingQRCode = QtWidgets.QLabel(self.sectionOneWidgetQRCode)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        font.setBold(True)
        font.setUnderline(True)
        # self.secondLabelSecondHeadingQRCode.setFont(font)
        self.secondLabelSecondHeadingQRCode.setFont(QFont('Raleway-Bold',15,500))

        self.secondLabelSecondHeadingQRCode.setStyleSheet("color:rgb(209, 88, 248);")
        self.secondLabelSecondHeadingQRCode.setObjectName("secondLabelSecondHeadingQRCode")
        self.horizontalLayout_18.addWidget(self.secondLabelSecondHeadingQRCode)
        self.thirdLabelSecondHeadingQRCode = QtWidgets.QLabel(self.sectionOneWidgetQRCode)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        # self.thirdLabelSecondHeadingQRCode.setFont(font)
        self.thirdLabelSecondHeadingQRCode.setFont(QFont('raleway',15))

        self.thirdLabelSecondHeadingQRCode.setObjectName("thirdLabelSecondHeadingQRCode")
        self.horizontalLayout_18.addWidget(self.thirdLabelSecondHeadingQRCode)
        spacerItem20 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_18.addItem(spacerItem20)
        self.verticalLayout_28.addWidget(self.sectionOneWidgetQRCode)
        spacerItem21 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_28.addItem(spacerItem21)
        self.sectionTwoFrameQRCode = QtWidgets.QFrame(self.MainFrameQRCode)
        self.sectionTwoFrameQRCode.setMinimumSize(QtCore.QSize(300, 300))
        self.sectionTwoFrameQRCode.setMaximumSize(QtCore.QSize(300, 300))
        self.sectionTwoFrameQRCode.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.sectionTwoFrameQRCode.setFrameShadow(QtWidgets.QFrame.Raised)
        self.sectionTwoFrameQRCode.setObjectName("sectionTwoFrameQRCode")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout(self.sectionTwoFrameQRCode)
        self.horizontalLayout_19.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_19.setSpacing(0)
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.qrImageQRCode = QtWidgets.QLabel(self.sectionTwoFrameQRCode)
        # self.qrImageQRCode.setText("")
        # self.qrImageQRCode.setPixmap(QtGui.QPixmap("../Other Projects/pythonSoftwareExp/transparentBackground/fakeQR.png"))
        # self.qrImageQRCode.setScaledContents(True)
        # self.qrImageQRCode.setAlignment(QtCore.Qt.AlignCenter)
        self.qrImageQRCode.setObjectName("qrImageQRCode")
        self.horizontalLayout_19.addWidget(self.qrImageQRCode)
        self.verticalLayout_28.addWidget(self.sectionTwoFrameQRCode, 0, QtCore.Qt.AlignHCenter)
        self.sectionThreeFrameQRCode = QtWidgets.QFrame(self.MainFrameQRCode)
        self.sectionThreeFrameQRCode.setMinimumSize(QtCore.QSize(400, 50))
        self.sectionThreeFrameQRCode.setMaximumSize(QtCore.QSize(400, 50))
        self.sectionThreeFrameQRCode.setStyleSheet("")
        self.sectionThreeFrameQRCode.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.sectionThreeFrameQRCode.setFrameShadow(QtWidgets.QFrame.Raised)
        self.sectionThreeFrameQRCode.setObjectName("sectionThreeFrameQRCode")
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout(self.sectionThreeFrameQRCode)
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.backToSIgnInButtonQRCode = QtWidgets.QPushButton(self.sectionThreeFrameQRCode)
        self.backToSIgnInButtonQRCode.setStyleSheet("background-color: transparent;\n"
"border: none;")
        self.backToSIgnInButtonQRCode.setObjectName("backToSIgnInButtonQRCode")
        self.backToSIgnInButtonQRCode.setFont(QFont('raleway',15))




        self.horizontalLayout_20.addWidget(self.backToSIgnInButtonQRCode, 0, QtCore.Qt.AlignLeft)
        self.counterQRCode = QtWidgets.QLabel(self.sectionThreeFrameQRCode)
        self.counterQRCode.setObjectName("counterQRCode")
        self.counterQRCode.setFont(QFont('raleway',15))

        # ------------------------------------------------------
        self.counter = 30  # Initial counter value in seconds
        self.timer = QTimer(self.counterQRCode)
        self.timer.timeout.connect(self.update_counter)
        self.timer.start(1000)  # Update counter every second

        self.generate_qr_code()
        # ------------------------------------------------------
        self.horizontalLayout_20.addWidget(self.counterQRCode, 0, QtCore.Qt.AlignRight)
        self.verticalLayout_28.addWidget(self.sectionThreeFrameQRCode, 0, QtCore.Qt.AlignHCenter)
        spacerItem22 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_28.addItem(spacerItem22)
        self.horizontalLayout_17.addWidget(self.MainFrameQRCode)
        self.verticalLayout_29.addWidget(self.MainWidgetQRCode)
        self.outsideMainStackWidget.addWidget(self.QRCodePage)
        self.ForgotPasswordPage = QtWidgets.QWidget()
        self.ForgotPasswordPage.setObjectName("ForgotPasswordPage")
        self.verticalLayout_33 = QtWidgets.QVBoxLayout(self.ForgotPasswordPage)
        self.verticalLayout_33.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_33.setSpacing(0)
        self.verticalLayout_33.setObjectName("verticalLayout_33")
        self.MainWidgetFotgotPass = QtWidgets.QWidget(self.ForgotPasswordPage)
        self.MainWidgetFotgotPass.setMinimumSize(QtCore.QSize(0, 0))
        self.MainWidgetFotgotPass.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.MainWidgetFotgotPass.setAutoFillBackground(False)
        self.MainWidgetFotgotPass.setStyleSheet("background-image: url(C:/ZEUS_Media/LoginBackImg.png) no-repeat;\n"
"background-repeat: no-repeat;\n"
"background-position: center;")
        self.MainWidgetFotgotPass.setObjectName("MainWidgetFotgotPass")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout(self.MainWidgetFotgotPass)
        self.horizontalLayout_23.setContentsMargins(-1, 20, -1, 40)
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.MainFrameFotgotPass = QtWidgets.QFrame(self.MainWidgetFotgotPass)
        self.MainFrameFotgotPass.setMinimumSize(QtCore.QSize(800, 0))
        self.MainFrameFotgotPass.setMaximumSize(QtCore.QSize(800, 16777215))
        self.MainFrameFotgotPass.setStyleSheet("background: transparent;")
        self.MainFrameFotgotPass.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.MainFrameFotgotPass.setFrameShadow(QtWidgets.QFrame.Raised)
        self.MainFrameFotgotPass.setObjectName("MainFrameFotgotPass")
        self.verticalLayout_32 = QtWidgets.QVBoxLayout(self.MainFrameFotgotPass)
        self.verticalLayout_32.setObjectName("verticalLayout_32")
        self.zeusLogoForgotPass = QtWidgets.QLabel(self.MainFrameFotgotPass)
        self.zeusLogoForgotPass.setMinimumSize(QtCore.QSize(0, 143))
        self.zeusLogoForgotPass.setMaximumSize(QtCore.QSize(16777215, 143))
        self.zeusLogoForgotPass.setStyleSheet("background: transparent;\n"
"background-image: url(C:/ZEUS_Media/LoginLogo.png);\n"
"background-repeat: no-repeat;\n"
" background-position: center;")
        self.zeusLogoForgotPass.setLineWidth(0)
        self.zeusLogoForgotPass.setText("")
        self.zeusLogoForgotPass.setPixmap(QtGui.QPixmap(r'C:/ZEUS_Media/LoginLogo.png'))
        self.zeusLogoForgotPass.setAlignment(QtCore.Qt.AlignCenter)
        self.zeusLogoForgotPass.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.zeusLogoForgotPass.setObjectName("zeusLogoForgotPass")
        self.verticalLayout_32.addWidget(self.zeusLogoForgotPass)
        self.headingLabelForgotPass = QtWidgets.QLabel(self.MainFrameFotgotPass)
        self.headingLabelForgotPass.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(27)
        font.setBold(False)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.headingLabelForgotPass.setFont(QFont('Artemus',35))
        self.headingLabelForgotPass.setStyleSheet("background: transparent;")
        self.headingLabelForgotPass.setAlignment(QtCore.Qt.AlignCenter)
        self.headingLabelForgotPass.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.headingLabelForgotPass.setObjectName("headingLabelForgotPass")
        self.verticalLayout_32.addWidget(self.headingLabelForgotPass)
        self.secondMainLabelForgotPass = QtWidgets.QLabel(self.MainFrameFotgotPass)
        self.secondMainLabelForgotPass.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        self.secondMainLabelForgotPass.setFont(QFont('raleway',14))
        self.secondMainLabelForgotPass.setStyleSheet("background: transparent;")
        self.secondMainLabelForgotPass.setAlignment(QtCore.Qt.AlignCenter)
        self.secondMainLabelForgotPass.setObjectName("secondMainLabelForgotPass")
        self.verticalLayout_32.addWidget(self.secondMainLabelForgotPass)
        spacerItem23 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_32.addItem(spacerItem23)
        self.emailLabelForgotPass = QtWidgets.QLabel(self.MainFrameFotgotPass)
        self.emailLabelForgotPass.setMinimumSize(QtCore.QSize(0, 50))
        self.emailLabelForgotPass.setMaximumSize(QtCore.QSize(16777215, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.emailLabelForgotPass.setFont(QFont('raleway',13))
        self.emailLabelForgotPass.setStyleSheet("background: transparent;")
        self.emailLabelForgotPass.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.emailLabelForgotPass.setObjectName("emailLabelForgotPass")
        self.verticalLayout_32.addWidget(self.emailLabelForgotPass)
        self.emailInputForgotPass = QtWidgets.QLineEdit(self.MainFrameFotgotPass)
        self.emailInputForgotPass.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.emailInputForgotPass.setFont(font)
        self.emailInputForgotPass.setFont(QFont('raleway',14))
        self.emailInputForgotPass.setStyleSheet("background: transparent;\n"
"border: none;\n"
"border-bottom: 2px solid black;")
        self.emailInputForgotPass.setObjectName("emailInputForgotPass")
        self.verticalLayout_32.addWidget(self.emailInputForgotPass)
        self.sendButtonForgotPass = QtWidgets.QPushButton(self.MainFrameFotgotPass)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.sendButtonForgotPass.setFont(QFont('raleway',12,100))
        self.sendButtonForgotPass.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0.389831 rgba(151, 71, 255, 255), stop:1 rgba(209, 88, 248, 255));\n"
"padding: 10px 0px;\n"
"border-radius: 10px;\n"
"color: white;\n"
"margin-top: 40px;")
        self.sendButtonForgotPass.setObjectName("sendButtonForgotPass")
        self.sendButtonForgotPass.clicked.connect(self.Forgot_Link_Send)

        self.verticalLayout_32.addWidget(self.sendButtonForgotPass)
        spacerItem24 = QtWidgets.QSpacerItem(20, 30, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_32.addItem(spacerItem24)
        self.backToSignInWidgetForgotPass = QtWidgets.QWidget(self.MainFrameFotgotPass)
        self.backToSignInWidgetForgotPass.setMaximumSize(QtCore.QSize(16777215, 30))
        self.backToSignInWidgetForgotPass.setObjectName("backToSignInWidgetForgotPass")
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout(self.backToSignInWidgetForgotPass)
        self.horizontalLayout_24.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_24.setSpacing(0)
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        spacerItem25 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_24.addItem(spacerItem25)
        self.backToForgotPass = QtWidgets.QLabel(self.backToSignInWidgetForgotPass)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        self.backToForgotPass.setFont(QFont('raleway',12))
        self.backToForgotPass.setObjectName("backToForgotPass")
        self.horizontalLayout_24.addWidget(self.backToForgotPass)
        self.backToSignInButtonForgotPass = QtWidgets.QPushButton(self.backToSignInWidgetForgotPass)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        font.setBold(True)
        self.backToSignInButtonForgotPass.setFont(QFont('raleway',12,100))
        self.backToSignInButtonForgotPass.setStyleSheet("border:none;\n"
"background:transparent;")
        self.backToSignInButtonForgotPass.setObjectName("backToSignInButtonForgotPass")
        self.backToSignInButtonForgotPass.clicked.connect(self.show_Login_Stack)

        self.horizontalLayout_24.addWidget(self.backToSignInButtonForgotPass)
        spacerItem26 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_24.addItem(spacerItem26)
        self.verticalLayout_32.addWidget(self.backToSignInWidgetForgotPass)
        spacerItem27 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_32.addItem(spacerItem27)
        self.horizontalLayout_23.addWidget(self.MainFrameFotgotPass)
        self.verticalLayout_33.addWidget(self.MainWidgetFotgotPass)
        self.outsideMainStackWidget.addWidget(self.ForgotPasswordPage)

        # -------------------------group id---------------------------------------------------
        self.GroupID = QtWidgets.QWidget()
        self.GroupID.setObjectName("GroupID")
        self.verticalLayout_41_GroupID = QtWidgets.QVBoxLayout(self.GroupID)
        self.verticalLayout_41_GroupID.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_41_GroupID.setSpacing(0)
        self.verticalLayout_41_GroupID.setObjectName("verticalLayout_41_GroupID")
        self.widget_7_GroupID = QtWidgets.QWidget(self.GroupID)
        self.widget_7_GroupID.setMinimumSize(QtCore.QSize(0, 0))
        self.widget_7_GroupID.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.widget_7_GroupID.setAutoFillBackground(False)
        self.widget_7_GroupID.setStyleSheet("background-image: url(C:/ZEUS_Media/LoginBackImg.png) no-repeat;\n"
        "background-repeat: no-repeat;\n"
        "background-position: center;")
        self.widget_7_GroupID.setObjectName("widget_7_GroupID")
        self.horizontalLayout_32_GroupID = QtWidgets.QHBoxLayout(self.widget_7_GroupID)
        self.horizontalLayout_32_GroupID.setContentsMargins(-1, 20, -1, 40)
        self.horizontalLayout_32_GroupID.setObjectName("horizontalLayout_32_GroupID")
        self.frame_GroupID = QtWidgets.QFrame(self.widget_7_GroupID)
        self.frame_GroupID.setMinimumSize(QtCore.QSize(800, 0))
        self.frame_GroupID.setMaximumSize(QtCore.QSize(800, 16777215))
        self.frame_GroupID.setStyleSheet("background: transparent;")
        self.frame_GroupID.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_GroupID.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_GroupID.setObjectName("frame_GroupID")
        self.verticalLayout_40_GroupID = QtWidgets.QVBoxLayout(self.frame_GroupID)
        self.verticalLayout_40_GroupID.setObjectName("verticalLayout_40_GroupID")
        self.label_GroupID = QtWidgets.QLabel(self.frame_GroupID)
        self.label_GroupID.setMaximumSize(QtCore.QSize(16777215, 143))
        self.label_GroupID.setStyleSheet("background: transparent;\n"
"background-image: url(C:/ZEUS_Media/LoginLogo.png);\n"
"background-repeat: no-repeat;\n"
" background-position: center;")
        self.label_GroupID.setLineWidth(0)
        self.label_GroupID.setText("")
        self.label_GroupID.setPixmap(QtGui.QPixmap(r"C:/ZEUS_Media/LoginLogo.png"))
        self.label_GroupID.setAlignment(QtCore.Qt.AlignCenter)
        self.label_GroupID.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_GroupID.setObjectName("label_GroupID")
        self.verticalLayout_40_GroupID.addWidget(self.label_GroupID)
        self.label_2_GroupID = QtWidgets.QLabel(self.frame_GroupID)
        self.label_2_GroupID.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(27)
        font.setBold(False)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.label_2_GroupID.setFont(QFont('Artemus',35))
        self.label_2_GroupID.setStyleSheet("background: transparent;")
        self.label_2_GroupID.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2_GroupID.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_2_GroupID.setObjectName("label_2_GroupID")
        self.verticalLayout_40_GroupID.addWidget(self.label_2_GroupID)
        self.label_5_GroupID = QtWidgets.QLabel(self.frame_GroupID)
        self.label_5_GroupID.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        self.label_5_GroupID.setFont(QFont('raleway', 14))
        self.label_5_GroupID.setStyleSheet("background: transparent;")
        self.label_5_GroupID.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5_GroupID.setObjectName("label_5_GroupID")
        self.verticalLayout_40_GroupID.addWidget(self.label_5_GroupID)
        self.label_3_GroupID = QtWidgets.QLabel(self.frame_GroupID)
        self.label_3_GroupID.setMaximumSize(QtCore.QSize(16777215, 70))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(13)
        self.label_3_GroupID.setFont(QFont('raleway', 14))
        self.label_3_GroupID.setStyleSheet("background: transparent;")
        self.label_3_GroupID.setObjectName("label_3_GroupID")
        self.verticalLayout_40_GroupID.addWidget(self.label_3_GroupID, 0, QtCore.Qt.AlignHCenter)
        self.label_4_GroupID = QtWidgets.QLabel(self.frame_GroupID)
        self.label_4_GroupID.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(13)
        font.setBold(False)
        self.label_4_GroupID.setFont(QFont('raleway', 13))
        self.label_4_GroupID.setStyleSheet("background: transparent;")
        self.label_4_GroupID.setObjectName("label_4_GroupID")
        self.verticalLayout_40_GroupID.addWidget(self.label_4_GroupID)
        self.lineEdit_2_GroupID = QtWidgets.QLineEdit(self.frame_GroupID)
        self.lineEdit_2_GroupID.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.lineEdit_2_GroupID.setFont(QFont('raleway', 12))
        self.lineEdit_2_GroupID.setStyleSheet("background: transparent;\n"
        "border: none;\n"
        "border-bottom: 2px solid black;")
        # self.lineEdit_2_GroupID.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_2_GroupID.setObjectName("lineEdit_2_GroupID")
        self.verticalLayout_40_GroupID.addWidget(self.lineEdit_2_GroupID)
        self.pushButton_2_GroupID = QtWidgets.QPushButton(self.frame_GroupID)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.pushButton_2_GroupID.setFont(QFont('raleway', 12,100))
        self.pushButton_2_GroupID.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0.389831 rgba(151, 71, 255, 255), stop:1 rgba(209, 88, 248, 255));\n"
        "padding: 10px 0px;\n"
        "border-radius: 10px;\n"
        "color: white;\n"
        "margin-top: 20px;")
        self.pushButton_2_GroupID.setObjectName("pushButton_2_GroupID")

        self.pushButton_2_GroupID.clicked.connect(self.show_Group_info_stack)

        self.verticalLayout_40_GroupID.addWidget(self.pushButton_2_GroupID)
        self.pushButton_3_GroupID = QtWidgets.QPushButton(self.frame_GroupID)
        self.pushButton_3_GroupID.setMinimumSize(QtCore.QSize(0, 0))
        self.pushButton_3_GroupID.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pushButton_3_GroupID.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pushButton_3_GroupID.setStyleSheet("background: white;\n"
        "border: 2px solid #D158F8;\n"
        "border-radius: 10px;\n"
        "padding: 10px 0px;")
        self.pushButton_3_GroupID.setIconSize(QtCore.QSize(19, 19))
        self.pushButton_3_GroupID.setAutoRepeat(False)
        self.pushButton_3_GroupID.setFont(QFont('raleway', 12,100))

        self.pushButton_3_GroupID.setAutoExclusive(False)
        self.pushButton_3_GroupID.setObjectName("pushButton_3_GroupID")

        self.pushButton_3_GroupID.clicked.connect(self.show_Login_Stack)

        self.verticalLayout_40_GroupID.addWidget(self.pushButton_3_GroupID)
        spacerItem29 = QtWidgets.QSpacerItem(20, 100, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_40_GroupID.addItem(spacerItem29)
        self.horizontalLayout_32_GroupID.addWidget(self.frame_GroupID)
        self.verticalLayout_41_GroupID.addWidget(self.widget_7_GroupID)
        self.outsideMainStackWidget.addWidget(self.GroupID)
        # --------------------------------------------------------------------------------------
        self.button_custom_click = QPushButton("Click me")
        self.button_custom_click.clicked.connect(self.show_mainSW_after_QR_login)
        # ---group info-----------------------------------------------------------------------------------
        self.GroupInfo = QtWidgets.QWidget()
        self.GroupInfo.setObjectName("GroupInfo")
        self.verticalLayout_43_GroupInfo = QtWidgets.QVBoxLayout(self.GroupInfo)
        self.verticalLayout_43_GroupInfo.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_43_GroupInfo.setSpacing(0)
        self.verticalLayout_43_GroupInfo.setObjectName("verticalLayout_43_GroupInfo")
        self.widget_8_GroupInfo = QtWidgets.QWidget(self.GroupInfo)
        self.widget_8_GroupInfo.setMinimumSize(QtCore.QSize(0, 0))
        self.widget_8_GroupInfo.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.widget_8_GroupInfo.setAutoFillBackground(False)
        self.widget_8_GroupInfo.setStyleSheet(
        "background-image: url(C:/ZEUS_Media/LoginBackImg.png) no-repeat;\n"
        "background-repeat: no-repeat;\n"
        "background-position: center;")
        self.widget_8_GroupInfo.setObjectName("widget_8_GroupInfo")
        self.horizontalLayout_33_GroupInfo = QtWidgets.QHBoxLayout(self.widget_8_GroupInfo)
        self.horizontalLayout_33_GroupInfo.setContentsMargins(-1, 20, -1, 40)
        self.horizontalLayout_33_GroupInfo.setObjectName("horizontalLayout_33_GroupInfo")
        self.frame_2_GroupInfo = QtWidgets.QFrame(self.widget_8_GroupInfo)
        self.frame_2_GroupInfo.setMinimumSize(QtCore.QSize(800, 0))
        self.frame_2_GroupInfo.setMaximumSize(QtCore.QSize(800, 16777215))
        self.frame_2_GroupInfo.setStyleSheet("background: transparent;")
        self.frame_2_GroupInfo.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2_GroupInfo.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2_GroupInfo.setObjectName("frame_2_GroupInfo")
        self.verticalLayout_42_GroupInfo = QtWidgets.QVBoxLayout(self.frame_2_GroupInfo)
        self.verticalLayout_42_GroupInfo.setObjectName("verticalLayout_42_GroupInfo")
        self.label_6_GroupInfo = QtWidgets.QLabel(self.frame_2_GroupInfo)
        self.label_6_GroupInfo.setMaximumSize(QtCore.QSize(16777215, 143))
        self.label_6_GroupInfo.setStyleSheet("background: transparent;\n"
"background-image: url(C:/ZEUS_Media/LoginLogo.png);\n"
"background-repeat: no-repeat;\n"
" background-position: center;")
        self.label_6_GroupInfo.setLineWidth(0)
        self.label_6_GroupInfo.setText("")
        self.label_6_GroupInfo.setPixmap(QtGui.QPixmap(r"C:/ZEUS_Media/LoginLogo.png"))
        self.label_6_GroupInfo.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6_GroupInfo.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_6_GroupInfo.setObjectName("label_6_GroupInfo")
        self.verticalLayout_42_GroupInfo.addWidget(self.label_6_GroupInfo)
        self.label_7_GroupInfo = QtWidgets.QLabel(self.frame_2_GroupInfo)
        self.label_7_GroupInfo.setMaximumSize(QtCore.QSize(16777215, 60))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(27)
        font.setBold(False)
        font.setStrikeOut(False)
        font.setStyleStrategy(QtGui.QFont.PreferDefault)
        self.label_7_GroupInfo.setFont(QFont('Artemus',35))
        self.label_7_GroupInfo.setStyleSheet("background: transparent;")
        self.label_7_GroupInfo.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7_GroupInfo.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_7_GroupInfo.setObjectName("label_7_GroupInfo")
        self.verticalLayout_42_GroupInfo.addWidget(self.label_7_GroupInfo)
        self.label_8_GroupInfo = QtWidgets.QLabel(self.frame_2_GroupInfo)
        self.label_8_GroupInfo.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        self.label_8_GroupInfo.setFont(QFont('raleway', 14))
        self.label_8_GroupInfo.setStyleSheet("background: transparent;")
        self.label_8_GroupInfo.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8_GroupInfo.setObjectName("label_8_GroupInfo")
        self.verticalLayout_42_GroupInfo.addWidget(self.label_8_GroupInfo)
        self.label_9_GroupInfo = QtWidgets.QLabel(self.frame_2_GroupInfo)
        self.label_9_GroupInfo.setMaximumSize(QtCore.QSize(16777215, 70))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_9_GroupInfo.setFont(QFont('raleway', 13))
        self.label_9_GroupInfo.setStyleSheet("background: transparent;")
        self.label_9_GroupInfo.setObjectName("label_9_GroupInfo")
        self.verticalLayout_42_GroupInfo.addWidget(self.label_9_GroupInfo)
        self.comboBox_GroupInfo = QtWidgets.QComboBox(self.frame_2_GroupInfo)
        self.comboBox_GroupInfo.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.comboBox_GroupInfo.setFont(QFont('raleway', 12))
        self.comboBox_GroupInfo.setFocusPolicy(QtCore.Qt.NoFocus)
        self.comboBox_GroupInfo.setStyleSheet("QComboBox{\n"
"border-top:none;\n"
"border-left:none;\n"
"border-right:none;\n"
"border-bottom: 2px solid black;\n"
"background: transparent;\n"
"background-color: transparent;\n"
"}\n"
"QListView {\n"
"background-color: white;\n"
"}")
        self.comboBox_GroupInfo.setObjectName("comboBox_GroupInfo")
        # self.comboBox_GroupInfo.addItem("one")
        # self.comboBox_GroupInfo.addItem("two")
        # self.comboBox_GroupInfo.addItem("")
        self.verticalLayout_42_GroupInfo.addWidget(self.comboBox_GroupInfo)
        self.label_10_GroupInfo = QtWidgets.QLabel(self.frame_2_GroupInfo)
        self.label_10_GroupInfo.setMaximumSize(QtCore.QSize(16777215, 70))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_10_GroupInfo.setFont(QFont('raleway', 13))
        self.label_10_GroupInfo.setStyleSheet("background: transparent;")
        self.label_10_GroupInfo.setObjectName("label_10_GroupInfo")
        self.verticalLayout_42_GroupInfo.addWidget(self.label_10_GroupInfo)
        self.lineEdit_3_GroupInfo = QtWidgets.QLineEdit(self.frame_2_GroupInfo)
        self.lineEdit_3_GroupInfo.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.lineEdit_3_GroupInfo.setFont(QFont('raleway', 12))
        self.lineEdit_3_GroupInfo.setStyleSheet("background: transparent;\n"
"border: none;\n"
"border-bottom: 2px solid black;")
        self.lineEdit_3_GroupInfo.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_3_GroupInfo.setObjectName("lineEdit_3_GroupInfo")
        self.verticalLayout_42_GroupInfo.addWidget(self.lineEdit_3_GroupInfo)
        self.frame_3_GroupInfo = QtWidgets.QFrame(self.frame_2_GroupInfo)
        self.frame_3_GroupInfo.setMinimumSize(QtCore.QSize(0, 30))
        self.frame_3_GroupInfo.setMaximumSize(QtCore.QSize(16777215, 30))
        self.frame_3_GroupInfo.setStyleSheet("")
        self.frame_3_GroupInfo.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_3_GroupInfo.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3_GroupInfo.setObjectName("frame_3_GroupInfo")
        self.horizontalLayout_34_GroupInfo = QtWidgets.QHBoxLayout(self.frame_3_GroupInfo)
        self.horizontalLayout_34_GroupInfo.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_34_GroupInfo.setSpacing(0)
        self.horizontalLayout_34_GroupInfo.setObjectName("horizontalLayout_34_GroupInfo")
        self.pushButton_GroupInfo = QtWidgets.QPushButton(self.frame_3_GroupInfo)
        self.pushButton_GroupInfo.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton_GroupInfo.setMaximumSize(QtCore.QSize(16777215, 30))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        self.pushButton_GroupInfo.setFont(QFont('raleway', 13))
        self.pushButton_GroupInfo.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton_GroupInfo.setStyleSheet("background-color: transparent;\n"
        "border: none;")
        self.pushButton_GroupInfo.clicked.connect(self.show_ForgotPass_Stack)
        self.pushButton_GroupInfo.setObjectName("pushButton_GroupInfo")
        self.horizontalLayout_34_GroupInfo.addWidget(self.pushButton_GroupInfo)
        self.verticalLayout_42_GroupInfo.addWidget(self.frame_3_GroupInfo, 0, QtCore.Qt.AlignRight)
        self.pushButton_4_GroupInfo = QtWidgets.QPushButton(self.frame_2_GroupInfo)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.pushButton_4_GroupInfo.setFont(QFont('raleway',12,100))
        self.pushButton_4_GroupInfo.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0.389831 rgba(151, 71, 255, 255), stop:1 rgba(209, 88, 248, 255));\n"
        "padding: 10px 0px;\n"
        "border-radius: 10px;\n"
        "color: white;\n"
        "margin-top: 20px;")
        self.pushButton_4_GroupInfo.setObjectName("pushButton_4_GroupInfo")

        # self.pushButton_4_GroupInfo.clicked.connect(self.check_def)
        self.pushButton_4_GroupInfo.clicked.connect(self.show_otpVerify_Stack_after_GroupInfo)

        self.verticalLayout_42_GroupInfo.addWidget(self.pushButton_4_GroupInfo)
        self.pushButton_5_GroupInfo = QtWidgets.QPushButton(self.frame_2_GroupInfo)
        self.pushButton_5_GroupInfo.setFont(QFont('raleway',12,100))
        
        self.pushButton_5_GroupInfo.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.pushButton_5_GroupInfo.setStyleSheet("background: transparent;\n"
        "margin-top: 50px;")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\qrSignInSmall.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton_5_GroupInfo.setIcon(icon9)
        self.pushButton_5_GroupInfo.setIconSize(QtCore.QSize(19, 19))
        self.pushButton_5_GroupInfo.setAutoRepeat(False)
        self.pushButton_5_GroupInfo.setAutoExclusive(False)
        self.pushButton_5_GroupInfo.setObjectName("pushButton_5_GroupInfo")

        self.pushButton_5_GroupInfo.clicked.connect(lambda state, path="from group login" :self.show_QRCode_Stack(path))

        self.verticalLayout_42_GroupInfo.addWidget(self.pushButton_5_GroupInfo)
        self.frame_4_GroupInfo = QtWidgets.QFrame(self.frame_2_GroupInfo)
        self.frame_4_GroupInfo.setMinimumSize(QtCore.QSize(0, 80))
        self.frame_4_GroupInfo.setMaximumSize(QtCore.QSize(16777215, 80))
        self.frame_4_GroupInfo.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4_GroupInfo.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4_GroupInfo.setObjectName("frame_4_GroupInfo")
        self.horizontalLayout_35_GroupInfo = QtWidgets.QHBoxLayout(self.frame_4_GroupInfo)
        self.horizontalLayout_35_GroupInfo.setObjectName("horizontalLayout_35_GroupInfo")
        self.label_15_GroupInfo = QtWidgets.QLabel(self.frame_4_GroupInfo)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        self.label_15_GroupInfo.setFont(QFont('raleway', 12))
        self.label_15_GroupInfo.setObjectName("label_15_GroupInfo")
        self.horizontalLayout_35_GroupInfo.addWidget(self.label_15_GroupInfo, 0, QtCore.Qt.AlignVCenter)
        self.pushButton_6_GroupInfo = QtWidgets.QPushButton(self.frame_4_GroupInfo)
        self.pushButton_6_GroupInfo.setFont(QFont('raleway', 12,100))
        self.pushButton_6_GroupInfo.setStyleSheet("#pushButton_6_GroupInfo {\n"
        "border: none;\n"
        "background: transparent;\n"
        "color: #D158F8;\n"
        "text-decoration: underline;\n"
        "}")
        self.pushButton_6_GroupInfo.setObjectName("pushButton_6_GroupInfo")
        self.pushButton_6_GroupInfo.clicked.connect(self.show_Login_Stack)

        self.horizontalLayout_35_GroupInfo.addWidget(self.pushButton_6_GroupInfo)
        self.verticalLayout_42_GroupInfo.addWidget(self.frame_4_GroupInfo, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout_33_GroupInfo.addWidget(self.frame_2_GroupInfo)
        self.verticalLayout_43_GroupInfo.addWidget(self.widget_8_GroupInfo)
        
        self.outsideMainStackWidget.addWidget(self.GroupInfo)
        # --------------------------------------------------------------------------------------

        # ----------------------FirstPageForPC--------------------------------------------------

        self.FirstPageForPC = QtWidgets.QWidget()
        self.FirstPageForPC.setObjectName("FirstPageForPC")
        self.verticalLayout_45_FirstPageForPC = QtWidgets.QVBoxLayout(self.FirstPageForPC)
        self.verticalLayout_45_FirstPageForPC.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_45_FirstPageForPC.setSpacing(0)
        self.verticalLayout_45_FirstPageForPC.setObjectName("verticalLayout_45_FirstPageForPC")

        self.widget_10_FirstPageForPC = QtWidgets.QWidget(self.FirstPageForPC)
        self.widget_10_FirstPageForPC.setMinimumSize(QtCore.QSize(0, 0))
        self.widget_10_FirstPageForPC.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.widget_10_FirstPageForPC.setAutoFillBackground(False)
        self.widget_10_FirstPageForPC.setStyleSheet("background-image: url(C:/ZEUS_Media/LoginBackImg.png) no-repeat;\n"
"background-repeat: no-repeat;\n"
"background-position: center;")
        self.widget_10_FirstPageForPC.setObjectName("widget_10_FirstPageForPC")
        self.horizontalLayout_36_FirstPageForPC = QtWidgets.QHBoxLayout(self.widget_10_FirstPageForPC)
        self.horizontalLayout_36_FirstPageForPC.setContentsMargins(-1, 20, -1, 40)
        self.horizontalLayout_36_FirstPageForPC.setObjectName("horizontalLayout_36_FirstPageForPC")
        self.frame_5_FirstPageForPC = QtWidgets.QFrame(self.widget_10_FirstPageForPC)
        self.frame_5_FirstPageForPC.setMinimumSize(QtCore.QSize(600, 0))
        self.frame_5_FirstPageForPC.setMaximumSize(QtCore.QSize(600, 16777215))
        self.frame_5_FirstPageForPC.setStyleSheet("background: transparent;")
        self.frame_5_FirstPageForPC.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5_FirstPageForPC.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5_FirstPageForPC.setObjectName("frame_5_FirstPageForPC")
        self.verticalLayout_44_FirstPageForPC = QtWidgets.QVBoxLayout(self.frame_5_FirstPageForPC)
        self.verticalLayout_44_FirstPageForPC.setObjectName("verticalLayout_44_FirstPageForPC")
        self.label_16_FirstPageForPC = QtWidgets.QLabel(self.frame_5_FirstPageForPC)
        self.label_16_FirstPageForPC.setMaximumSize(QtCore.QSize(16777215, 143))
        self.label_16_FirstPageForPC.setStyleSheet("background: transparent;\n"
"background-image: url(C:/ZEUS_Media/LoginLogo.png);\n"
"background-repeat: no-repeat;\n"
" background-position: center;")
        self.label_16_FirstPageForPC.setLineWidth(0)
        self.label_16_FirstPageForPC.setText("")
        self.label_16_FirstPageForPC.setPixmap(QtGui.QPixmap(r"C:/ZEUS_Media/LoginLogo.png"))
        self.label_16_FirstPageForPC.setAlignment(QtCore.Qt.AlignCenter)
        self.label_16_FirstPageForPC.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_16_FirstPageForPC.setObjectName("label_16_FirstPageForPC")
        self.verticalLayout_44_FirstPageForPC.addWidget(self.label_16_FirstPageForPC)
        self.label_17_FirstPageForPC = QtWidgets.QLabel(self.frame_5_FirstPageForPC)
        self.label_17_FirstPageForPC.setMaximumSize(QtCore.QSize(16777215, 60))
       
        self.label_17_FirstPageForPC.setFont(QFont('Artemus',35))
        self.label_17_FirstPageForPC.setStyleSheet("background: transparent;")
        self.label_17_FirstPageForPC.setAlignment(QtCore.Qt.AlignCenter)
        self.label_17_FirstPageForPC.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label_17_FirstPageForPC.setObjectName("label_17_FirstPageForPC")
        self.verticalLayout_44_FirstPageForPC.addWidget(self.label_17_FirstPageForPC)
        self.label_18_FirstPageForPC = QtWidgets.QLabel(self.frame_5_FirstPageForPC)
        self.label_18_FirstPageForPC.setMaximumSize(QtCore.QSize(16777215, 30))
 
        self.label_18_FirstPageForPC.setFont(QFont('raleway', 14))
        self.label_18_FirstPageForPC.setStyleSheet("background: transparent;")
        self.label_18_FirstPageForPC.setAlignment(QtCore.Qt.AlignCenter)
        self.label_18_FirstPageForPC.setObjectName("label_18_FirstPageForPC")
        self.verticalLayout_44_FirstPageForPC.addWidget(self.label_18_FirstPageForPC)
        self.label_19_FirstPageForPC = QtWidgets.QLabel(self.frame_5_FirstPageForPC)
        self.label_19_FirstPageForPC.setMaximumSize(QtCore.QSize(16777215, 70))

        self.label_19_FirstPageForPC.setFont(QFont('raleway', 13))
        self.label_19_FirstPageForPC.setStyleSheet("background: transparent;")
        self.label_19_FirstPageForPC.setObjectName("label_19_FirstPageForPC")
        self.verticalLayout_44_FirstPageForPC.addWidget(self.label_19_FirstPageForPC)
        self.lineEdit_FirstPageForPC = QtWidgets.QLineEdit(self.frame_5_FirstPageForPC)
        self.lineEdit_FirstPageForPC.setMinimumSize(QtCore.QSize(0, 30))
    
        self.lineEdit_FirstPageForPC.setFont(QFont('raleway', 12))
        self.lineEdit_FirstPageForPC.setStyleSheet("background: transparent;\n"
"border: none;\n"
"border-bottom: 2px solid black;")
        self.lineEdit_FirstPageForPC.setObjectName("lineEdit_FirstPageForPC")
        self.verticalLayout_44_FirstPageForPC.addWidget(self.lineEdit_FirstPageForPC)
        self.label_20_FirstPageForPC = QtWidgets.QLabel(self.frame_5_FirstPageForPC)
        self.label_20_FirstPageForPC.setMaximumSize(QtCore.QSize(16777215, 70))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_20_FirstPageForPC.setFont(QFont('raleway', 13))
        self.label_20_FirstPageForPC.setStyleSheet("background: transparent;")
        self.label_20_FirstPageForPC.setObjectName("label_20_FirstPageForPC")
        self.verticalLayout_44_FirstPageForPC.addWidget(self.label_20_FirstPageForPC)
        self.lineEdit_4_FirstPageForPC = QtWidgets.QLineEdit(self.frame_5_FirstPageForPC)
        self.lineEdit_4_FirstPageForPC.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.lineEdit_4_FirstPageForPC.setFont(QFont('raleway', 12))
        self.lineEdit_4_FirstPageForPC.setStyleSheet("background: transparent;\n"
        "border: none;\n"
        "border-bottom: 2px solid black;")
        # self.lineEdit_4_FirstPageForPC.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_4_FirstPageForPC.setObjectName("lineEdit_4_FirstPageForPC")
        self.verticalLayout_44_FirstPageForPC.addWidget(self.lineEdit_4_FirstPageForPC)
        self.pushButton_8_FirstPageForPC = QtWidgets.QPushButton(self.frame_5_FirstPageForPC)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(12)
        self.pushButton_8_FirstPageForPC.setFont(QFont('raleway', 12,100))
        self.pushButton_8_FirstPageForPC.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0.389831 rgba(151, 71, 255, 255), stop:1 rgba(209, 88, 248, 255));\n"
"padding: 10px 0px;\n"
"border-radius: 10px;\n"
"color: white;\n"
"margin-top: 20px;")
        self.pushButton_8_FirstPageForPC.setObjectName("pushButton_8_FirstPageForPC")

        self.pushButton_8_FirstPageForPC.clicked.connect(self.continue_pressed) # create file save dataof pc and move to group id page

        self.verticalLayout_44_FirstPageForPC.addWidget(self.pushButton_8_FirstPageForPC)
        spacerItem28 = QtWidgets.QSpacerItem(20, 150, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout_44_FirstPageForPC.addItem(spacerItem28)
        self.horizontalLayout_36_FirstPageForPC.addWidget(self.frame_5_FirstPageForPC)
        self.verticalLayout_45_FirstPageForPC.addWidget(self.widget_10_FirstPageForPC)
        self.outsideMainStackWidget.addWidget(self.FirstPageForPC)
        # --------------------------------------------------------------------------------------

        self.verticalLayout.addWidget(self.outsideMainStackWidget)
        self.label_2_GroupID.setText("SIGN IN")
        self.label_5_GroupID.setText("Welcome to the Zeus Gaming Software, Please login to your account")
        self.label_3_GroupID.setText("If you have a group booking, please provide your group ID.")
        self.label_4_GroupID.setText("Enter Group ID")
        self.pushButton_2_GroupID.setText("Continue")
        self.pushButton_3_GroupID.setText("Skip")

        self.label_7_GroupInfo.setText("SIGN IN")
        self.label_8_GroupInfo.setText("Welcome to the Zeus Gaming Software, Please login to your account")
        self.label_9_GroupInfo.setText("Username")

        self.label_10_GroupInfo.setText("Password")
        self.pushButton_GroupInfo.setText("Forgot Password?")
        self.pushButton_4_GroupInfo.setText("Sign In")
        self.pushButton_5_GroupInfo.setText("OR Sign In With QR Code ")
        self.label_15_GroupInfo.setText("Do you have a solo booking?")
        self.pushButton_6_GroupInfo.setText("Sign In")

        self.label_17_FirstPageForPC.setText( "Initial Setup")
        self.label_18_FirstPageForPC.setText( "Welcome to the Zeus Gaming Software")
        self.label_19_FirstPageForPC.setText( "Name of PC")
        self.label_20_FirstPageForPC.setText( "Franchise Location")
        self.pushButton_8_FirstPageForPC.setText( "Submit")


        self.setCentralWidget(self.centralWidget)

        # self.retranslateUi(self)

        self.leftArrowScrollInsideMainStackWidget.clicked.connect(self.scroll_left)
        self.rightArrowScrollInsideMainStackWidget.clicked.connect(self.scroll_right)

       


        # -------------------category get start-----------------------------------------------------
        # try:
        #     # Make a GET request to your Node.js API endpoint
        #     response = requests.get('https://server.zeusgaming.gg/api/category/getCategory')  # Replace with your API endpoint

        #     # Check if request was successful (status code 200)
        #     print("response.status_code",response.status_code)
        #     if response.status_code == 200:
        #         data = response.json()  # Convert response to JSON format
        #         # Update the label text with the received data
        #         # self.label.setText(f"Response from Node.js API: {data}")
        #         print("data",data)
        #     else:
        #         print("data????")
        #         # self.label.setText("Failed to fetch data from API.")

        # except requests.exceptions.RequestException as e:
        #         print("data????---------")
        #     Handle request exceptions (e.g., connection error)
        #     self.label.setText(f"Error fetching data from API: {e}")

        # -----------------------------category get end -------------------------------------------

        # --------------------------first main page of screen start--------------------------------
        if first_time_check:

                # self.outsideMainStackWidget.setCurrentIndex(5)#groupid page

                self.outsideMainStackWidget.setCurrentIndex(1)#login page

        else:

                self.outsideMainStackWidget.setCurrentIndex(7)#FirstPageForPC page
        # --------------------------first main page of screen end----------------------------------

        # self.outsideMainStackWidget.setCurrentIndex(6)#group info
        


        # self.insideMainStackWidget.setCurrentIndex(4)
        self.fourthSectionTabWidgetInsideMainStackWidget.setCurrentIndex(0)

        # --------------------------------------------------------otp-----------------
        self.firstInputOTP.textChanged['QString'].connect(self.secondInputOTP.setFocus) # type: ignore
        self.secondInputOTP.textChanged['QString'].connect(self.thirdInputOTP.setFocus) # type: ignore
        self.thirdInputOTP.textChanged['QString'].connect(self.fourthInputOTP.setFocus) # type: ignore
        self.fourthInputOTP.textEdited['QString'].connect(self.fifthInputOTP.setFocus)  # type: ignore
        self.fifthInputOTP.textChanged['QString'].connect(self.sixthInputOTP.setFocus)  # type: ignore
        # --------------------------------------------------------otp-----------------

        self.otherAppsLabelMainSofwareSidebar.setText( "OtherApps")
        self.otherAppsLabelMainSofwareSidebar.clicked.connect(self.show_OtherApps_Stack)

        self.gameLibraryLabelMainSoftwareSidebar.setText( "Game Library")
        self.gameLibraryLabelMainSoftwareSidebar.clicked.connect(self.show_GameLib_Stack)

        self.foodOrderLabelMainSoftwareSidebar.setText( "Order Food")
        self.foodOrderLabelMainSoftwareSidebar.clicked.connect(self.show_OrderFood_Stack)


        self.walletLabelMainSoftwareSidebar.setText( "Wallet")
        self.walletLabelMainSoftwareSidebar.clicked.connect(self.show_Wallet_Stack)

        self.profileLabelMainSoftwareSidebar.setText( "Profile")
        self.profileLabelMainSoftwareSidebar.clicked.connect(self.show_Profile_Stack)

        self.logoutLabelMainSoftwareSidebar.setText( "Logout")
        self.logoutLabelMainSoftwareSidebar.clicked.connect(self.Logout_Test)
        # self.logoutLabelMainSoftwareSidebar.clicked.connect(self.show_Login_Stack_post)

        self.headingLabelRecentGamesInsideMainStackWidget.setText( "Recent Games")
        # self.gameNaemRecentGameCardInsideMainStackWidget.setText( "velorant")
        # self.playButtonRecentGameCardInsideMainStackWidget.setText( "play")
        
        self.otherAppsLabelInsideMainStackWidget.setText( "Other Apps")
        # self.otherAppsCardButtonInsideMainStackWidget.setText( "Steam")
        # self.otherAppsCardButtonInsideMainStackWidget_2.setText( "Google")
        self.nameLabelProfileInsideMainStackWidget.setText( "Name")
        # self.nameOfUserLabelProfileInsideMainStackWidget.setText( "Gustavo Stanton")
        self.usernameLabelProfileInsideMainStackWidget.setText( "User Name")
        # self.usernameOfUserLabelProfileInsideMainStackWidget.setText( "G_Stanton")
        self.emailLabelProfileInsideMainStackWidget.setText( "Email")
        # self.emailOfUserProfileInsideMainStackWidget.setText( "abc@xyz.com")
        # self.levelLabelProfileInsideMainStackWidget.setText( "Level")
        # self.levelOfUserLabelProfileInsideMainStackWidget.setText( "20")
        # self.referralLabelProfileInsideMainStackWidget.setText( "Your referral Code")
        # self.referralOfCodeProfileInsideMainStackWidget.setText( "ZEUS1234")
        # self.copyReferralButtonProfileInsideMainStackWidget.setText( "Copy Code")
        self.recentActivityLabelProfileInsideMainStackWidget.setText( "RECENT ACTIVITY")
        # self.hoursPlayedLabelProfileInsideMainStackWidget.setText( "12 hours played past 2 weeks")
       
        # self.label_13.setText( "Call Of Duty War Zone")
        # self.label_14.setText( "4 hrs on record")
        # self.gameNameLabelProfileInsideMainStackWidget.setText( "Aliens on earth")
        # self.gamePlayedTimeLabelProfileInsideMainStackWidget.setText( "6 hrs on record")
        self.mainHeadingLogin.setText( "S I G N  I N")
        self.secondHeadingLogin.setText( "Welcome to the Zeus Gaming Software, Please login to your account")
        self.usernameLabelLogin.setText( "Username")
        self.passwordLabelLogin.setText( "Password")
        self.forgotPassButtonLogin.setText( "Forgot Password?")
        self.signInButtonLogin.setText( "Sign In")
        self.loginWithQRButtonLogin.setText( "OR Sign In With QR Code  ")
        self.label_21_login.setText( "Do you have a group booking?")
        self.pushButton_7_login.setText( "Enter Group ID")

        self.FirstMainHeadingLabel.setText( "Verification Code")
        self.secondMainLabel.setText( "Please enter your verification code")

        self.verifyButtonOTP.setText( "Verify")
        self.resendCodeButtonOTP.setText( "Resend Code")
        self.backToSigninFromOTP.setText( "Back To Sign In")
        self.mainHeadingQRCode.setText( "SIGN IN WITH QR")
        self.firstLabelSecondHeadingQRCode.setText( "Use the ")
        self.secondLabelSecondHeadingQRCode.setText( "ZEUS Mobile App")
        self.thirdLabelSecondHeadingQRCode.setText( " to Sign in via QR code")
        self.backToSIgnInButtonQRCode.setText( "Hide QR Code")
        # self.counterQRCode.setText( "00:30")
        self.headingLabelForgotPass.setText( "Forgot Password?")
        self.secondMainLabelForgotPass.setText( "Enter the email address associated with your account.")
        self.emailLabelForgotPass.setText( "Email")
        self.sendButtonForgotPass.setText( "Send")
        self.backToForgotPass.setText( "Back to ")
        self.backToSignInButtonForgotPass.setText( "Sign In")
        


        QtCore.QMetaObject.connectSlotsByName(self)
    
    
        # event.ignore()
#   ---------------------------------for pc registration ---------------------------------

    def continue_pressed(self): 
        self.check_dir()

    def check_dir(self):
        if self.lineEdit_4_FirstPageForPC.text() and self.lineEdit_FirstPageForPC.text():
                self.save_to_config()
        else:
                try:
                        self.show_warning_message_box("Please Enter Valid Data")
                except Exception as e:
                       print(">>>>>>check_dir",e)
               
    def Forgot_Link_Send(self):
        
        if self.emailInputForgotPass.text():
                data={
                       'email':self.emailInputForgotPass.text()
                }
                url = "https://server.zeusgaming.gg/api/signup/forgotpasswrd"  # Replace with your API endpoint
                response = requests.post(url, json=data)
                if response.status_code == 200:
                        datas=response.json()
                        self.show_warning_message_box(datas['data'])

                        self.emailInputForgotPass.clear()

                        self.outsideMainStackWidget.setCurrentIndex(1) #login 
                        
                else:
                        self.emailInputForgotPass.clear()
                        datas=response.json()
                        self.show_warning_message_box(datas['error'])
                       
    def show_group_id_page(self):
            
        self.comboBox_GroupInfo.clear()
        self.lineEdit_2_GroupID.clear()
        self.lineEdit_3_GroupInfo.clear()
        self.firstInputOTP.clear()
        self.secondInputOTP.clear()
        self.thirdInputOTP.clear()
        self.fourthInputOTP.clear()
        self.fifthInputOTP.clear()
        self.sixthInputOTP.clear()
        self.usernameInputLogin.clear()
        self.passwordInputLogin.clear()
            
        self.outsideMainStackWidget.setCurrentIndex(5) # move groupid page
        
    def show_mainSW_after_QR_login_call(self):
        
        print("self---------1",self)

        # Prog_custom_clickrammatically trigger the button click
        self.button_custom_click.click()

    def show_mainSW_after_QR_login(self):
       
        self.outsideMainStackWidget.setCurrentIndex(0) # move to mainsw

        self.overlayTry = MainWindow()
        self.overlayTry.show()

        # ----------------------------------------------------------------------------------------------------------------

        # -------------------other apps get start-----------------------------------------------------

        try:
                settings = QSettings("MyCompany", "MyApp")
                handleweb_webtoken = settings.value("webtoken")
                another_config = configparser.ConfigParser()
                if another_config.read(CONFIG_PATH):
                        print("hello.....",another_config.read(CONFIG_PATH))
                        another_config.read(CONFIG_PATH)
                        set_qr_pc_number = another_config['Details']['pc-id']
                        set_qr_franchise_id = another_config['Details']['franchise']
                
                headers={"Authorization":handleweb_webtoken}
                # Make a GET request to your Node.js API endpoint
                response = requests.get('https://server.zeusgaming.gg/api/otherapps/getotherapps?franchise={0}'.format(set_qr_franchise_id),headers=headers)  # Replace with your API endpoint


            # Check if request was successful (status code 200)
                print("response.status_code other apps",response.status_code)
                print("response.status_code other apps",response.json())
                if response.status_code == 200:
                        data = response.json()  # Convert response to JSON format
                        # print("data other apps",data['data']['data'][0]['appname'])
                        print("data other apps after qrlogin>>>>>",data)

                        #     for handle_otherapps  remove--------------------
                        try:
                                handle_otherapps = settings.value("handle_otherapps")
                                for i in reversed(range(zeusConsole.gridLayout.count())):
                                        item = zeusConsole.gridLayout.itemAt(i)
                                        if item.widget() and item.widget().objectName() == handle_otherapps:
                                                widget = item.widget()
                                                zeusConsole.gridLayout.removeWidget(widget)
                                                widget.deleteLater()
                                                break
                        except:
                                pass
                        #     for handle_otherapps  remove--------------------


                else:
                        print("data other apps after qrlogin????")

        except requests.exceptions.RequestException as e:
                print("data other apps????---------")

        # -----------------------------other apps get end -------------------------------------------
        try:
        
                for i in range(len(data['data']['data'])):
                        if len(data['data']['data']):
                                self.groupBox_3 = QtWidgets.QGroupBox(self.sectionTwoOtherAppsInsideMainStackWidget)
                                self.groupBox_3.setMinimumSize(QtCore.QSize(225, 275))
                                self.groupBox_3.setMaximumSize(QtCore.QSize(225, 275))
                                self.groupBox_3.setStyleSheet("#groupBox_3 {\n"
                                "background-color: #F5F5F5;\n"
                                "}")
                                self.groupBox_3.setTitle("")
                                self.groupBox_3.setAlignment(QtCore.Qt.AlignCenter)
                                self.groupBox_3.setObjectName("groupBox_3")
                                self.verticalLayout_23 = QtWidgets.QVBoxLayout(self.groupBox_3)
                                self.verticalLayout_23.setContentsMargins(0, 0, 0, 0)
                                self.verticalLayout_23.setSpacing(0)
                                self.verticalLayout_23.setObjectName("verticalLayout_23")
                                self.otherAppsCardImageInsideMainStackWidget = QtWidgets.QLabel(self.groupBox_3)
                                self.otherAppsCardImageInsideMainStackWidget.setLineWidth(0)
                                self.otherAppsCardImageInsideMainStackWidget.setText("")
                                # -------------------------------------------------------------

                               
                                settings = QSettings("MyCompany", "MyApp")
                                handleweb_webtoken = settings.value("webtoken")
                                headers={"Authorization":handleweb_webtoken}
                                get_pic=data['data']['data'][i]['appimage']

                                # print("getpic>>>>>>>>>>>>>>>>>>>",get_pic)
                                # print("getpic>>>>>>>>>>>>>>>>>>>",get_pic)
                                # print("getpic>>>>>>>>>>>>>>>>>>>",get_pic)
                                try:
                                        response = requests.get(f'https://server.zeusgaming.gg/otherapps/{get_pic}',headers=headers)

                                        if response.status_code == 200:
                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>hello innnn",response)
                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>hello innnn")
                                                print(">>>>>>>>>>>QRmainsw>>>>>>>>>response.content",response.content)
                                                print(">>>>>>>>>>>QRmainsw>>>>>>>>>response.content",response.content)
                                        # Load the image data into QPixmap
                                                pixmap = QPixmap()
                                                pixmap.loadFromData(response.content)
                                                self.otherAppsCardImageInsideMainStackWidget.setPixmap(pixmap)
                                except Exception as e:
                                        print(">>>>>>>>",e)
                                # -------------------------------------------------------------
                                # self.otherAppsCardImageInsideMainStackWidget.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(data['data']['data'][i]['appname'])))
                                # self.otherAppsCardImageInsideMainStackWidget.setMaximumSize(100,100)
                                self.otherAppsCardImageInsideMainStackWidget.setMinimumSize(QtCore.QSize(100, 100))
                                self.otherAppsCardImageInsideMainStackWidget.setMaximumSize(QtCore.QSize(100, 100))
                                self.otherAppsCardImageInsideMainStackWidget.setStyleSheet("background-color: #F5F5F5;")
                                self.otherAppsCardImageInsideMainStackWidget.setScaledContents(True)
                                self.otherAppsCardImageInsideMainStackWidget.setAlignment(QtCore.Qt.AlignCenter)
                                self.otherAppsCardImageInsideMainStackWidget.setWordWrap(False)
                                self.otherAppsCardImageInsideMainStackWidget.setObjectName("otherAppsCardImageInsideMainStackWidget")
                                self.verticalLayout_23.addWidget(self.otherAppsCardImageInsideMainStackWidget, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
                                self.otherAppsCardButtonInsideMainStackWidget = QtWidgets.QPushButton(self.groupBox_3)
                                self.otherAppsCardButtonInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 100))
                                self.otherAppsCardButtonInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 100))
                                self.otherAppsCardButtonInsideMainStackWidget.setStyleSheet("background-color: #000000;")

                                self.otherAppsCardButtonInsideMainStackWidget.setText(data['data']['data'][i]['appname'])
                                
                                self.otherAppsCardButtonInsideMainStackWidget.clicked.connect(lambda state, path=data['data']['data'][i]['apppath'],other_apps_id=data['data']['data'][i]['id'] : self.Not_start_process_otherapps(path,other_apps_id))

                                # self.otherAppsCardButtonInsideMainStackWidget.clicked.connect(lambda state, path=data['data']['data'][i]['apppath'] : self.launch_exe(path))
                                
                                
                                font = QtGui.QFont()
                                font.setFamily("Cascadia Code")
                                font.setPointSize(20)
                                self.otherAppsCardButtonInsideMainStackWidget.setFont(QFont('raleway',12))
                                self.otherAppsCardButtonInsideMainStackWidget.setAutoFillBackground(False)
                                self.otherAppsCardButtonInsideMainStackWidget.setStyleSheet("background-color: transparent;\n"
                                                                                        "border: none;\n")
                                self.otherAppsCardButtonInsideMainStackWidget.setObjectName("otherAppsCardButtonInsideMainStackWidget")
                                self.verticalLayout_23.addWidget(self.otherAppsCardButtonInsideMainStackWidget)
                                self.gridLayout.addWidget(self.groupBox_3, 0, i, 1, 1)
                                settings.remove("handle_otherapps")
                                settings.setValue("handle_otherapps",self.groupBox_3.objectName())
        except:
              pass

# ----------------------------------------------------------------------------------------------------------------

    def save_to_config(self):
        # -----------------console pc post start----------------------------------------------
        ip_address = get_ip_address()
        mac_address = get_mac_address()
        print("Your IP Address:", ip_address)
        print("Your MAC Address:", mac_address)
                
        data = {
                "number": self.lineEdit_FirstPageForPC.text(),
                "type": "PC",
                "ipaddress": ip_address,
                "macaddress": mac_address,
                "franchise_id": self.lineEdit_4_FirstPageForPC.text(),
                "createdby": 1
        }
        settings = QSettings("MyCompany", "MyApp")
        handleweb_webtoken = settings.value("webtoken")
            
        headers={"Authorization":handleweb_webtoken}

        try:
            url = "https://server.zeusgaming.gg/api/consolepc/addconsolepc"  # Replace with your API endpoint
            response = requests.post(url, json=data,headers=headers)
            if response.status_code == 200:
                config = configparser.ConfigParser()
                config['Details'] = {"pc-id":self.lineEdit_FirstPageForPC.text(),
                                "franchise":self.lineEdit_4_FirstPageForPC.text()}
                # ------------------------------------------------------------------------
                
                directory = "Zeus_Config"
  
                # Parent Directory path 
                parent_dir = "c:/"
                
                # Path 
                path = os.path.join(parent_dir, directory) 
                
                # Create the directory 
                # 'Zeus_Config' in 
                os.mkdir(path) 
                print("Directory '% s' created" % directory) 
                # Save data to config file
                
                # ------------------------------------------------------------------------

                with open(CONFIG_PATH, 'w') as configfile:
                        config.write(configfile)

                
                
                print("console pc post successfully.")
                self.outsideMainStackWidget.setCurrentIndex(5)#groupid page
            else:
                data=response.json()
                # print(">>>>>>>>>>>>>>>>>>>>>",data['error'])
                try:
                        QMessageBox.warning(self, "Warning", data['error'])
                except Exception as e:
                       print(">>>",e)
                       
                print(f"Failed to submit data. Status code: {response.status_code}")
                print(f"Failed to submit data. Status code: {response.json()}")

        except Exception as e:
            self.show_warning_message_box("Please Enter Valid Data")
            print(f"Error console pc post: {e}")

        # -----------------console pc post end---------------------------------------------------

        

        #     configfile.write(
        #         "PC-ID:- "+self.lineEdit_FirstPageForPC.text(),
        #         "franchise-ID:- "+self.lineEdit_4_FirstPageForPC.text()
        #         )

#   ---------------------------------------------------------

    def check_def(self):
        print("i-----------------------------n")

# not able to close the software-----------------------------
        # threading.Timer.cancel()
        # for proc in psutil.process_iter(['pid', 'name']):
        #         if "Taskmgr.exe" in proc.info['name']:
        #                 proc.terminate()

#         if (event.modifiers() == Qt.AltModifier | Qt.ControlModifier) and event.key() == Qt.Key_F: #Press Alt+ctrl+F
#             print("hello")
#         #     self.new_window = NewWindow()
#         #     self.new_window.show()

#         # elif(event.modifiers() == Qt.ControlModifier | Qt.ShiftModifier) and event.key() == Qt.Key_Escape:
#         elif event.key() == Qt.Key_Escape and (event.modifiers() & Qt.ControlModifier) and (event.modifiers() & Qt.ShiftModifier):
#             print("innn")
#             # for process in psutil.process_iter():
#             #     if process.name() == "Taskmgr.exe":
#             #         print(process.name)
#             #         os.system('taskkill /f /im '+ str(process.pid))
#             # event.ignore()  # Ignore ctrl+shift+esc key press

    def keyPressEvent(self, event):
        print('in function')  
        modifiers = QApplication.keyboardModifiers()

        if event.key() == Qt.Key_F4 and event.modifiers() & Qt.AltModifier: #Press Alt+F4
            print('in if')
            event.ignore()  # Ignore Alt + F4 key press
        
        elif event.key() == Qt.Key_Meta:
              keyboard.send('esc')
              
        elif event.modifiers() == Qt.ControlModifier and event.key() == Qt.Key_0:

                settings = QSettings("MyCompany", "MyApp")
                handleExe_role_id = settings.value("handleExe_role_id", type=str)

                print(">>>>>>> helolololo >>>>>> ",handleExe_role_id)
                print(">>>>>>> helolololo >>>>>> ",handleExe_role_id)
                print(">>>>>>> helolololo >>>>>> ",handleExe_role_id)

                if handleExe_role_id == "1" or handleExe_role_id == "2" or handleExe_role_id == "3":
                        self.setWindowState(Qt.WindowMinimized)
                else: 
                      
                      print(" you are user")

                      print(" you are user")

                      pass
        
        elif event.key() == Qt.Key_Return or event.key() == Qt.Key_Enter:
                check_current_stackpage = zeusConsole.outsideMainStackWidget.currentIndex()
                print("abcabc-----current index is this----",check_current_stackpage) 
                
                if check_current_stackpage == 5:
                        print("yes its groupiddd page")
                        try:
                                zeusConsole.pushButton_2_GroupID.click() #click continue of groupid page
                        except:
                                pass
                elif check_current_stackpage ==1:
                        print("yes its simple login page")
                        try:
                                zeusConsole.signInButtonLogin.click() #click continue of groupid page
                        except:
                                pass
                elif check_current_stackpage ==6:
                        print("yes its group info page")
                        try:
                                zeusConsole.pushButton_4_GroupInfo.click() #click continue of groupinfo page
                        except:
                                pass
                elif check_current_stackpage ==2:
                        print("yes its verify page")
                        try:
                                zeusConsole.verifyButtonOTP.click() #click continue of verify page
                        except:
                                pass
                else:
                        print("helllllllmmmmmmm")

                print("Enter key pressed")

        else:
            print('in else')
            super().keyPressEvent(event)
       
    def closeEvent(self,event):
        print("1")
        # Override the default closeEvent to disable Alt + F4
        event.ignore()
        print("Alt + F4 is disabled for closing this window.")

# end of close event -----------------------------------------

    def launch_exe(self, path):
        try:
                subprocess.Popen(path)
        except:
               self.show_warning_message_box("Something went wrong..")
       
# start_time = time.time()  # Record the start time
# process = subprocess.Popen(path, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
# stdout, stderr = process.communicate()
# end_time = time.time()  # Record the end time

# # Convert start and end times to a specific format, if needed
# start_time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(start_time))
# end_time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(end_time))
# print("--------------------------------")
# print("gamename:-",path)
# print("start_time_str",start_time_str)
# print("end_time_str",end_time_str)
# print("--------------------------------")

# # ------------------------------------------------------------------------------------------------
#         chrome_path = path

#         if os.path.exists(chrome_path):
#             if self.chrome_process is None or self.chrome_process.poll() is not None:
#                 self.chrome_process = subprocess.Popen([chrome_path])
#                 self.log_activity(f"{path} Opened")
#             else:
#                 self.log_activity("Chrome Already Running")
#         else:
#             self.log_activity("Invalid Chrome Path")

#     def monitor_chrome(self):
#         while True:
#             if self.chrome_process and self.chrome_process.poll() is not None:
#                 self.log_activity("Chrome Closed")
#                 self.chrome_process = None
#             time.sleep(1)

#     def closeEvent(self, event):
#         if self.chrome_process and self.chrome_process.poll() is None:
#             self.chrome_process.terminate()
#             self.log_activity("Chrome Closed")
#         event.accept()

#     def log_activity(self, message):
#         now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
#         entry = {"time": now, "activity": message}
#         self.log_data.append(entry)
#         with open(self.log_file, "a") as f:
#             json.dump(entry, f, indent=4)
#             f.write("\n")

# ------------------------------------------------------------------------------------------------
# QR page code start -------------------------------------
        
    def generate_qr_code(self):
        try:
                another_config = configparser.ConfigParser()
                if another_config.read(CONFIG_PATH):
                        print("hello.....",another_config.read(CONFIG_PATH))
                        another_config.read(CONFIG_PATH)
                        set_qr_pc_number = another_config['Details']['pc-id']
                        set_qr_franchise_id = another_config['Details']['franchise']

                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}

                        response = requests.get('https://server.zeusgaming.gg/api/consolepc/getconsolepc?id={0}&type=PC&number={1}'.format(set_qr_franchise_id,set_qr_pc_number),headers=headers)  # Replace with your API endpoint
                        print("response>>>>>>>>>>>>",response.json())
                        data=response.json()
                        data_dict= {
                        "pcid" : data['data']['data'][0]['id'],
                        "franchiseid" : set_qr_franchise_id,
                        "zeuscode": time.time()
                        } 
                
                        data_str = json.dumps(data_dict)

                        # Generate QR code
                        qr = qrcode.QRCode(
                                version=1,
                                error_correction=qrcode.constants.ERROR_CORRECT_L,
                                box_size=7,
                                border=4,
                        )

                        # Add data to the QR code
                        qr.add_data(data_str)
                        qr.make(fit=True)

                        # Create an image from the QR code
                        img = qr.make_image(fill_color="black", back_color="white")
                        img_path = "C:\ZEUS_Media\qrcode.png"
                        img.save(img_path)
                        

                        pixmap = QPixmap(img_path)
                        self.qrImageQRCode.setPixmap(pixmap)
                        self.qrImageQRCode.setMinimumSize(QtCore.QSize(600, 300))
                        self.qrImageQRCode.setMaximumSize(QtCore.QSize(600, 300))
        except Exception as e:
                               print(">>>>>>>>",e)
        
    def update_counter(self):
        if self.counter > 0:
            self.counter -= 1
            self.counterQRCode.setText(f" {self.counter} seconds")
        else:
            self.counter = 30
            self.generate_qr_code()

# QR page code end ---------------------------------------
            
# main sw scroll left & right ----------------------------
            
    def scroll_left(self):		
        # Move scroll position to the left		
        current_pos = self.secondSectionScrollAreaInsideMainStackWidget.horizontalScrollBar().value()		
        new_pos = max(0, current_pos - 200)		
        self.secondSectionScrollAreaInsideMainStackWidget.horizontalScrollBar().setValue(new_pos)		
			
    def scroll_right(self):		
        # Move scroll position to the right		
        current_pos = self.secondSectionScrollAreaInsideMainStackWidget.horizontalScrollBar().value()		
        new_pos = min(self.secondSectionScrollAreaInsideMainStackWidget.horizontalScrollBar().maximum(),		
        current_pos + 200)		
        self.secondSectionScrollAreaInsideMainStackWidget.horizontalScrollBar().setValue(new_pos)

# main sw scroll left & right ----------------------------
        
# profile page start-------------------------------------

    def copy_text(self):
        # Text to be copied to the clipboard
        # text_to_copy = self.referralOfCodeProfileInsideMainStackWidget.text()

        # Create a clipboard object
        # clipboard = QApplication.clipboard()

        # Copy text to the clipboard
        # clipboard.setText(text_to_copy)
        # self.copyReferralButtonProfileInsideMainStackWidget.setText("Copied")
        # self.counter = 10  # Initial counter value in seconds
        # self.timer = QTimer()
        # self.timer.timeout.connect(self.update_counter_profile)
        self.timer.start(1000) 

    def update_counter_profile(self):
        if self.counter > 0:
            self.counter -= 1
        else:
            self.counter = 10
            self.copyReferralButtonProfileInsideMainStackWidget.setText("Copy text")

    def set_image(self):
        pixmap = QPixmap(r"C:\ZEUS_Media\game1.png")
        pixmap = pixmap.scaled(200, 200, Qt.KeepAspectRatio)

        # Calculate the radius for the circle
        radius = min(pixmap.width(), pixmap.height()) // 2

        # Create a circular mask
        mask = QBitmap(pixmap.size())
        mask.fill(Qt.white)
        painter = QPainter(mask)
        painter.setBrush(QBrush(Qt.black))
        # Draw a circle with a radius of 50% of the minimum dimension
        painter.drawEllipse((pixmap.width() - radius) // 2, (pixmap.height() - radius) // 2, radius, radius)
        painter.end()
        pixmap.setMask(mask)

        # label = QLabel(self)
        self.profilePhotoProfileInsideMainStackWidget.setPixmap(pixmap)
        # self.label.setGeometry(50, 50, 200, 200)

# profile page end---------------------------------------

# main stack start --------------------------------------
            
    def show_Group_info_stack(self):
        print("innnnn------------------------")
        settings = QSettings("MyCompany", "MyApp")
        view_handleExe_from_clicked = settings.value("handleExe_from_clicked")
        if view_handleExe_from_clicked:
               thread2.stop()
        settings.remove("handleExe_from_clicked")


         # -------------------group id reservation get start-----------------------------------------------------

        try:
            group_id_details = self.lineEdit_2_GroupID.text()
            settings = QSettings("MyCompany", "MyApp")
            handleweb_webtoken = settings.value("webtoken")
            headers={"Authorization":handleweb_webtoken}
            # Make a GET request to your Node.js API endpoint
            response = requests.get('https://server.zeusgaming.gg/api/reservation/getGroupUsers?groupid={0}'.format(group_id_details),headers=headers)  # Replace with your API endpoint

            # Check if request was successful (status code 200)
            print("response.status_code group id reservation",response.status_code)
            print("response.status_code group id reservation-----",response.json())
            if response.status_code == 200:
                data = response.json()  # Convert response to JSON format 

                if len(data['data'])==0:
                        QMessageBox.warning(self, "Warning", "please enter correct group id")
                else:
                        print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",data)
                        print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>",len(data['data']))
                        
                        print("data group id reservation",data['data'])
                        # print("data group id reservation",data['data'][0]['status']=='Active')

                        self.comboBox_GroupInfo.addItem("")
                        self.comboBox_GroupInfo.setItemText(0," select username to login")
                        for i in range(len(data['data'])):
                                if data['data'][i]['status']=='Active':
                                        print("data['data'][i]['username']",data['data'][i]['username'])
                                        self.comboBox_GroupInfo.addItem("")
                                        self.comboBox_GroupInfo.setItemText(i+1,data['data'][i]['username'])
                        self.comboBox_GroupInfo.model().item(0).setEnabled(False)

                                #      self.comboBox_GroupInfo.activated.connect(self.activated)

                                #      self.comboBox_GroupInfo.currentTextChanged.connect(self.select_dropdown_and_change)

                                #      self.comboBox_GroupInfo.currentIndexChanged.connect(self.index_changed)
        
                        # if len(data['data']):
                        self.outsideMainStackWidget.setCurrentIndex(6) #move to group info page 
            else:
                print("data group id reservation ????")

        except requests.exceptions.RequestException as e:
                print("data group id reservation ????---------")

        # -----------------------------group id reservation get end -------------------------------------------

    def activated(Self, index):
        print("Activated index:", index)

#     def select_dropdown_and_change(self, s):
#         print("Text changed:", s)
        

    def index_changed(self, index):
        print("Index changed", index)
        
    def show_Login_Stack(self):

        settings = QSettings("MyCompany", "MyApp")
        view_handleExe_from_clicked = settings.value("handleExe_from_clicked")
        if view_handleExe_from_clicked:
                try:
                        thread2.stop()
                except:
                       pass

        settings.remove("handleExe_from_clicked")
        
        self.outsideMainStackWidget.setCurrentIndex(1) #login 
    
    def Back_Login_From_OTP(self):

        self.firstInputOTP.clear()
        self.secondInputOTP.clear()
        self.thirdInputOTP.clear()
        self.fourthInputOTP.clear()
        self.fifthInputOTP.clear()
        self.sixthInputOTP.clear()

        settings = QSettings("MyCompany", "MyApp")
        handleweb_otp_verify_from_group_info = settings.value("otp_verify_from_group_info")

        if handleweb_otp_verify_from_group_info == "otp_verify_from_group_info":
                settings.remove("otp_verify_from_group_info")
                self.outsideMainStackWidget.setCurrentIndex(6) #move to group info page 
        else:
                self.outsideMainStackWidget.setCurrentIndex(1) #login     

    def show_Login_Stack_post(self):
        self.outsideMainStackWidget.setCurrentIndex(1) #login page

        self.usernameInputLogin.clear()
        self.passwordInputLogin.clear()

        self.firstInputOTP.clear()
        self.secondInputOTP.clear()
        self.thirdInputOTP.clear()
        self.fourthInputOTP.clear()
        self.fifthInputOTP.clear()
        self.sixthInputOTP.clear()

        self.comboBox_GroupInfo.clear()

        self.lineEdit_2_GroupID.clear()
        self.lineEdit_3_GroupInfo.clear()
        
        for widget in QApplication.topLevelWidgets():
            if widget != self and isinstance(widget, QMainWindow):
                widget.close()

        self.close_other_windows()

        print(">>>>>>>>>>>>>")
        print(">>>>>>>>>>>>>")
        print(">>>>>>>>>>>>>")
        # thread2 = QRLoginThread()
        # thread2.start()

        # r1 = random.randint(0, 10)

        # thread2.start(True)

        print(">>>>>>>>>>>>>>>>>>>dingdingding>>>")
        try:
                try:
                        z = zeusConsole.overlayTry
                except:
                        z = thread2.overlayTry
        except:
              pass

        try:
                z.timer.stop()
                z.current_time = 0
        except:
              pass

        print(">>>>>>>>>>>>>>>>>>>dingdingding>>>")
        try:
                settings = QSettings("MyCompany", "MyApp")
                handleweb_view_wallet = settings.value("handleweb_view_wallet")

                #     for wallet parent remove--------------------
                for i in reversed(range(zeusConsole.verticalLayout_36.count())):
                        item = zeusConsole.verticalLayout_36.itemAt(i)
                        if item.widget() and item.widget().objectName() == handleweb_view_wallet:
                                widget = item.widget()
                                zeusConsole.verticalLayout_36.removeWidget(widget)
                                widget.deleteLater()
                                break
                #     for wallet parent remove--------------------
                
                handleweb_view_food = settings.value("handleweb_view_food")
                #     for order food parent remove--------------------
                for i in reversed(range(zeusConsole.horizontalLayout_25.count())):
                        item = zeusConsole.horizontalLayout_25.itemAt(i)
                        if item.widget() and item.widget().objectName() == handleweb_view_food:
                                widget = item.widget()
                                zeusConsole.horizontalLayout_25.removeWidget(widget)
                                widget.deleteLater()
                                break
                #     for order food parent remove--------------------------

                #     for profile recent activity remove--------------------

                handle_profile_recent_activity = settings.value("handle_profile_recent_activity")
                for i in reversed(range(zeusConsole.verticalLayout_10.count())):
                        item = zeusConsole.verticalLayout_10.itemAt(i)
                        if item.widget() and item.widget().objectName() == handle_profile_recent_activity:
                                widget = item.widget()
                                zeusConsole.verticalLayout_10.removeWidget(widget)
                                widget.deleteLater()
                                break
                #     for profile recent activity remove--------------------

                #     for main page recent activity  remove--------------------

                handle_main_page_recent_activity = settings.value("handle_main_page_recent_activity")
                for i in reversed(range(zeusConsole.gridLayout_2.count())):
                        item = zeusConsole.gridLayout_2.itemAt(i)
                        if item.widget() and item.widget().objectName() == handle_main_page_recent_activity:
                                widget = item.widget()
                                zeusConsole.gridLayout_2.removeWidget(widget)
                                widget.deleteLater()
                                break
                #     for main page recent activity  remove--------------------

                settings.remove("handleExe_role_id")
        except:
              pass
        # self.verticalLayout_36.removeWidget(new_check)

        # new_check.deleteLater()

        
        # process_new.start(r"C:\Users\Raj_S\OneDrive\Desktop\ZEUS.exe")
        

        print(">>>>>>>>>>>>>")
        print(">>>>>>>>>>>>>")
        print(">>>>>>>>>>>>>")

        # thread2.start()
    
    def Logout_Test(self):
        try:
                self.yesnotest = YesNoApp()
                self.yesnotest.show() 

        except Exception as e:
               print("exception in logout_test",e)

    def hide_logout_popup(self):
        try:       
                self.yesnotest = YesNoApp()
                self.yesnotest.hide() 
        except Exception as e:
               print("exception in hide_logout_popup",e)
               
    def close_other_windows(self):
        if sys.platform == 'win32':
        #     Get the handle of the main window
        #     main_window = gw.getWindowsWithTitle("Counter App")[0]
        #     Close all windows except the main window
                
                for window in gw.getAllWindows():
                        print("window>>>>>>>>>>>",window.title)
                        if window.title != "Windows Input Experience":
                                if window.title != "Program Manager":
                                        if window.title != "ZEUS.exe":
                                                if window.title:
                                                        try:
                                                                try:
                                                                        window.close()
                                                                        pass
                                                                except: 
                                                                        pass
                                                        except Exception as e:
                                                               print(">>>close_other_windows Exception>>>",e)

                try:
                        apps_to_close = ["Riot Client.exe", "steam.exe"]
                        
                        for process in psutil.process_iter():
                                if process.name() in apps_to_close:
                                        print("process name ------------",process.name)
                                        try:
                                                os.system('taskkill /f /im '+ str(process.pid))
                                        except:
                                                pass
                except:
                        pass

                
              




        # -----------------category post start----------------------------------------------

        # data = {
        #     "categoryname": self.input_field.text()
        # }

        # url = "https://server.zeusgaming.gg/api/category/addCategory"  # Replace with your API endpoint
        # try:
        #     response = requests.post(url, json=data)
        #     if response.status_code == 200:
        #         self.response_label.setText("Data submitted successfully.")
        #     else:
        #         self.response_label.setText(f"Failed to submit data. Status code: {response.status_code}")
        # except Exception as e:
        #     self.response_label.setText(f"Error: {e}")

        # -----------------category post end---------------------------------------------------

# ----------------- warning msgbox start -------------------------------------

    def show_warning_message_box(self,seeMsg):
        # Create a warning QMessageBox
        QMessageBox.warning(self, "Warning", seeMsg)
  
# ----------------- warning msgbox end ---------------------------------------
  
    def show_otpVerify_Stack(self):
        # for getting pc id
        # already setup
        another_config = configparser.ConfigParser()
        if another_config.read(CONFIG_PATH):
                # print("hello....2.")
                another_config.read(CONFIG_PATH)
                set_qr_pc_number = another_config['Details']['pc-id']
                set_qr_franchise_id = another_config['Details']['franchise']


                # -------------------group id reservation get start-----------------------------------------------------

        try:

                # print(">>>>>>>>>>>>>>>>>>>>>>>>>11111111",set_qr_pc_number)
                # print(">>>>>>>>>>>>>>>>>>>>>>>>>22222",set_qr_franchise_id)
                # print(">>>>>>>>>>>>>>>>>>>>>>>>>",'id={0}&type=PC&number={1}'.format(set_qr_franchise_id,set_qr_pc_number))
                # Make a GET request to your Node.js API 
                # id = franchiseid

                settings = QSettings("MyCompany", "MyApp")
                handleweb_webtoken = settings.value("webtoken")
                headers={"Authorization":handleweb_webtoken}
                response = requests.get('https://server.zeusgaming.gg/api/consolepc/getconsolepc?id={0}&type=PC&number={1}'.format(set_qr_franchise_id,set_qr_pc_number),headers=headers)  # Replace with your API endpoint
                print('https://server.zeusgaming.gg/api/consolepc/getconsolepc?id={0}&type=PC&number={1}'.format(set_qr_franchise_id,set_qr_pc_number))
                # Check if request was successful (status code 200)
                print("response.status_code group id reservation",response.status_code)
                if response.status_code == 200:
                        data = response.json()  # Convert response to JSON format 
                        try:
                                print(">>>>>>>>>>>>>>newwww>>>>>>>>>>>>>>>>>>>>>>",data['data'])
                                # print(">>>>>>>>>>>>>>newwww>>>>>>>>>>>>>>>>>>>>>>",data['data']['data'][0]['id'])

                                set_qr_pc_id_from_pc_details = data['data']['data'][0]['id']
                        except Exception as e:
                               print(">>>>",e)      
                else:
                        print("data group id reservation ????")

        except requests.exceptions.RequestException as e:
                print("data group id reservation ????---------")

        # -----------------------------group id reservation get end -----------------------------

        # post for login verify check start -----------------------------------------------------
        data = {
            "username": self.usernameInputLogin.text(),
            "password": self.passwordInputLogin.text(),
            "type": "software",
        #     "pc_id" : 2
            "pc_id" : set_qr_pc_id_from_pc_details
        }
        settings = QSettings("MyCompany", "MyApp")
        handleweb_webtoken = settings.value("webtoken")
        headers={"Authorization":handleweb_webtoken}

        try:
            url = "https://server.zeusgaming.gg/api/signup/login"  # Replace with your API endpoint
            response = requests.post(url, json=data,headers=headers)
        
            if response.status_code == 200:
                print(">>>>>>>>>> signup/login",response)
                datas = response.json()
                print("hello datas post check",datas['data']) #---- get data of login user
                # print("hello datas post check",datas['data']) #---- get data of login user
                # print("hello datas post check",datas['data']['id']) #---- get data of login user
                # print("hello datas post check",datas['data']['role_id']) #---- get data of login user

                # settings = QSettings("MyCompany", "MyApp")
                # settings.remove("handleExe_role_id")
                # settings.setValue("handleExe_role_id", datas['data']['role_id'])

                # print("------------------------------------------------------------") #---- get softwareData of login user
                # print("----------hello datas of softwareData post check------------") #---- get softwareData of login user
                print("------softwareData post check------",datas['softwareData']['newResult'][0]['groupid']) #---- get softwareData of login user
                # print("----------hello datas of softwareData post check------------") #---- get softwareData of login use
                # print("------------------------------------------------------------") #---- get softwareData of login user

                if len(datas['softwareData']['newResult']) == 0:
                        self.usernameInputLogin.clear()
                        self.passwordInputLogin.clear()

                        self.lineEdit_2_GroupID.clear()

                        self.comboBox_GroupInfo.clear()
                        self.lineEdit_3_GroupInfo.clear()
                        self.show_warning_message_box("please check your slot time or pc place")
                else:     
                        try:
                                print('>>>>>>>>>>>>>>>>',datas)
                                settings = QSettings("MyCompany", "MyApp")
                                if datas['softwareData']['newResult'][0]['groupid']:
                                        settings.setValue("set_group_id_of_login_user", datas['softwareData']['newResult'][0]['groupid'])
                                if datas['softwareData']['newResult'][0]['reservationid']:
                                        settings.setValue("set_reservation_id_of_login_user", datas['softwareData']['newResult'][0]['reservationid'])
                        except:
                              pass

                        # print("datafrom post",datas['data']['id']) #---- get id of login user

                        self.login_user_id = datas['data']['id']
                        settings = QSettings("MyCompany", "MyApp")
                        settings.remove("handleExe_login_user_id")
                        settings.setValue("handleExe_login_user_id", self.login_user_id)
                        handleExe_login_user_id = settings.value("handleExe_login_user_id", type=str)

                        # print("----------from login",self.login_user_id)
                        # ------------wallet web start---------------------------------------------
                        # print("clear cache-----------------------------")
                        # web_view_wallet.setHtml("")
                        # print("clear cache-----------------------------")
                        # web_view_wallet.setUrl(QtCore.QUrl("about:blank"))
                        # print("clear cache-----------------------------")
                        # web_view_wallet = QWebEngineView()

                        try:
                                settings = QSettings("MyCompany", "MyApp")
                                handleweb_view_wallet = settings.value("handleweb_view_wallet")

                                #     for wallet parent remove--------------------
                                for i in reversed(range(zeusConsole.verticalLayout_36.count())):
                                        item = zeusConsole.verticalLayout_36.itemAt(i)
                                        if item.widget() and item.widget().objectName() == handleweb_view_wallet:
                                                widget = item.widget()
                                                zeusConsole.verticalLayout_36.removeWidget(widget)
                                                widget.deleteLater()
                                                break
                                #     for wallet parent remove--------------------
                                
                                handleweb_view_food = settings.value("handleweb_view_food")
                                #     for order food parent remove--------------------
                                for i in reversed(range(zeusConsole.horizontalLayout_25.count())):
                                        item = zeusConsole.horizontalLayout_25.itemAt(i)
                                        if item.widget() and item.widget().objectName() == handleweb_view_food:
                                                widget = item.widget()
                                                zeusConsole.horizontalLayout_25.removeWidget(widget)
                                                widget.deleteLater()
                                                break
                                #     for order food parent remove--------------------

                        except Exception as e:
                                print(">>>>>> show_otpVerify_Stack ",e)
                

                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers=handleweb_webtoken

                        web_view_wallet = QWebEngineView()
                        web_view_wallet.setObjectName("web_view_wallet")
                        web_view_wallet.setUrl(QUrl("https://www.zeusgaming.gg/software_wallet/{0}/{1}".format(handleExe_login_user_id,headers)))  # Corrected line
                        self.verticalLayout_36.addWidget(web_view_wallet)

                        # print("???????????????",web_view_wallet.objectName())
                        # print("<<<<<< wallet >>>>>>")
                        # print("wallet","https://www.zeusgaming.gg/software_wallet/{0}/{1}".format(handleExe_login_user_id,headers))
                        # print("<<<<<< wallet >>>>>>")

                        settings = QSettings("MyCompany", "MyApp")
                        settings.remove("handleweb_view_wallet")
                        settings.setValue("handleweb_view_wallet",web_view_wallet.objectName())
                        



                        # print("clear cache-----------------------------")
                        # ------------wallet web end-----------------------------------------------

                        # --------------order food start-------------------------------------------
                        
                        web_view_food = QWebEngineView()
                        web_view_food.setObjectName("web_view_food")

                        # print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
                        # print("handleExe_login_user_id",handleExe_login_user_id)
                        # print("set_qr_franchise_id",set_qr_franchise_id)
                        # print("headers",headers)
                        # print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")

                        web_view_food.setUrl(QUrl("https://www.zeusgaming.gg/software_orderFood/{0}/{1}/{2}".format(handleExe_login_user_id,set_qr_franchise_id,headers)))  # Corrected line
                        self.horizontalLayout_25.addWidget(web_view_food)
                        settings.remove("handleweb_view_food")
                        settings.setValue("handleweb_view_food",web_view_food.objectName())

                        # ---------------order food end--------------------------------------------


                        # self.referralOfCodeProfileInsideMainStackWidget.setText( datas['data']['referralcode'])
                        self.nameOfUserLabelProfileInsideMainStackWidget.setText(datas['data']['name'])
                        self.emailOfUserProfileInsideMainStackWidget.setText(datas['data']['email'])
                        self.usernameOfUserLabelProfileInsideMainStackWidget.setText(datas['data']['username'])


                        # -----------------------------profile set profile pic start--------------------------

                        # -----------------------------profile pic rounded start------------------------------
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        get_pic=datas['data']['profilepicture']
                        try:
                                response = requests.get(f'https://server.zeusgaming.gg/profilepicture/{get_pic}',headers=headers)

                                if response.status_code == 200:
                                # Load the image data into QPixmap
                                        pixmap = QPixmap()
                                        pixmap.loadFromData(response.content)

                                else:
                                        print("hello else")
                        except Exception as e:
                               print(">>>>>>>>",e)

                        # pixmap = QPixmap(r"https://server.zeusgaming.gg/{0}".format(datas['data']['profilepicture']))
                        pixmap = pixmap.scaled(250, 250, Qt.KeepAspectRatio)

                        # Calculate the radius for the circle
                        radius = min(pixmap.width(), pixmap.height()) // 2

                        # Create a circular mask
                        mask = QBitmap(pixmap.size())
                        mask.fill(Qt.white)
                        painter = QPainter(mask)
                        painter.setBrush(QBrush(Qt.black))
                        # Draw a circle with a radius of 50% of the minimum dimension
                        painter.drawEllipse((pixmap.width() - radius) // 2, (pixmap.height() - radius) // 2, radius, radius)
                        painter.end()
                        pixmap.setMask(mask)

                        # label = QLabel(self)
                        self.profilePhotoProfileInsideMainStackWidget.setPixmap(pixmap)

                        # -----------------------------end-------------------------------------------------------

                        # self.login_user_id = datas['data']['profilepicture']

                        # request.session['userid'] = datas['data']['id']

                        # self.response_label.setText("Data submitted successfully.")

                        self.outsideMainStackWidget.setCurrentIndex(2) #move to verify page
            else:
                try:
                        if response.status_code == 404:
                                try:
                                        try:
                                                self.show_warning_message_box(response.json()['error']['message'])
                                        except:
                                                self.show_warning_message_box(response.json()['error'])
                                except:
                                       pass
                        # print("else from login post------", response.json())
                except:
                       pass
                # self.response_label.setText(f"Failed to submit data. Status code: {response.status_code}")
        except Exception as e:
            print(f"Error from login post-----:{e}")

    def show_otpVerify_Stack_after_GroupInfo(self):

        settings = QSettings("MyCompany", "MyApp")
        settings.setValue("otp_verify_from_group_info","otp_verify_from_group_info")
        # for getting pc id
        # already setup
        another_config = configparser.ConfigParser()
        if another_config.read(CONFIG_PATH):
                # print("hello....3.")
                
                another_config.read(CONFIG_PATH)
                set_qr_pc_number = another_config['Details']['pc-id']
                set_qr_franchise_id = another_config['Details']['franchise']


        # -------------------group id reservation get start-----------------------------------------------------

        try:
                # print(">>>>>>>>>>>>>>>>>>>>>>>>>11111111",set_qr_pc_number)
                # print(">>>>>>>>>>>>>>>>>>>>>>>>>22222",set_qr_franchise_id)
                # print(">>>>>>>>>>>>>>>>>>>>>>>>>",'id={0}&type=PC&number={1}'.format(set_qr_franchise_id,set_qr_pc_number))
                # Make a GET request to your Node.js API 
                # id = franchiseid
                settings = QSettings("MyCompany", "MyApp")
                handleweb_webtoken = settings.value("webtoken")
                headers={"Authorization":handleweb_webtoken}
                response = requests.get('https://server.zeusgaming.gg/api/consolepc/getconsolepc?id={0}&type=PC&number={1}'.format(set_qr_franchise_id,set_qr_pc_number),headers=headers)  # Replace with your API endpoint

                # Check if request was successful (status code 200)
                # print("response.status_code group id reservation-----------",response.status_code)
                # print("response.status_code group id reservation-----------",response.json())
                if response.status_code == 200:
                        data = response.json()  # Convert response to JSON format 

                        # print(">>>>>>>>>>>>>>newwww>>>>>>>>>>>>>>>>>>>>>>",data['data'])
                        # print(">>>>>>>>>>>>>>newwww>>>>>>>>>>>>>>>>>>>>>>",data['data']['data'][0]['id'])
                        set_qr_pc_id_from_pc_details = data['data']['data'][0]['id']
                        # print(">>>>>>>>>>>>>>>>>>>>set_qr_pc_id_from_pc_details ",set_qr_pc_id_from_pc_details)
                                
                else:
                        print("data group id reservation ????")

        except requests.exceptions.RequestException as e:
                print("data group id reservation ????---------",e)

        # -----------------------------group id reservation get end -------------------------------------------

        # post for login verify check start ------------------------------------------------------
        data = {
            "username": self.comboBox_GroupInfo.currentText(),
            "password": self.lineEdit_3_GroupInfo.text(),
            "type": "software",
        #     "pc_id" : "2",
            "pc_id" : set_qr_pc_id_from_pc_details
        }

        # print("-------------------------------------------")
        # print("-------------------------------------------")
        # print("data",data)
        # print("-------------------------------------------")
        # print("-------------------------------------------")
        
        settings = QSettings("MyCompany", "MyApp")
        handleweb_webtoken = settings.value("webtoken")
        headers={"Authorization":handleweb_webtoken}
        try:
            url = "https://server.zeusgaming.gg/api/signup/login"  # Replace with your API endpoint
            
            response = requests.post(url, json=data,headers=headers)
        #     print(">>>>>>>>>>>>>>>>>response.status_code from otp_grpinfo ",response.status_code)
        #     print(">>>>>>>>>>>>>>>>>response from otp_grpinfo ",response.json())
            if response.status_code == 200:
                # print(">>>>>>>>>>res from group info",response)
                datas = response.json()

                # print("hello datas post from group info",datas['data']) #---- get id of login user
                # print("datafrom post from group info",datas['data']['id']) #---- get id of login user

                # settings = QSettings("MyCompany", "MyApp")
                # settings.remove("handleExe_role_id")
                # settings.setValue("handleExe_role_id", datas['data']['role_id'])

                if len(datas['softwareData']['newResult']) == 0:

                        # self.usernameInputLogin.clear()
                        # self.passwordInputLogin.clear()

                        # self.lineEdit_2_GroupID.clear()

                        # self.comboBox_GroupInfo.clear()
                        # self.lineEdit_3_GroupInfo.clear()

                        self.show_warning_message_box("please check your slot time or pc place")
                else:  
                        self.login_user_id = datas['data']['id']
                        settings = QSettings("MyCompany", "MyApp")
                        settings.remove("handleExe_login_user_id")
                        settings.setValue("handleExe_login_user_id", self.login_user_id)
                        handleExe_login_user_id = settings.value("handleExe_login_user_id", type=str)
                        # print(">>>>>>>>>>>>hello>>>>>>>>>>",handleExe_login_user_id)
                        # print("----------from login",self.login_user_id)

                        # ---------------------------------remove old data----------------------------------
                        try:
                                settings = QSettings("MyCompany", "MyApp")
                                handleweb_view_wallet = settings.value("handleweb_view_wallet")

                                #     for wallet parent remove--------------------
                                for i in reversed(range(zeusConsole.verticalLayout_36.count())):
                                        item = zeusConsole.verticalLayout_36.itemAt(i)
                                        if item.widget() and item.widget().objectName() == handleweb_view_wallet:
                                                widget = item.widget()
                                                zeusConsole.verticalLayout_36.removeWidget(widget)
                                                widget.deleteLater()
                                                break
                                #     for wallet parent remove--------------------
                                
                                handleweb_view_food = settings.value("handleweb_view_food")
                                #     for order food parent remove--------------------
                                for i in reversed(range(zeusConsole.horizontalLayout_25.count())):
                                        item = zeusConsole.horizontalLayout_25.itemAt(i)
                                        if item.widget() and item.widget().objectName() == handleweb_view_food:
                                                widget = item.widget()
                                                zeusConsole.horizontalLayout_25.removeWidget(widget)
                                                widget.deleteLater()
                                                break
                                #     for order food parent remove--------------------------
                        except Exception as e:
                                print(">>>>>> show_otpVerify_Stack ",e)
                        # ---------------------------------remove old data----------------------------------

                        # ------------wallet web start---------------------------------------------
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers=handleweb_webtoken

                        web_view_wallet = QWebEngineView()
                        web_view_wallet.setObjectName("web_view_wallet")
                        web_view_wallet.setUrl(QUrl("https://www.zeusgaming.gg/software_wallet/{0}/{1}".format(self.login_user_id,headers)))  # Corrected line
                        self.verticalLayout_36.addWidget(web_view_wallet)

                        settings = QSettings("MyCompany", "MyApp")
                        settings.remove("handleweb_view_wallet")
                        settings.setValue("handleweb_view_wallet",web_view_wallet.objectName())
                        # ------------wallet web end-----------------------------------------------

                        # --------------order food start-------------------------------------------
                        web_view_food = QWebEngineView()
                        web_view_food.setObjectName("web_view_food")
                        # web_view_food.setUrl(QUrl("https://www.zeusgaming.gg/software_orderFood/{0}".format(self.login_user_id)))  # Corrected line
                        web_view_food.setUrl(QUrl("https://www.zeusgaming.gg/software_orderFood/{0}/{1}/{2}".format(self.login_user_id,set_qr_franchise_id,headers)))  # Corrected line

                        self.horizontalLayout_25.addWidget(web_view_food)

                        settings.remove("handleweb_view_food")
                        settings.setValue("handleweb_view_food",web_view_food.objectName())
                        # ---------------order food end--------------------------------------------
 
                        # self.referralOfCodeProfileInsideMainStackWidget.setText( datas['data']['referralcode'])
                        self.nameOfUserLabelProfileInsideMainStackWidget.setText(datas['data']['name'])
                        self.emailOfUserProfileInsideMainStackWidget.setText(datas['data']['email'])
                        self.usernameOfUserLabelProfileInsideMainStackWidget.setText(datas['data']['username'])

                        # ---------------------------------------------------------------------------------
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        try:
                                response = requests.get('https://server.zeusgaming.gg/api/gameplayhistory/getrecentactivity?id={0}'.format(self.login_user_id),headers=headers)  # Replace with your API endpoint
                                if response.status_code == 200:
                                        data = response.json()  # Convert response to JSON format 
                                        # print("data>>>>>>>>>>>>>gameplayhistory/getrecentactivity",data['data'])

                                        self.hoursPlayedLabelProfileInsideMainStackWidget.setText(data['data'])

                                else:
                                        print("else>>>>>>>>>>>>>gameplayhistory/getrecentactivity")
                                      
                        except requests.exceptions.RequestException as e:
                                print("exception in gameplayhistory/getrecentactivity ????---------",e)

                        # ---------------------------------------------------------------------------------

                        # -----------------------------profile set profile pic start------------------------------

                        # -----------------------------profile pic rounded start----------------------------------

                        # image_data = datas['data']['profilepicture']
                        # pixmap = QPixmap()
                        # pixmap.loadFromData(image_data)

                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        get_pic=datas['data']['profilepicture']
                        try:
                                response = requests.get(f'https://server.zeusgaming.gg/profilepicture/{get_pic}',headers=headers)

                                if response.status_code == 200:
                                # Load the image data into QPixmap
                                        pixmap = QPixmap()
                                        pixmap.loadFromData(response.content)

                                else:
                                        print("hello else")
                        except Exception as e:
                               print(">>>>>>>>",e)
                        # pixmap = QPixmap(r"https://server.zeusgaming.gg/photo-1714043560551.jpg")
                        pixmap = pixmap.scaled(250, 250, Qt.KeepAspectRatio)

                        # Calculate the radius for the circle
                        radius = min(pixmap.width(), pixmap.height()) // 2

                        # Create a circular mask
                        mask = QBitmap(pixmap.size())
                        mask.fill(Qt.white)
                        painter = QPainter(mask)
                        painter.setBrush(QBrush(Qt.black))
                        # Draw a circle with a radius of 50% of the minimum dimension
                        painter.drawEllipse((pixmap.width() - radius) // 2, (pixmap.height() - radius) // 2, radius, radius)
                        painter.end()
                        pixmap.setMask(mask)

                        # label = QLabel(self)
                        self.profilePhotoProfileInsideMainStackWidget.setPixmap(pixmap)

                        # -----------------------------end-------------------------------------------------------

                        # self.login_user_id = datas['data']['profilepicture']

                        self.outsideMainStackWidget.setCurrentIndex(2) #move to verify page
            else:
                try:
                        if response.status_code == 404:
                                try:
                                        try:
                                                self.show_warning_message_box(response.json()['error']['message'])
                                        except:
                                                self.show_warning_message_box(response.json()['error'])
                                except:
                                       pass
                        # print("else from group info---------------------------")
                except:
                        pass
        except Exception as e:
            print(f"Error from group info:{e}")

        # post for login verify check end ------------------------------------------------------

            
        # -------------------------------------------------------------------------get running processes list-----------------------------
         
        # running_processes = []
        # for process in psutil.process_iter(['pid', 'name', 'username', 'create_time']):
        #         try:
        #                 # Fetch process details
        #                 process_info = process.info
        #                 pid = process_info['pid'] 
        #                 name = process_info['name']
        #                 username = process_info['username']

        #                 datetime_format = "%Y-%m-%d %H:%M:%S"
        #                 create_time = datetime.datetime.fromtimestamp(process_info['create_time'])
        #                 now = datetime.datetime.now()

        #                 dt_string = now.strftime("%Y-%m-%d %H:%M:%S")
        #                 dt_string_create = create_time.strftime("%Y-%m-%d %H:%M:%S")

        #                 # # Convert the strings to datetime objects
        #                 datetime1 = datetime.datetime.strptime(dt_string_create, datetime_format)
        #                 datetime2 = datetime.datetime.strptime(dt_string, datetime_format)
        #                 print("diff",datetime2-datetime1,"-----",name)

        #                 # Append to list
        #                 running_processes.append({'pid': pid, 'name': name, 'username': username, 'create_time': create_time})
        #         except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        #                 pass

        # -------------------------------------------------------------------------get running processes list----------------------------- 

        # get user data start-----------------------------
        # try:
        #     # Make a GET request to your Node.js API endpoint
        #     response = requests.get('https://server.zeusgaming.gg/api/category/getCategory')  # Replace with your API endpoint

        #     # Check if request was successful (status code 200)
        #     print("response.status_code",response.status_code)
        #     if response.status_code == 200:
        #         data = response.json()  # Convert response to JSON format
        #         # Update the label text with the received data
        #         # self.label.setText(f"Response from Node.js API: {data}")
        #         print("data",data)
        #     else:
        #         print("data????")
        #         # self.label.setText("Failed to fetch data from API.")

        # except requests.exceptions.RequestException as e:
        #         print("data????---------")
        #     Handle request exceptions (e.g., connection error)
        #     self.label.setText(f"Error fetching data from API: {e}")

        # get user data end-------------------------------
    
    def show_QRCode_Stack(self,FromPlace):
        # print("from----------------------",FromPlace)
        # thread start for the 
        try:
                thread2.start(True)
        except:
               pass
        
        if FromPlace =="from solo login":
                self.backToSIgnInButtonQRCode.clicked.connect(self.show_Login_Stack)
                settings = QSettings("MyCompany", "MyApp")
                settings.remove("handleExe_from_clicked")
                settings.setValue("handleExe_from_clicked",FromPlace)
               
        else:   #from group login--------------------------------
                self.backToSIgnInButtonQRCode.clicked.connect(self.show_Group_info_stack)
                settings = QSettings("MyCompany", "MyApp")
                settings.remove("handleExe_from_clicked")
                settings.setValue("handleExe_from_clicked",FromPlace)

        self.outsideMainStackWidget.setCurrentIndex(3) # move to qr code page

    def show_ForgotPass_Stack(self):
        self.outsideMainStackWidget.setCurrentIndex(4) # move to forgot page

    def show_MainSW_Stack(self):
        # print("hello---in-------")
        # ----------post for otp check start ---------------------------------------------------------------------------------------------------------
        check_otp = self.firstInputOTP.text() + self.secondInputOTP.text() + self.thirdInputOTP.text() + self.fourthInputOTP.text() + self.fifthInputOTP.text() + self.sixthInputOTP.text()
        print(">>>>>>>>>>check otp", check_otp)
        print(">>>>>>>>>>check login id", self.login_user_id)

        data = {
            "id": self.login_user_id,
            "otp": check_otp
        }
        settings = QSettings("MyCompany", "MyApp")
        handleweb_webtoken = settings.value("webtoken")
        headers={"Authorization":handleweb_webtoken}

        try:
            url = "https://server.zeusgaming.gg/api/signup/checkotp"  # Replace with your API endpoint
            response = requests.post(url, json=data,headers=headers)
            if response.status_code == 200:
                # print(">>>>>>>>>>",response)
                datas = response.json()
                print("datas from otp >>>>>>>>>")
                print("datas from otp >>>>>>>>>",datas['data'][0]['role_id'])
                print("datas from otp >>>>>>>>>")

                settings = QSettings("MyCompany", "MyApp")
                settings.remove("handleExe_role_id")
                settings.setValue("handleExe_role_id", datas['data'][0]['role_id'])

                # print("datas from otp >>>>>>>>>",datas)
                self.outsideMainStackWidget.setCurrentIndex(0) # move to main sw page

                # ----------------------------------------------------------------------------------------------------------------

                # -------------------other apps get start-----------------------------------------------------

                try:
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        another_config = configparser.ConfigParser()
                        if another_config.read(CONFIG_PATH):
                                # print("hello.....",another_config.read(CONFIG_PATH))
                                another_config.read(CONFIG_PATH)
                                set_qr_pc_number = another_config['Details']['pc-id']
                                set_qr_franchise_id = another_config['Details']['franchise']
                        
                        headers={"Authorization":handleweb_webtoken}
                        # Make a GET request to your Node.js API endpoint
                        response = requests.get('https://server.zeusgaming.gg/api/otherapps/getotherapps?franchise={0}'.format(set_qr_franchise_id),headers=headers)  # Replace with your API endpoint

                        # Check if request was successful (status code 200)
                        # print("response.status_code other apps",response.status_code)
                        # print("response.status_code other apps",response.json())
                        if response.status_code == 200:
                                data = response.json()  # Convert response to JSON format
                                # print("data other apps",data['data']['data'][0]['appname'])
                                # print("data other apps>>>>>",data)

                                #     for handle_otherapps  remove--------------------
                                try:
                                        handle_otherapps = settings.value("handle_otherapps")
                                        for i in reversed(range(zeusConsole.gridLayout.count())):
                                                item = zeusConsole.gridLayout.itemAt(i)
                                                if item.widget() and item.widget().objectName() == handle_otherapps:
                                                        widget = item.widget()
                                                        zeusConsole.gridLayout.removeWidget(widget)
                                                        widget.deleteLater()
                                                        break
                                except:
                                      pass
                                #     for handle_otherapps  remove--------------------
                        else:
                                print("data other apps????")

                except requests.exceptions.RequestException as e:
                        print("data other apps????---------",e)

                # -----------------------------other apps get end -------------------------------------------
                try:
                        for i in range(len(data['data']['data'])):
                                if len(data['data']['data']):
                                        self.groupBox_3 = QtWidgets.QGroupBox(self.sectionTwoOtherAppsInsideMainStackWidget)
                                        self.groupBox_3.setMinimumSize(QtCore.QSize(225, 275))
                                        self.groupBox_3.setMaximumSize(QtCore.QSize(225, 275))
                                        self.groupBox_3.setStyleSheet("#groupBox_3 {\n"
                                        "background-color: #F5F5F5;\n"
                                        "}")
                                        self.groupBox_3.setTitle("")
                                        self.groupBox_3.setAlignment(QtCore.Qt.AlignCenter)
                                        self.groupBox_3.setObjectName("groupBox_3")
                                        self.verticalLayout_23 = QtWidgets.QVBoxLayout(self.groupBox_3)
                                        self.verticalLayout_23.setContentsMargins(0, 0, 0, 0)
                                        self.verticalLayout_23.setSpacing(0)
                                        self.verticalLayout_23.setObjectName("verticalLayout_23")
                                        self.otherAppsCardImageInsideMainStackWidget = QtWidgets.QLabel(self.groupBox_3)
                                        self.otherAppsCardImageInsideMainStackWidget.setLineWidth(0)
                                        self.otherAppsCardImageInsideMainStackWidget.setText("")

                                        # -----------------------------------------------------------------------
                                        settings = QSettings("MyCompany", "MyApp")
                                        handleweb_webtoken = settings.value("webtoken")
                                        headers={"Authorization":handleweb_webtoken}
                                        get_pic=data['data']['data'][i]['appimage']
                                        
                                        # print("getpic>>>>>>>>>>>>>>>>>>>",get_pic)
                                        # print("getpic>>>>>>>>>>>>>>>>>>>",get_pic)
                                        # print("getpic>>>>>>>>>>>>>>>>>>>",get_pic)
                                        try:
                                                response = requests.get(f'https://server.zeusgaming.gg/otherapps/{get_pic}',headers=headers)

                                                if response.status_code == 200:
                                                        # print(">>>>>>>>>>>>>>>>>>>>>>>>>hello innnn")
                                                        # print(">>>>>>>>>>>mainsw>>>>>>>>>response.content",response.content)
                                                        print(">>>>>>>>>>>mainsw>>>>>>>>>response.content",response.content)
                                                # Load the image data into QPixmap
                                                        pixmap = QPixmap()
                                                        pixmap.loadFromData(response.content)
                                                        self.otherAppsCardImageInsideMainStackWidget.setPixmap(pixmap)
                                        except Exception as e:
                                                print(">>>>>>>>",e)
                                        # --------------------------------------------------------------------------------
                                        
                                        # self.otherAppsCardImageInsideMainStackWidget.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(data['data']['data'][i]['appname'])))
                                        # self.otherAppsCardImageInsideMainStackWidget.setMaximumSize(100,100)
                                        self.otherAppsCardImageInsideMainStackWidget.setMinimumSize(QtCore.QSize(100, 100))
                                        self.otherAppsCardImageInsideMainStackWidget.setMaximumSize(QtCore.QSize(100, 100))
                                        self.otherAppsCardImageInsideMainStackWidget.setStyleSheet("background-color: #F5F5F5;")
                                        self.otherAppsCardImageInsideMainStackWidget.setScaledContents(True)
                                        self.otherAppsCardImageInsideMainStackWidget.setAlignment(QtCore.Qt.AlignCenter)
                                        self.otherAppsCardImageInsideMainStackWidget.setWordWrap(False)
                                        self.otherAppsCardImageInsideMainStackWidget.setObjectName("otherAppsCardImageInsideMainStackWidget")
                                        self.verticalLayout_23.addWidget(self.otherAppsCardImageInsideMainStackWidget, 0, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter)
                                        self.otherAppsCardButtonInsideMainStackWidget = QtWidgets.QPushButton(self.groupBox_3)
                                        self.otherAppsCardButtonInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 100))
                                        self.otherAppsCardButtonInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 100))
                                        self.otherAppsCardButtonInsideMainStackWidget.setStyleSheet("background-color: #000000;")

                                        self.otherAppsCardButtonInsideMainStackWidget.setText(data['data']['data'][i]['appname'])

                                        # self.playButtonRecentGameCardInsideMainStackWidget.clicked.connect(lambda state, path=data['data']['data'][i]['filepath'],game_id=data['data']['data'][i]['game_id']: self.Not_start_process(path,game_id))

                                        self.otherAppsCardButtonInsideMainStackWidget.clicked.connect(lambda state, path=data['data']['data'][i]['apppath'],other_apps_id=data['data']['data'][i]['id'] : self.Not_start_process_otherapps(path,other_apps_id))
                                        
                                        font = QtGui.QFont()
                                        font.setFamily("Cascadia Code")
                                        font.setPointSize(20)
                                        self.otherAppsCardButtonInsideMainStackWidget.setFont(QFont('raleway',12))
                                        self.otherAppsCardButtonInsideMainStackWidget.setAutoFillBackground(False)
                                        self.otherAppsCardButtonInsideMainStackWidget.setStyleSheet("background-color: transparent;\n"
                                                                                                "border: none;\n")
                                        self.otherAppsCardButtonInsideMainStackWidget.setObjectName("otherAppsCardButtonInsideMainStackWidget")
                                        self.verticalLayout_23.addWidget(self.otherAppsCardButtonInsideMainStackWidget)
                                        self.gridLayout.addWidget(self.groupBox_3, 0, i, 1, 1)
                                        settings.remove("handle_otherapps")
                                        settings.setValue("handle_otherapps",self.groupBox_3.objectName())
                except:
                      pass
                # ----------------------------------------------------------------------------------------------------------------


                print("----------in -----------------main")

                self.overlayTry = MainWindow()
                self.overlayTry.show()

            else:
                print("else in otpppppppp")
                # self.response_label.setText(f"Failed to submit data. Status code: {response.status_code}")
        except Exception as e:
            print(f"Error:{e}")
        # ----------post for otp check end ---------------------------------------------------------------------------------------------------------

        print("-------------------add recent games of user start-------------------------------------------------------------------")
        settings = QSettings("MyCompany", "MyApp")
        handleweb_webtoken = settings.value("webtoken")
        headers={"Authorization":handleweb_webtoken}
        try:
            handleExe_login_user_id = settings.value("handleExe_login_user_id", type=str)
            # Make a GET request to your Node.js API endpoint
            response = requests.get(f'https://server.zeusgaming.gg/api/gameplayhistory/getgameplayhistory?id={handleExe_login_user_id}',headers=headers)  # Replace with your API endpoint

            # Check if request was successful (status code 200)
            print("response.status_code for recent games",response.status_code)
            if response.status_code == 200:
                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
          
                data = response.json()  # Convert response to JSON format

                print("user login id...",self.login_user_id)
                print("data from recent get...",data['data']['data'])

                print("length of data from recent get...",len(data['data']['data']))
                self.set_recentgames_height_main = 0
                self.set_recentgames_height_maincard = 0

                
                self.check_length_of_recentApps = len(data['data']['data']) #15
                if self.check_length_of_recentApps >5:
                        self.start_length_of_recentApps = len(data['data']['data']) - 5 #10
                else:
                        self.start_length_of_recentApps = 0



                # if len(data['data']['data']) > 5:
                # else:
                for i in range(self.start_length_of_recentApps,len(data['data']['data'])):
                        # ---------------------profile recent activity start----------------------------------------
                        
                        self.widget_9 = QtWidgets.QWidget(self.SectionthirdProfileInsideMainStackWidget)
                        self.widget_9.setMinimumSize(QtCore.QSize(0, 50))
                        self.widget_9.setMaximumSize(QtCore.QSize(16777215, 50))
                        self.widget_9.setStyleSheet("background-color: white;")
                        self.widget_9.setObjectName("widget_9")

                        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.widget_9)
                        self.horizontalLayout_5.setContentsMargins(15, -1, 15, -1)
                        self.horizontalLayout_5.setObjectName("horizontalLayout_5")

                        self.label_11 = QtWidgets.QLabel(self.widget_9)
                        font = QtGui.QFont()
                        font.setFamily("Cascadia Code")
                        font.setPointSize(13)
                        font.setBold(True)
                        self.label_11.setFont(QFont('raleway',16,100))
                        self.label_11.setObjectName("label_11")
                        self.horizontalLayout_5.addWidget(self.label_11)
                        self.label_11.setText( data['data']['data'][i]['filename'])

                        spacerItem12 = QtWidgets.QSpacerItem(894, 19, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                        self.horizontalLayout_5.addItem(spacerItem12)

                        self.label_12 = QtWidgets.QLabel(self.widget_9)
                        font = QtGui.QFont()
                        font.setFamily("Cascadia Code")
                        font.setPointSize(12)
                        self.label_12.setFont(QFont('raleway',14))
                        self.label_12.setObjectName("label_12")
                        self.label_12.setText(data['data']['data'][i]['totaltime'])
                        self.horizontalLayout_5.addWidget(self.label_12)
                        self.verticalLayout_10.addWidget(self.widget_9)

                        settings = QSettings("MyCompany", "MyApp")
                        settings.remove("handle_profile_recent_activity")
                        settings.setValue("handle_profile_recent_activity",self.widget_9.objectName())

                        # ---------------------profile recent activity end----------------------------------------

                        # -------------------main page recent activity start--------------------------------------
                        self.set_recentgames_height_main=40
                        self.set_recentgames_height_maincard=300

                        self.recentGameCardInsideMainStackWidget = QtWidgets.QGroupBox(self.scrollAreaWidgetContentsInsideMainStackWidget)
                        self.recentGameCardInsideMainStackWidget.setMinimumSize(QtCore.QSize(250, 0))
                        self.recentGameCardInsideMainStackWidget.setMaximumSize(QtCore.QSize(250, 272))
                        self.recentGameCardInsideMainStackWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.recentGameCardInsideMainStackWidget.setTitle("")
                        self.recentGameCardInsideMainStackWidget.setObjectName("recentGameCardInsideMainStackWidget")
                        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.recentGameCardInsideMainStackWidget)
                        self.verticalLayout_20.setContentsMargins(0, 0, 0, 0)
                        self.verticalLayout_20.setSpacing(0)
                        self.verticalLayout_20.setObjectName("verticalLayout_20")
                        self.gameImageRecentGameCardInsideMainStackWidget = QtWidgets.QLabel(self.recentGameCardInsideMainStackWidget)
                        self.gameImageRecentGameCardInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 173))
                        self.gameImageRecentGameCardInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 173))
                        self.gameImageRecentGameCardInsideMainStackWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.gameImageRecentGameCardInsideMainStackWidget.setText("")

                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        get_pic=data['data']['data'][i]['imagepath']
                        # print("getpic",get_pic)
                        try:
                                response = requests.get(f'https://server.zeusgaming.gg/gamefiles/{get_pic}',headers=headers)

                                if response.status_code == 200:
                                        # print(">>>>>>>>>>>>>>>>>>>>>>>>>innnnnnnnnnnnnnnnnnnnnnnnn")

                                        pixmap = QPixmap()
                                        pixmap.loadFromData(response.content)
                                        self.gameImageRecentGameCardInsideMainStackWidget.setPixmap(pixmap)

                                else:
                                        print("hello from game play activityhome")
                        except Exception as e:
                               print(">>>>>>>>",e)
                        # self.gameImageRecentGameCardInsideMainStackWidget.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(data['data']['data'][i]['filename'])))
                        self.gameImageRecentGameCardInsideMainStackWidget.setScaledContents(True)
                        self.gameImageRecentGameCardInsideMainStackWidget.setObjectName("gameImageRecentGameCardInsideMainStackWidget")
                        self.verticalLayout_20.addWidget(self.gameImageRecentGameCardInsideMainStackWidget)
                        self.nameAndButtonSectionRecentGameCardInsideMainStackWidget = QtWidgets.QWidget(self.recentGameCardInsideMainStackWidget)
                        self.nameAndButtonSectionRecentGameCardInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 101))
                        self.nameAndButtonSectionRecentGameCardInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 101))
                        self.nameAndButtonSectionRecentGameCardInsideMainStackWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
                        self.nameAndButtonSectionRecentGameCardInsideMainStackWidget.setObjectName("nameAndButtonSectionRecentGameCardInsideMainStackWidget")
                        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.nameAndButtonSectionRecentGameCardInsideMainStackWidget)
                        self.verticalLayout_21.setSpacing(12)
                        self.verticalLayout_21.setObjectName("verticalLayout_21")
                        self.gameNaemRecentGameCardInsideMainStackWidget = QtWidgets.QLabel(self.nameAndButtonSectionRecentGameCardInsideMainStackWidget)
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.gameNaemRecentGameCardInsideMainStackWidget.setFont(QFont('raleway',12))
                        self.gameNaemRecentGameCardInsideMainStackWidget.setText(data['data']['data'][i]['filename'])
                        
                        self.gameNaemRecentGameCardInsideMainStackWidget.setObjectName("gameNaemRecentGameCardInsideMainStackWidget")
                        self.verticalLayout_21.addWidget(self.gameNaemRecentGameCardInsideMainStackWidget)
                        self.playButtonRecentGameCardInsideMainStackWidget = QtWidgets.QPushButton(self.nameAndButtonSectionRecentGameCardInsideMainStackWidget)
                        self.playButtonRecentGameCardInsideMainStackWidget.setMaximumSize(QtCore.QSize(75, 16777215))
                        font = QtGui.QFont()
                        font.setPointSize(11)
                        self.playButtonRecentGameCardInsideMainStackWidget.setFont(QFont('raleway',11,100))
                        self.playButtonRecentGameCardInsideMainStackWidget.setText("Play")
                        # self.playButtonRecentGameCardInsideMainStackWidget.clicked.connect(lambda state, path=data['data']['data'][i]['filepath']: self.launch_exe(path))
                        # self.playButtonRecentGameCardInsideMainStackWidget.clicked.connect(lambda state, path=data['data']['data'][i]['filepath'],game_id=data['data']['data'][i]['game_id']: execute_exe(path,game_id))
                        
                        self.playButtonRecentGameCardInsideMainStackWidget.clicked.connect(lambda state, path=data['data']['data'][i]['filepath'],game_id=data['data']['data'][i]['game_id']: self.Not_start_process(path,game_id))
                        # ----------------------------------------------------------------------------
                        {'id': 61, 'date': '1970-01-01', 'starttime': '15:18:40', 'endtime': '15:18:48', 'totaltime': '2', 'isdeleted': False, 'client_id': 6, 'game_id': 2, 'games': 2, 'filename': 'Designer tool', 'name': 'raj soni', 'username': 'raj_003'}
                       
                        # ----------------------------------------------------------------------------
                        self.playButtonRecentGameCardInsideMainStackWidget.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
                        "color: rgb(255, 255, 255);\n"
                        "border-radius : 5;\n"
                        "padding-top: 8px; padding-bottom: 8px;")
                        self.playButtonRecentGameCardInsideMainStackWidget.setObjectName("playButtonRecentGameCardInsideMainStackWidget")
                        self.verticalLayout_21.addWidget(self.playButtonRecentGameCardInsideMainStackWidget)
                        self.verticalLayout_20.addWidget(self.nameAndButtonSectionRecentGameCardInsideMainStackWidget)
                        self.gridLayout_2.addWidget(self.recentGameCardInsideMainStackWidget, 0, i, 1, 1)
                        self.secondSectionScrollAreaInsideMainStackWidget.setWidget(self.scrollAreaWidgetContentsInsideMainStackWidget)

                        settings = QSettings("MyCompany", "MyApp")
                        settings.remove("handle_main_page_recent_activity")
                        settings.setValue("handle_main_page_recent_activity",self.recentGameCardInsideMainStackWidget.objectName())
                        # -------------------main page recent activity start--------------------------------------

                self.secondSectionScrollAreaInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, self.set_recentgames_height_maincard))
                self.secondSectionScrollAreaInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, self.set_recentgames_height_maincard))
        
                self.firstSectionFrameInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, self.set_recentgames_height_main))
                self.firstSectionFrameInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, self.set_recentgames_height_main))
            else:
                print("data recent games????")

        except requests.exceptions.RequestException as e:
                print("data recent games exception????---------")

        
        
        print("------------------------add recent games of user end--------------------------------------------------------------")
        # for i in range(len(data['data']['data'])):
        #         if data['data']['data'][i]['client_id'] == self.login_user_id:

# main stack end ------------------------------------
        
# inner stack start ---------------------------------

    def Not_start_process(self,path,id):
        settings = QSettings("MyCompany", "MyApp")

        settings.remove("filepath")
        settings.remove("handleExe_id")
        settings.remove("handleExe_start_time")
        settings.remove("handleExe_end_time")
        settings.remove("handleExe_end_time_from_timer")

        settings.setValue("filepath", path)
        settings.setValue("handleExe_id", id) #game id

        set_game_start_time = datetime.datetime.now().strftime("%H:%M:%S")
        settings.setValue("handleExe_set_from_timer_game_start_time", set_game_start_time)
        # settings.setValue("handleExe_start_time", set_game_start_time)

        
        self.start_process()

    def start_process(self):
        print("INNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN")
        try:
                if self.thread and self.thread.isRunning():
                        print("Thread is already running")
                        return
                
                # Create and start the thread
                thread = ProcessThread(self)
                thread.start()
        except:
                pass
    
    def Not_start_process_otherapps(self,otherapps_path,otherapps_id):

        settings = QSettings("MyCompany", "MyApp")

        settings.remove("otherapps_filepath")
        settings.remove("otherapps_handleExe_id")
        settings.remove("otherapps_handleExe_start_time")
        settings.remove("otherapps_handleExe_end_time")
        settings.remove("otherapps_handleExe_end_time_from_timer")

        settings.setValue("otherapps_filepath", otherapps_path)
        settings.setValue("otherapps_handleExe_id", otherapps_id) #otherapps otherapps_id

        set_otherapps_start_time = datetime.datetime.now().strftime("%H:%M:%S")
        settings.setValue("handleExe_set_from_timer_otherapps_start_time", set_otherapps_start_time)

        
        self.start_process_otherapps()

    def start_process_otherapps(self):
        print("INNNNNNNNN start_process_otherapps")
        try:
                if self.thread_otherapps and self.thread_otherapps.isRunning():
                        print("Thread is already running otherapps")
                        return
                
                # Create and start the thread
                thread_otherapps = ProcessThread_otherapps(self)
                thread_otherapps.start()
        except:
                pass
    

    def show_Profile_Stack(self):
        
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\otherApps.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.otherAppsButtonMainSoftwareSidebar.setIcon(icon)

        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\gamLibNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.gameLibraryButtonMainSoftwareSidebar.setIcon(icon1)

        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\foodNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.foodOrderButtonMainSoftwareSidebar.setIcon(icon2)

        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\WalletNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.walletButtonMainSoftwareSidebar.setIcon(icon3)
        
        profilePink = QtGui.QIcon()
        profilePink.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\profilePink.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.profileButtonMainSofwareSidebar.setIcon(profilePink)
        
        self.insideMainStackWidget.setCurrentIndex(4) #profile page
        
    def show_Wallet_Stack(self):
            
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\otherApps.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.otherAppsButtonMainSoftwareSidebar.setIcon(icon)

        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\gamLibNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.gameLibraryButtonMainSoftwareSidebar.setIcon(icon1)

        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\foodNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.foodOrderButtonMainSoftwareSidebar.setIcon(icon2)
        
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\ProfileNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.profileButtonMainSofwareSidebar.setIcon(icon4)
            
        walletPink = QtGui.QIcon()
        walletPink.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\walletPink.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.walletButtonMainSoftwareSidebar.setIcon(walletPink)
        
        self.insideMainStackWidget.setCurrentIndex(3) #wallet page
        
    def show_OrderFood_Stack(self):
        
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\otherApps.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.otherAppsButtonMainSoftwareSidebar.setIcon(icon)

        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\gamLibNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.gameLibraryButtonMainSoftwareSidebar.setIcon(icon1)

        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\WalletNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.walletButtonMainSoftwareSidebar.setIcon(icon3)
        
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\ProfileNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.profileButtonMainSofwareSidebar.setIcon(icon4)
        
        orderFoodPink = QtGui.QIcon()
        orderFoodPink.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\orderFoodPink.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.foodOrderButtonMainSoftwareSidebar.setIcon(orderFoodPink)    
        
        self.insideMainStackWidget.setCurrentIndex(2) #order food page

    def show_OtherApps_Stack(self):
        
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\gamLibNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.gameLibraryButtonMainSoftwareSidebar.setIcon(icon1)

        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\foodNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.foodOrderButtonMainSoftwareSidebar.setIcon(icon2)

        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\WalletNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.walletButtonMainSoftwareSidebar.setIcon(icon3)
        
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\ProfileNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.profileButtonMainSofwareSidebar.setIcon(icon4)
        
        otherAppsPink = QtGui.QIcon()
        otherAppsPink.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\otherAppsPink.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.otherAppsButtonMainSoftwareSidebar.setIcon(otherAppsPink)    
        
        self.insideMainStackWidget.setCurrentIndex(1) #other apps page

    def show_GameLib_Stack(self):
            
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\otherApps.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.otherAppsButtonMainSoftwareSidebar.setIcon(icon)

        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\foodNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.foodOrderButtonMainSoftwareSidebar.setIcon(icon2)

        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\WalletNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.walletButtonMainSoftwareSidebar.setIcon(icon3)

        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\ProfileNormal.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.profileButtonMainSofwareSidebar.setIcon(icon4)
            
        gameLibPink = QtGui.QIcon()
        gameLibPink.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\gameLibPink.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.gameLibraryButtonMainSoftwareSidebar.setIcon(gameLibPink)
            
        self.insideMainStackWidget.setCurrentIndex(0) #game library page


# ---------------------------------------------------

    def emit_show_signal(self, event):
        try:

                self.communicate.show_signal.emit()
        except Exception as e:

                print(">>>>>> emit_show_signal",e)

    def emit_hide_signal(self, event):
        try:

                self.communicate.hide_signal.emit()
        except Exception as e:

                print(">>>>>> emit_hide_signal",e)

    def show_second_window(self):
        try:
                self.overlayTry.show()
        except:
              pass

    def hide_second_window(self):
        try:
                self.overlayTry.hide()
        except:
              pass

# ---------------------------------------------------

# -------------------- yes no modal for logout start --------------------------------------------------------------------------------------------
class YesNoApp(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setObjectName("self")
        self.resize(593, 324)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 10, 561, 251))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_sure_logout = QtWidgets.QLabel(self.verticalLayoutWidget)

       
        self.label_sure_logout.setFont(QFont('raleway',12,100))



        self.label_sure_logout.setMaximumSize(QtCore.QSize(600, 16777215))
        self.label_sure_logout.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_sure_logout.setAlignment(QtCore.Qt.AlignCenter)
        self.label_sure_logout.setObjectName("label_sure_logout")
        self.verticalLayout.addWidget(self.label_sure_logout)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")

        self.pushButton_logout_yes = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_logout_yes.setMaximumSize(QtCore.QSize(200, 50))
        self.pushButton_logout_yes.setObjectName("pushButton_logout_yes")

        self.pushButton_logout_yes.setFont(QFont('raleway',11,100))
        self.pushButton_logout_yes.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
                        "color: rgb(255, 255, 255);\n"
                        "border-radius : 5;\n"
                        "padding-top: 8px; padding-bottom: 8px;")
        
        self.pushButton_logout_yes.clicked.connect(zeusConsole.show_Login_Stack_post)
        

        self.horizontalLayout.addWidget(self.pushButton_logout_yes)

        self.pushButton_logout_no = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.pushButton_logout_no.setMaximumSize(QtCore.QSize(200, 50))
        self.pushButton_logout_no.setObjectName("pushButton_logout_no")

        self.pushButton_logout_no.setFont(QFont('raleway',11,100))

        self.pushButton_logout_no.clicked.connect(zeusConsole.hide_logout_popup)

        # self.pushButton_logout_no.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
        #                 "color: rgb(255, 255, 255);\n"
        #                 "border-radius : 5;\n"
        #                 "padding-top: 8px; padding-bottom: 8px;")

        self.horizontalLayout.addWidget(self.pushButton_logout_no)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 593, 26))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        QtCore.QMetaObject.connectSlotsByName(self)

    
        self.setWindowTitle("logout")
        self.label_sure_logout.setText( "Are you sure you want to logout ?")
        self.pushButton_logout_yes.setText( "Yes")
        self.pushButton_logout_no.setText( "No")


# -------------------- yes no modal for logout end ----------------------------------------------------------------------------------------------

# -----------------------------------------------------------------------------------------------------------------

# inner stack end -----------------------------------
# --------message window start---------------------------------------------------------------

class NewWindow(QMainWindow):

    def __init__(self):
        super().__init__()
        self.setObjectName("self")
        self.resize(400, 75)
        self.setMinimumSize(QtCore.QSize(420, 75))
        self.setMaximumSize(QtCore.QSize(420, 75))
        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)
        self.setWindowFlags(Qt.FramelessWindowHint)

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setObjectName("widget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setMaximumSize(QtCore.QSize(60, 16777215))
        self.label.setStyleSheet("background-color: #FEF7D1;")
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\warning.png"))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.frame = QtWidgets.QFrame(self.widget)
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_2 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(13)
        font.setBold(True)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("background-color: #FEF7D1;")
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.label_3 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(False)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("background-color: #FEF7D1;")
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.horizontalLayout_2.addWidget(self.frame)
        self.horizontalLayout.addWidget(self.widget)
        self.label_2.setText("Warning")
        # self.label_3.setText("Slot is going to expire in 5 minutes.")
        self.setCentralWidget(self.centralwidget)
        time.sleep(5) 
        self.close() 
        QTimer.singleShot(5000, self.close)

# --------message window end-----------------------------------------------------------------

# over lay Tray class start-------------------------------------

class TrayWidget(QWidget):
    
    def __init__(self, main_window):
        print("insdie tray init function ----------")
        super().__init__()
        self.main_window = main_window
        self.init_ui()
        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)

#     def keyPressEvent(self, event):
#         print('in function')  
#         modifiers = QApplication.keyboardModifiers()

#         if (event.modifiers() == Qt.AltModifier | Qt.ControlModifier) and event.key() == Qt.Key_F: #Press Alt+ctrl+F
#             print("hello")
#             self.new_window = NewWindow()
#             self.new_window.show()

    def init_ui(self):
        # layout = QtWidgets.QVBoxLayout()
        # self.setLayout(layout)
        # self.setContentsMargins(0,0,0,0)
        
        self.arrow_button = QPushButton("", self)
        self.arrow_button.setGeometry(0, 0, 70, 65)
        self.arrow_button.setIcon(QIcon(r"C:\ZEUS_Media\Vector.png")) 
        self.arrow_button.setStyleSheet("background:black;border:none;")
        try:
                self.arrow_button.clicked.connect(self.show_window)
        except:
               pass
        self.arrow_button.setIconSize(self.arrow_button.size())
        # layout.addWidget(self.arrow_button, QtCore.Qt.AlignHCenter)

    def show_window(self):
        self.main_window.show_small_window()
    
class SmallWindow(QMainWindow):
    
    def __init__(self):
        super().__init__()
        self.setWindowFlags(self.windowFlags() & ~ (Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint))
        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)

        self.setObjectName("Order Food")
        self.setWindowTitle("Order Food")
        self.resize(400, 150)
        self.setMinimumSize(QtCore.QSize(400, 150))
        self.setMaximumSize(QtCore.QSize(400, 150))
        self.setFocusPolicy(QtCore.Qt.WheelFocus)
        self.setStyleSheet("background:white;\n"
        "")
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(20, 15, 20, 15)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.firstFrame = QtWidgets.QFrame(self.widget)
        self.firstFrame.setStyleSheet("")
        self.firstFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.firstFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.firstFrame.setObjectName("firstFrame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.firstFrame)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.firstFrame)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.pushButton = QtWidgets.QPushButton(self.firstFrame)
        self.pushButton.setMinimumSize(QtCore.QSize(80, 0))
        self.pushButton.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.pushButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pushButton.setStyleSheet("border: none;\n"
        "background-color: none;")
        self.pushButton.setText("")
        iconOrderFood = QtGui.QIcon()
        iconOrderFood.addPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\rightArrowButton.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pushButton.setIcon(iconOrderFood)
        self.pushButton.setIconSize(QtCore.QSize(25, 20))
        self.pushButton.setObjectName("pushButton")

        self.pushButton.clicked.connect(self.set_close_right_arrow)
        
        self.horizontalLayout.addWidget(self.pushButton, 0, QtCore.Qt.AlignRight)
        self.verticalLayout_2.addWidget(self.firstFrame)
        self.line = QtWidgets.QFrame(self.widget)
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setObjectName("line")
        self.verticalLayout_2.addWidget(self.line)
        self.frame_2 = QtWidgets.QFrame(self.widget)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.label_3 = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(11)
        font.setBold(True)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3, 0, QtCore.Qt.AlignRight)
        self.verticalLayout_2.addWidget(self.frame_2)
        self.frame_3 = QtWidgets.QFrame(self.widget)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_4 = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_3.addWidget(self.label_4)
        self.label_5 = QtWidgets.QLabel(self.frame_3)
        font = QtGui.QFont()
        font.setFamily("Cascadia Code")
        font.setPointSize(10)
        font.setBold(True)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_3.addWidget(self.label_5, 0, QtCore.Qt.AlignRight)
        self.verticalLayout_2.addWidget(self.frame_3)
        self.verticalLayout.addWidget(self.widget)
        self.setCentralWidget(self.centralwidget)

        self.label.setText("Order Food")
        self.label_2.setText("Slot Booking Time")
        # self.label_3.setText("02:00 hrs")
        self.label_4.setText("Remaining Time")
        # self.label_5.setText(self.dynamicLabelTimer)
    
#     def keyPressEvent(self, event):
#         print('in function')  
#         modifiers = QApplication.keyboardModifiers()

#         if (event.modifiers() == Qt.AltModifier | Qt.ControlModifier) and event.key() == Qt.Key_F: #Press Alt+ctrl+F
#             print("hello")
#             self.new_window = NewWindow()
#             self.new_window.show()

    def set_close_right_arrow(self):
        # Set the target window title
        target_title = "ZEUS.exe" 

        # Minimize all windows except the target
        window_titles = pyautogui.getAllTitles()
        print(window_titles)

        # Minimize all windows except the target
        for title in window_titles:
            if title not in target_title:
                try:
                        # Minimize the window
                        pyautogui.getWindowsWithTitle(title)[0].minimize()
                        print("task done")
                except:
                        pass  # Handle cases where window can't be minimized
        
        zeusConsole.insideMainStackWidget.setCurrentIndex(2) #order food page


    def move_to_above_main_window(self, main_window):
        main_window_geometry = main_window.frameGeometry()
        margin = 25
        margin_left = 335
        self.move(main_window_geometry.left() - margin_left, main_window_geometry.top() - self.height() + margin)

class MainWindow(QMainWindow):
    
    def __init__(self):
        super().__init__()
        self.init_ui()
        
        # get user data start-----------------------------
        try:
            settings = QSettings("MyCompany", "MyApp")
            handleExe_login_user_id = settings.value("handleExe_login_user_id", type=str)
            print(">>>>>>>>>>>>>>>>>handleuserid",handleExe_login_user_id)
            handleweb_webtoken = settings.value("webtoken")
            headers={"Authorization":handleweb_webtoken}
        #     -----------------------------------------------------------------------
            another_config = configparser.ConfigParser()
            if another_config.read(CONFIG_PATH):
                print("hello....3.")
                
                another_config.read(CONFIG_PATH)
                set_qr_pc_number = another_config['Details']['pc-id']
                set_qr_franchise_id = another_config['Details']['franchise']


                # -------------------group id reservation get start-----------------------------------------------------

                try:
                        # Make a GET request to your Node.js API 
                        # id = franchiseid
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        response = requests.get('https://server.zeusgaming.gg/api/consolepc/getconsolepc?id={0}&type=PC&number={1}'.format(set_qr_franchise_id,set_qr_pc_number),headers=headers)  # Replace with your API endpoint

                        # Check if request was successful (status code 200)
                        print("response.status_code group id reservation-----------",response.status_code)
                        print("response.status_code group id reservation-----------",response.json())
                        if response.status_code == 200:
                                data = response.json()  # Convert response to JSON format 

                                print(">>>>>>>>>>>>>>newwww>>>>>>>>>>>>>>>>>>>>>>",data['data'])
                                print(">>>>>>>>>>>>>>newwww>>>>>>>>>>>>>>>>>>>>>>",data['data']['data'][0]['id'])
                                set_qr_pc_id_from_pc_details = data['data']['data'][0]['id']
                                print(">>>>>>>>>>>>>>>>>>>>set_qr_pc_id_from_pc_details ",set_qr_pc_id_from_pc_details)
                                        
                        else:
                                print("data group id reservation ????")

                except requests.exceptions.RequestException as e:
                        print("data group id reservation ????---------")

                # -----------------------------group id reservation get end -------------------------------------------       

        #     -----------------------------------------------------------------------
            

            try:
                # Make a GET request to your Node.js API endpoint
                response = requests.get('https://server.zeusgaming.gg/api/reservation/getreservation?client={0}&pc_id={1}'.format(handleExe_login_user_id,set_qr_pc_id_from_pc_details),headers=headers)  # Replace with your API endpoint

                # Check if request was successful (status code 200)
                print("response.status_code------",response.status_code)
                if response.status_code == 200:
                        data = response.json()  # Convert response to JSON format
                        # Update the label text with the received data
                        print("----------data---user slot time-----------")
                        print("data---user slot time",data)
                        print("data---user slot time",data['data']['data'])
                        print("----------data---user slot time-----------")

                        # -----------------------------------------------------------------------------------
                        # today = datetime.date.today()

                        # print("today---user slot date slicing",today)
                        now = datetime.datetime.now()

                        current_time_1 = now.strftime("%H:%M:%S")
                        print("Current Time =", current_time_1)

                        start = datetime.datetime.strptime(current_time_1, "%H:%M:%S") 
                        end = datetime.datetime.strptime(data['data']['data'][0]['endtime'], "%H:%M:%S") 
                        
                        difference = end - start 
                        
                        seconds = difference.total_seconds() 
                        print('difference in seconds is:', seconds) 
                        
                        # minutes = seconds / 60
                        # print('difference in minutes is:', minutes) 
                        
                        # hours = seconds / (60 * 60) 
                        # print('difference in hours is:', hours)
                        # # -----------------------------------------------------------------------------------

                        print("data---user slot date slicing",data['data']['data'][0]['date'][0:10])
                        print("data---user slot date slicing",data['data']['data'][0]['starttime'])
                        print("data---user slot date slicing",data['data']['data'][0]['endtime'])

                else:
                        print("data user slot time????")
            except Exception as e:
                               print(">>>>>>>>",e)
                
        except requests.exceptions.RequestException as e:
                print("data user slot time????---------")

        # get user data end-------------------------------

        # # get user data start-----------------------------
        # try:
        #     # Make a GET request to your Node.js API endpoint
        #     response = requests.get('https://server.zeusgaming.gg/api/slotbooking/getslotbooking')  # Replace with your API endpoint

        #     # Check if request was successful (status code 200)
        #     print("response.status_code",response.status_code)
        #     if response.status_code == 200:
        #         data = response.json()  # Convert response to JSON format
        #         # Update the label text with the received data
        #         print("data---user slot time",data['data']['data'])
        #         # -----------------------------------------------------------------------------------
        #         today = datetime.date.today()

        #         print("today---user slot date slicing",today)
        #         now = datetime.datetime.now()

        #         current_time_1 = now.strftime("%H:%M:%S")
        #         print("Current Time =", current_time_1)

        #         start = datetime.datetime.strptime(current_time_1, "%H:%M:%S") 
        #         end = datetime.datetime.strptime(data['data']['data'][0]['endtime'], "%H:%M:%S") 
                
        #         difference = end - start 
                
        #         seconds = difference.total_seconds() 
        #         print('difference in seconds is:', seconds) 
                
        #         minutes = seconds / 60
        #         print('difference in minutes is:', minutes) 
                
        #         hours = seconds / (60 * 60) 
        #         print('difference in hours is:', hours)
        #         # -----------------------------------------------------------------------------------

        #         print("data---user slot date slicing",data['data']['data'][0]['date'][0:10])
        #         print("data---user slot date slicing",data['data']['data'][0]['starttime'])
        #         print("data---user slot date slicing",data['data']['data'][0]['endtime'])

        #     else:
        #         print("data user slot time????")

        # except requests.exceptions.RequestException as e:
        #         print("data user slot time????---------")

        # # get user data end-------------------------------
       
        self.small_window.label_3.setText(data['data']['data'][0]['duration']+" hrs")

        self.current_time = int(seconds)
        # self.current_time = int(50)

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_timer)
        self.timer.start(1000)
        # ---------------add hot key for arrow start--------------------------------------

        # keyboard.add_hotkey('ctrl+alt+k', self.open_window)
        # keyboard.add_hotkey('ctrl+alt+j', self.close_window)

        

        # ---------------add hot key for arrow end----------------------------------------

#     def keyPressEvent(self, event):
#         print('in function')  
#         modifiers = QApplication.keyboardModifiers()

#         if (event.modifiers() == Qt.AltModifier | Qt.ControlModifier) and event.key() == Qt.Key_F: #Press Alt+ctrl+F
#             print("hello")
#             self.new_window = NewWindow()
#             self.new_window.show()

  
    
    def open_window(self):
        print("helllllllllllo-min")
        try:
                print("111111111111helllllllllllo-min")
                # self.setWindowState(Qt.WindowMinimized)
                # self.close()

                self.hide()

        except Exception as e:
              print("close win ",e)

    def close_window(self):
        print("helllllllllllo-max")
        try:
                print("222222222222helllllllllllo-max")
                self.show()
                
        except Exception as e:
              print("show win ",e)
        
    def init_ui(self):
        self.setWindowTitle("Main Window")
        self.setFixedSize(70, 65)

        self.tray_widget = TrayWidget(self)
        self.setCentralWidget(self.tray_widget)
        self.move_to_bottom_right_corner()
        print("--------------------------------------------------------")
        # smallWindowThread = threading.Thread(target=SmallWindow())
        self.small_window = SmallWindow()
        # self.small_window = smallWindowThread.start()
        print("--------------------------------------------------------")

    def move_to_bottom_right_corner(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)

        screen_geometry = QApplication.desktop().screenGeometry()
        margin = 100
        window_geometry = self.frameGeometry()
        self.move(screen_geometry.width() - window_geometry.width(),
                  screen_geometry.height() - window_geometry.height())

    def show_small_window(self):
        self.small_window.move_to_above_main_window(self)
        self.small_window.show()
        
    def minimize_windows_except_target(target_title):
        # Get the list of all window titles
        window_titles = pyautogui.getAllTitles()
        print(window_titles)

        # Minimize all windows except the target
        for title in window_titles:
                if title not in target_title:
                        try:
                                # Minimize the window
                                pyautogui.getWindowsWithTitle(title)[0].minimize()
                        except:
                                pass  # Handle cases where window can't be minimized

    def update_timer(self):
        if self.current_time!=-1:  

                # 5 min alert
                if self.current_time == 300: 
                        try:
                                self.new_window = NewWindow()
                                self.new_window.label_3.setText("Slot is going to expire in 5 minutes.")
                                self.new_window.show()
                        except:
                               pass

                # 15 min alert
                if self.current_time == 900:
                        try:
                                self.new_window = NewWindow()
                                self.new_window.label_3.setText("Slot is going to expire in 15 minutes.")
                                self.new_window.show()
                        except:
                               pass

                # 30 min alert
                # if self.current_time == 1800:
                #         try:
                #                 self.new_window = NewWindow()
                #                 self.new_window.label_3.setText("Slot is going to expire in 30 minutes.")
                #                 self.new_window.show()
                #         except:
                #                pass
                
                print("SELF--------------------")
                print("SELF--------------------",self.current_time)
                print("SELF--------------------")
                 
                mins, secs = divmod(self.current_time, 60)
                hours, mins = divmod(mins, 60)
                days, hours = divmod(hours, 24)
                timer = '{:02d}:{:02d}:{:02d}'.format(hours, mins, secs)
                self.small_window.label_5.setText(timer)

                if self.current_time == 0:
                        try:
                                settings = QSettings("MyCompany", "MyApp")

                                handleExe_end_time = datetime.datetime.now().strftime("%H:%M:%S")
                                settings.setValue("handleExe_end_time", handleExe_end_time)

                                handleExe_end_time_from_timer = "from_timer_0"
                                settings.setValue("handleExe_end_time_from_timer", handleExe_end_time_from_timer)

                                handleExe_end_time_from_timer_otherapps = "otherapps_from_timer_0"
                                settings.setValue("handleExe_end_time_from_timer_otherapps", handleExe_end_time_from_timer_otherapps)
                        except:
                               pass

                # -----------------------put for reservation update start------------
                        set_group_id_of_login_user = settings.value("set_group_id_of_login_user", type=str)
                        set_reservation_id_of_login_user = settings.value("set_reservation_id_of_login_user", type=str)
                        data = {
                                "id": set_reservation_id_of_login_user,
                                "status": "Inactive"
                        }
                        settings = QSettings("MyCompany", "MyApp")
                        handleweb_webtoken = settings.value("webtoken")
                        headers={"Authorization":handleweb_webtoken}
                        try:
                                url = "https://server.zeusgaming.gg/api/reservation/editreservation"  # Replace with your API endpoint
                                response = requests.put(url, json=data,headers=headers)
                                if response.status_code == 200:
                                        print("Data submitted editreservation successfully.")
                                else:
                                        print(f"Failed to submit peditreservation. Status code: {response.status_code}")
                        except Exception as e:
                                print(f"Error editreservation: {e}")
                # -----------------------put for reservation update end  ------------
                        try:
                                self.set_close_main() #minimize all the window 

                                Exe_Close_check()

                                Exe_Otherapps_Close_check()

                                zeusConsole.show_Login_Stack_post()
                        except:
                               pass
                
                self.current_time -= 1

    def minimize_windows_except_target(self,target_title):
        # Get the list of all window titles
        window_titles = pyautogui.getAllTitles()
        print(window_titles)

        # Minimize all windows except the target
        for title in window_titles:
            if title not in target_title:
                try:
                        # Minimize the window
                        pyautogui.getWindowsWithTitle(title)[0].minimize()
                        print("task done")
                except:
                        pass  # Handle cases where window can't be minimized

    def set_close_main(self):
        # Set the target window title
        target_title = "ZEUS.exe" #Minimize all windows except the target
        # target_title = "ZEUS.py - ZEUS_Software - Visual Studio Code [Administrator]" #Minimize all windows except the target

        # Minimize all windows except the target
        self.minimize_windows_except_target(target_title)

class ProcessThread(QThread):
    def __init__(self, parent=None):
        super(ProcessThread, self).__init__(parent)
    
    def run(self):
        try:
                settings = QSettings("MyCompany", "MyApp")

                path_from_app = settings.value("filepath", type=str)
                print("filepath",path_from_app)


                start_time = datetime.datetime.now().strftime("%H:%M:%S")
                print("><><<>>>>start",start_time)
                # Instantiate QProcess
                process = QProcess()
                
                # Set up the command and arguments
                command = path_from_app
                arguments = ["arg1", "arg2"]  # Replace with actual arguments
                
                # Start the process
                process.start(command,arguments)

                process.waitForFinished(-1)

                # # Record end time
                end_time = datetime.datetime.now().strftime("%H:%M:%S")
                
                settings.setValue("handleExe_start_time", start_time)

                # retrieve value
                handleExe_end_time_from_timer = settings.value("handleExe_end_time_from_timer", type=str)
                print("handleExe_end_time_from_timer >>>>>>>>>>>>>>>>>>>>",handleExe_end_time_from_timer)

                #         print("innnnnnnn")

                # # Calculate duration
                # duration = end_time - start_time

                print("Process took start seconds threading",start_time)
                print("Process took end seconds threading",end_time)

                if handleExe_end_time_from_timer != "from_timer_0":
                        if end_time:
                                settings.setValue("handleExe_end_time", end_time)

                                Exe_Close_check()
        except Exception as e :
              print("exception in process thread ----->",e)

class ProcessThread_otherapps(QThread):
    def __init__(self, parent=None):
        super(ProcessThread_otherapps, self).__init__(parent)
    
    def run(self):
        try:
                settings = QSettings("MyCompany", "MyApp")

                path_from_app = settings.value("otherapps_filepath", type=str)
                print("otherapps_filepath",path_from_app)

                start_time_otherapps = datetime.datetime.now().strftime("%H:%M:%S")
                print("><><<>>>>start otherapps",start_time_otherapps)

                # Instantiate QProcess
                process_otherapps = QProcess()
                
                # Set up the command and arguments
                command = path_from_app
                arguments = ["arg1", "arg2"]  # Replace with actual arguments
                
                # Start the process_otherapps
                process_otherapps.start(command,arguments)

                process_otherapps.waitForFinished(-1)

                # # Record end time
                end_time_otherapps = datetime.datetime.now().strftime("%H:%M:%S")
                
                settings.setValue("otherapps_handleExe_start_time", start_time_otherapps)

                # retrieve value
                handleExe_end_time_from_timer_otherapps = settings.value("handleExe_end_time_from_timer_otherapps", type=str)
                print("handleExe_end_time_from_timer_otherapps >>>>>>>>>>>>>>>>>>>>",handleExe_end_time_from_timer_otherapps)

                #         print("innnnnnnn")
                        # otherapps_filepath
                        # otherapps_handleExe_id
                        # otherapps_handleExe_start_time
                        # otherapps_handleExe_end_time
                        # otherapps_handleExe_end_time_from_timer
                        # handleExe_set_from_timer_otherapps_start_time

                # # Calculate duration
                # duration = end_time_otherapps - start_time_otherapps

                print("Process_otherapps took start seconds threading",start_time_otherapps)
                print("Process_otherapps took end seconds threading",end_time_otherapps)

                if handleExe_end_time_from_timer_otherapps != "otherapps_from_timer_0":
                        if end_time_otherapps:
                                settings.setValue("otherapps_handleExe_end_time", end_time_otherapps)

                                Exe_Otherapps_Close_check()
        except Exception as e :
              print("exception in process_otherapps thread otherapps ----->",e)

# over lay Tray class end---------------------------------------



# def call_new(filename):   
#         previous_state = None
#         opened_once = False

#         while True:
#                 window_titles = pyautogui.getAllTitles()
#                 # print(">>>>>>>>>>>>>>>>>>>>>>>>",window_titles)
#                 valorant_found = False
#                 for title in window_titles:
#                         if filename in title:
#                                 valorant_found = True
#                                 break
                        
#                 if valorant_found:
#                         if previous_state != "open":
#                                 previous_state = "open"
#                                 print(f"{filename} opened at:", time.strftime("%Y-%m-%d %H:%M:%S"))
#                                 opened_once = True
#                 else:
#                         if previous_state == "open" and opened_once:
#                                 previous_state = "closed"
#                                 print(f"{filename} closed at:", time.strftime("%Y-%m-%d %H:%M:%S"))
#                                 print("Exiting...")
#                                 break
                
#                 time.sleep(1)
     
# def execute_exe(path,id):
#         settings = QSettings("MyCompany", "MyApp")

#         settings.remove("handleExe_id")
#         settings.remove("handleExe_start_time")
#         settings.remove("handleExe_login_user_id")
#         settings.remove("handleExe_end_time")
#         settings.remove("handleExe_end_time_from_timer")

#         print("..........................",id)
#         start_time = datetime.datetime.now().strftime("%H:%M:%S")

#         # Replace 'your_executable.exe' with the actual path to your executable file
#         threading.Thread(target=subprocess.run([path])).start()

#         end_time =datetime.datetime.now().strftime("%H:%M:%S")
#         print(f'Start Time: {start_time}\nEnd Time: {end_time}')

#         handleExe_id = id
#         handleExe_start_time = start_time
#         handleExe_login_user_id = login_user_id


#         # Create a QSettings object
#         # print(">>>>>>>>>>>>>>>>>>>>>>>>>>",QSettings.fileName(settings))

#         # Save a value
#         settings.setValue("handleExe_id", id)

#         settings.setValue("handleExe_start_time", start_time)

#         settings.setValue("handleExe_login_user_id", login_user_id)

#         # retrieve value
#         handleExe_end_time_from_timer = settings.value("handleExe_end_time_from_timer", type=str)
#         print("handleExe_end_time_from_timer >>>>>>>>>>>>>>>>>>>>",handleExe_end_time_from_timer)

#         if handleExe_end_time_from_timer != "from_timer_0":
#                 print("innnnnnnn")
#                 if end_time:
#                         settings.setValue("handleExe_end_time", end_time)

#                         print(">>>>>>>>>>>>>>>>>>>id",id)
#                         print(">>>>>>>>>>>>>>>>>>>id1",start_time)
#                         print(">>>>>>>>>>>>>>>>>>>id2",end_time)
#                         print(">>>>>>>>>>>>>>>>>>>id3",datetime.date.today())
#                         print(">>>>>>>>>>>>>>>>>>>self.login_user_id",login_user_id)
                        # Exe_Close_check()

class QRLoginThread(QThread):

    def __init__(self, parent=None):
        super(QRLoginThread, self).__init__(parent)
        self._is_running = True
        print("inche.................",self._is_running)

        # Create a QTimer object
        self.check_timer = QTimer()
        # Connect the QTimer timeout signal to your function
        self.check_timer.timeout.connect(self.check_api_and_restart)

        print("check_timer",self.check_timer)
        # Start the check_timer
        self.check_timer.start(3000)  # Start immediately
        
    def start(self,val):
        print(">>>>>innnnnnnnnnnn",val)
        print(">>>>>innnnnnnnnnnn",self)
        print(">>>>>innnnnnnnnnnn",self._is_running)
 
        self._is_running = True
        print(">>>>>innnnnnnnnnnn",self._is_running)

    def stop(self):
        self._is_running = False

    # Assuming you have a function to check the Node.js API
    def check_node_api(self):
        print("innnn")

        another_config = configparser.ConfigParser()
        if another_config.read(CONFIG_PATH):
                print("hello...from_three_sec_check")
                
                another_config.read(CONFIG_PATH)
                set_qr_pc_number = another_config['Details']['pc-id']
                set_qr_franchise_id = another_config['Details']['franchise']

                # ---------------------------------------------------------------------------------------------------
                settings = QSettings("MyCompany", "MyApp")
                handleweb_webtoken = settings.value("webtoken")
                headers={"Authorization":handleweb_webtoken}
                try:
                        # Make a GET request to your Node.js API 
                        # id = franchiseid
                        response = requests.get('https://server.zeusgaming.gg/api/consolepc/getconsolepc?id={0}&type=PC&number={1}'.format(set_qr_franchise_id,set_qr_pc_number),headers=headers)  # Replace with your API endpoint

                        # Check if request was successful (status code 200)
                        print("response.status_code group id reservation-----------",response.status_code)
                        print("response.status_code group id reservation-----------",response.json())
                        if response.status_code == 200:
                                data = response.json()  # Convert response to JSON format 
                                print(">>>>>>>>>>>>checkkkkkk",len(data['data']['data']))
                                print(">>>>>>>>>>>>checkkkkkk",data['data']['data'])
                                if len(data['data']['data'])==1:
                                        set_qr_pc_id_from_pc_details = data['data']['data'][0]['id']

                                        try:
                                                settings = QSettings("MyCompany", "MyApp")
                                                handleweb_webtoken = settings.value("webtoken")
                                                headers={"Authorization":handleweb_webtoken}

                                                response = requests.get('https://server.zeusgaming.gg/api/signup/checkqrlogin?pcid={0}'.format(set_qr_pc_id_from_pc_details),headers=headers)
                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>from 200",response.json())
                                                if response.status_code == 200:
                                                        print("Node.js API is up and running!") 
                                                        data = response.json()  # Convert response to JSON format 
                                                        print(">>>>>>>>>>>>>>>>>>>>>>>>>from 200>>>>>>>>>>>>")
                                                        print(">>>>>>>>>>>>>>>>>>>>>>>>>from 200>>>>>>>>>>>>",data['data'])
                                                        print(">>>>>>>>>>>>>>>>>>>>>>>>>from 200>>>>>>>>>>>>")
                                                        
                                                        # user find--------------------------------------------
                                                        if len(data['data'])==1:

                                                                # -----------------------------updateprofiledata-------------------------------------------------
                                                
                                                                data_new = {   
                                                                        "id": data['data'][0]['id'],
                                                                        "mobileauthentication": 0
                                                                }
                                                                settings = QSettings("MyCompany", "MyApp")
                                                                handleweb_webtoken = settings.value("webtoken")
                                                                headers={"Authorization":handleweb_webtoken}
                                                                print(">>>>>>>>>>>>>>>>",data['data'][0]['id'])
                                                                try:
                                                                        url = "https://server.zeusgaming.gg/api/signup/updateprofiledata"  # Replace with your API endpoint
                                                                        response = requests.put(url, json=data_new,headers=headers)
                                                                        if response.status_code == 200:
                                                                                print("Data submitted updateprofiledata successfully.")
                                                                        else:
                                                                                print(f"Failed to submit updateprofiledata. Status code: {response.status_code}")
                                                                except Exception as e:
                                                                        print(f"Error updateprofiledata: {e}")

                                                                # ------------------------------------------------------------------------------

                                                                print(">thread stop",len(data['data']))
                                                                print(">check qr datssss",data['data'])

                                                                check_zeusConsole=zeusConsole

                                                                settings = QSettings("MyCompany", "MyApp")
                                                                settings.remove("handleExe_login_user_id")
                                                                settings.setValue("handleExe_login_user_id", data['data'][0]['id'])

                                                                settings.remove("handleExe_role_id")
                                                                settings.setValue("handleExe_role_id", data['data'][0]['role_id'])
                                                                
                                                                handleExe_login_user_id = settings.value("handleExe_login_user_id", type=str)

                                                                print("><><><><><><><><>>>>>>>>>>>>>>>")
                                                                print("><><><>",handleExe_login_user_id)
                                                                print("><><><>",handleExe_login_user_id)
                                                                print("><><><>",handleExe_login_user_id)
                                                                print("><><><><><><><><>>>>>>>>>>>>>>>")

                                                                # -----------------------delete old parent----------------------------
                                                                try:
                                                                        settings = QSettings("MyCompany", "MyApp")
                                                                        handleweb_view_wallet = settings.value("handleweb_view_wallet")
                                                                        #     for wallet parent remove--------------------
                                                                        for i in reversed(range(zeusConsole.verticalLayout_36.count())):
                                                                                item = zeusConsole.verticalLayout_36.itemAt(i)
                                                                                if item.widget() and item.widget().objectName() == handleweb_view_wallet:
                                                                                        widget = item.widget()
                                                                                        zeusConsole.verticalLayout_36.removeWidget(widget)
                                                                                        widget.deleteLater()
                                                                                        break
                                                                        #     for wallet parent remove--------------------
                                                                        
                                                                        handleweb_view_food = settings.value("handleweb_view_food")
                                                                        #     for order food parent remove--------------------
                                                                        for i in reversed(range(zeusConsole.horizontalLayout_25.count())):
                                                                                item = zeusConsole.horizontalLayout_25.itemAt(i)
                                                                                if item.widget() and item.widget().objectName() == handleweb_view_food:
                                                                                        widget = item.widget()
                                                                                        zeusConsole.horizontalLayout_25.removeWidget(widget)
                                                                                        widget.deleteLater()
                                                                                        break
                                                                        #     for order food parent remove--------------------------
                                                                except Exception as e:
                                                                        print(">>>>>> show_otpVerify_Stack ",e)
                                                                # -----------------------delete old parent----------------------------
                                                                # ---------------------------------------------------------------
                                                                settings = QSettings("MyCompany", "MyApp")
                                                                handleweb_webtoken = settings.value("webtoken")
                                                                headers=handleweb_webtoken

                                                                web_view_wallet = QWebEngineView()
                                                                web_view_wallet.setObjectName("web_view_wallet")
                                                                web_view_wallet.setUrl(QUrl("https://www.zeusgaming.gg/software_wallet/{0}/{1}".format(handleExe_login_user_id,headers)))  # Corrected line
                                                                check_zeusConsole.verticalLayout_36.addWidget(web_view_wallet)

                                                                print("<<<<< Qr wallet >>>>>>")
                                                                print("<<<<< Qr wallet >>>>>>","https://www.zeusgaming.gg/software_wallet/{0}/{1}".format(handleExe_login_user_id,headers))
                                                                print("<<<<< Qr wallet >>>>>>")
                                                                
                                                                settings = QSettings("MyCompany", "MyApp")
                                                                settings.remove("handleweb_view_wallet")
                                                                settings.setValue("handleweb_view_wallet",web_view_wallet.objectName())
                                                                
                                                                print("clear cache-----------------------------")
                                                                # ------------wallet web end-----------------------------------------------

                                                                # --------------order food start-------------------------------------------
                                                                

                                                                web_view_food = QWebEngineView()
                                                                web_view_food.setObjectName("web_view_food")
                                                                # web_view_food.setUrl(QUrl("https://www.zeusgaming.gg/software_orderFood/{0}".format(handleExe_login_user_id)))  # Corrected line
                                                                web_view_food.setUrl(QUrl("https://www.zeusgaming.gg/software_orderFood/{0}/{1}/{2}".format(handleExe_login_user_id,set_qr_franchise_id,headers)))  # Corrected line

                                                                check_zeusConsole.horizontalLayout_25.addWidget(web_view_food)
                                                                settings.remove("handleweb_view_food")
                                                                settings.setValue("handleweb_view_food",web_view_food.objectName())
                                                                # ---------------order food end--------------------------------------------
                                                                print(">>>>>>>>>>>>hello>>>>>>>>>>",handleExe_login_user_id)

                                                                # self.referralOfCodeProfileInsideMainStackWidget.setText( datas['data']['referralcode'])
                                                                check_zeusConsole.nameOfUserLabelProfileInsideMainStackWidget.setText(data['data'][0]['name'])
                                                                check_zeusConsole.emailOfUserProfileInsideMainStackWidget.setText(data['data'][0]['email'])
                                                                check_zeusConsole.usernameOfUserLabelProfileInsideMainStackWidget.setText(data['data'][0]['username'])


                                                                # -----------------------------profile set profile pic start--------------------------

                                                                # -----------------------------profile pic rounded start------------------------------
                                                                settings = QSettings("MyCompany", "MyApp")
                                                                handleweb_webtoken = settings.value("webtoken")
                                                                headers={"Authorization":handleweb_webtoken}
                                                                get_pic=data['data'][0]['profilepicture']

                                                                try:
                                                                        response = requests.get(f'https://server.zeusgaming.gg/profilepicture/{get_pic}',headers=headers)

                                                                        if response.status_code == 200:
                                                                        # Load the image data into QPixmap
                                                                                pixmap = QPixmap()
                                                                                pixmap.loadFromData(response.content)
                                                                        else:
                                                                                print("hello else qrlogin")
                                                                except Exception as e:
                                                                        print(">>>>>>>>",e)
                                                                # pixmap = QPixmap(r"https://server.zeusgaming.gg/{0}".format(datas['data']['profilepicture']))
                                                                pixmap = pixmap.scaled(250, 250, Qt.KeepAspectRatio)

                                                                # Calculate the radius for the circle
                                                                radius = min(pixmap.width(), pixmap.height()) // 2

                                                                # Create a circular mask
                                                                mask = QBitmap(pixmap.size())
                                                                mask.fill(Qt.white)
                                                                painter = QPainter(mask)
                                                                painter.setBrush(QBrush(Qt.black))
                                                                # Draw a circle with a radius of 50% of the minimum dimension
                                                                painter.drawEllipse((pixmap.width() - radius) // 2, (pixmap.height() - radius) // 2, radius, radius)
                                                                painter.end()
                                                                pixmap.setMask(mask)

                                                                # label = QLabel(self)
                                                                check_zeusConsole.profilePhotoProfileInsideMainStackWidget.setPixmap(pixmap)

                                                                # -----------------------------end-------------------------------------------------------

                                                                # ---------------------------------------------------------------
                                                                print("-------------------add recent games of user start-------------------------------------------------------------------")
                                                                settings = QSettings("MyCompany", "MyApp")
                                                                handleweb_webtoken = settings.value("webtoken")
                                                                headers={"Authorization":handleweb_webtoken}
                                                                try:
                                                                        handleExe_login_user_id = settings.value("handleExe_login_user_id", type=str)
                                                                        # Make a GET request to your Node.js API endpoint
                                                                        response = requests.get(f'https://server.zeusgaming.gg/api/gameplayhistory/getgameplayhistory?id={handleExe_login_user_id}',headers=headers)  # Replace with your API endpoint

                                                                        # Check if request was successful (status code 200)
                                                                        print("response.status_code for recent games",response.status_code)
                                                                        if response.status_code == 200:
                                                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
                                                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
                                                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
                                                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
                                                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
                                                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
                                                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
                                                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
                                                                                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
                                                                                data = response.json()  # Convert response to JSON format

                                                                                print("data from recent get...",data['data']['data'])

                                                                                print("length of data from recent get...",len(data['data']['data']))
                                                                                check_zeusConsole.set_recentgames_height_main = 0
                                                                                check_zeusConsole.set_recentgames_height_maincard = 0

                                                                                
                                                                                check_zeusConsole.check_length_of_recentApps = len(data['data']['data']) #15
                                                                                if check_zeusConsole.check_length_of_recentApps >5:
                                                                                        check_zeusConsole.start_length_of_recentApps = len(data['data']['data']) - 5 #10
                                                                                else:
                                                                                        check_zeusConsole.start_length_of_recentApps = 0



                                                                                # if len(data['data']['data']) > 5:
                                                                                # else:
                                                                                for i in range(check_zeusConsole.start_length_of_recentApps,len(data['data']['data'])):
                                                                                        # ---------------------profile recent activity start----------------------------------------
                                                                                        
                                                                                        check_zeusConsole.widget_9 = QtWidgets.QWidget(check_zeusConsole.SectionthirdProfileInsideMainStackWidget)
                                                                                        check_zeusConsole.widget_9.setMinimumSize(QtCore.QSize(0, 50))
                                                                                        check_zeusConsole.widget_9.setMaximumSize(QtCore.QSize(16777215, 50))
                                                                                        check_zeusConsole.widget_9.setStyleSheet("background-color: white;")
                                                                                        check_zeusConsole.widget_9.setObjectName("widget_9")

                                                                                        check_zeusConsole.horizontalLayout_5 = QtWidgets.QHBoxLayout(check_zeusConsole.widget_9)
                                                                                        check_zeusConsole.horizontalLayout_5.setContentsMargins(15, -1, 15, -1)
                                                                                        check_zeusConsole.horizontalLayout_5.setObjectName("horizontalLayout_5")

                                                                                        check_zeusConsole.label_11 = QtWidgets.QLabel(check_zeusConsole.widget_9)
                                                                                        font = QtGui.QFont()
                                                                                        font.setFamily("Cascadia Code")
                                                                                        font.setPointSize(13)
                                                                                        font.setBold(True)
                                                                                        check_zeusConsole.label_11.setFont(QFont('raleway',16,100))
                                                                                        check_zeusConsole.label_11.setObjectName("label_11")
                                                                                        check_zeusConsole.horizontalLayout_5.addWidget(check_zeusConsole.label_11)
                                                                                        check_zeusConsole.label_11.setText( data['data']['data'][i]['filename'])

                                                                                        spacerItem12 = QtWidgets.QSpacerItem(894, 19, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                                                                                        check_zeusConsole.horizontalLayout_5.addItem(spacerItem12)

                                                                                        check_zeusConsole.label_12 = QtWidgets.QLabel(check_zeusConsole.widget_9)
                                                                                        font = QtGui.QFont()
                                                                                        font.setFamily("Cascadia Code")
                                                                                        font.setPointSize(12)
                                                                                        check_zeusConsole.label_12.setFont(QFont('raleway',14))
                                                                                        check_zeusConsole.label_12.setObjectName("label_12")
                                                                                        check_zeusConsole.label_12.setText(data['data']['data'][i]['totaltime'])
                                                                                        check_zeusConsole.horizontalLayout_5.addWidget(check_zeusConsole.label_12)
                                                                                        check_zeusConsole.verticalLayout_10.addWidget(check_zeusConsole.widget_9)

                                                                                        settings = QSettings("MyCompany", "MyApp")
                                                                                        settings.remove("handle_profile_recent_activity")
                                                                                        settings.setValue("handle_profile_recent_activity",check_zeusConsole.widget_9.objectName())

                                                                                        # ---------------------profile recent activity end----------------------------------------

                                                                                        # -------------------main page recent activity start--------------------------------------
                                                                                        check_zeusConsole.set_recentgames_height_main=40
                                                                                        check_zeusConsole.set_recentgames_height_maincard=300

                                                                                        check_zeusConsole.recentGameCardInsideMainStackWidget = QtWidgets.QGroupBox(check_zeusConsole.scrollAreaWidgetContentsInsideMainStackWidget)
                                                                                        check_zeusConsole.recentGameCardInsideMainStackWidget.setMinimumSize(QtCore.QSize(250, 0))
                                                                                        check_zeusConsole.recentGameCardInsideMainStackWidget.setMaximumSize(QtCore.QSize(250, 272))
                                                                                        check_zeusConsole.recentGameCardInsideMainStackWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
                                                                                        check_zeusConsole.recentGameCardInsideMainStackWidget.setTitle("")
                                                                                        check_zeusConsole.recentGameCardInsideMainStackWidget.setObjectName("recentGameCardInsideMainStackWidget")
                                                                                        check_zeusConsole.verticalLayout_20 = QtWidgets.QVBoxLayout(check_zeusConsole.recentGameCardInsideMainStackWidget)
                                                                                        check_zeusConsole.verticalLayout_20.setContentsMargins(0, 0, 0, 0)
                                                                                        check_zeusConsole.verticalLayout_20.setSpacing(0)
                                                                                        check_zeusConsole.verticalLayout_20.setObjectName("verticalLayout_20")
                                                                                        check_zeusConsole.gameImageRecentGameCardInsideMainStackWidget = QtWidgets.QLabel(check_zeusConsole.recentGameCardInsideMainStackWidget)
                                                                                        check_zeusConsole.gameImageRecentGameCardInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 173))
                                                                                        check_zeusConsole.gameImageRecentGameCardInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 173))
                                                                                        check_zeusConsole.gameImageRecentGameCardInsideMainStackWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
                                                                                        check_zeusConsole.gameImageRecentGameCardInsideMainStackWidget.setText("")

                                                                                        settings = QSettings("MyCompany", "MyApp")
                                                                                        handleweb_webtoken = settings.value("webtoken")
                                                                                        headers={"Authorization":handleweb_webtoken}
                                                                                        get_pic=data['data']['data'][i]['imagepath']
                                                                                        # print("getpic",get_pic)
                                                                                        try:
                                                                                                response = requests.get(f'https://server.zeusgaming.gg/gamefiles/{get_pic}',headers=headers)

                                                                                                if response.status_code == 200:
                                                                                                        # print(">>>>>>>>>>>>>>>>>>>>>>>>>innnnnnnnnnnnnnnnnnnnnnnnn")
                                                                                                # Load the image data into QPixmap
                                                                                                        pixmap = QPixmap()
                                                                                                        pixmap.loadFromData(response.content)
                                                                                                        check_zeusConsole.gameImageRecentGameCardInsideMainStackWidget.setPixmap(pixmap)

                                                                                                else:
                                                                                                        print("hello from game play activityhome qr")
                                                                                        except Exception as e:
                                                                                                print(">>>>>>>>",e)
                                                                                        # check_zeusConsole.gameImageRecentGameCardInsideMainStackWidget.setPixmap(QtGui.QPixmap(r"C:\ZEUS_Media\{0}.png".format(data['data']['data'][i]['filename'])))
                                                                                        check_zeusConsole.gameImageRecentGameCardInsideMainStackWidget.setScaledContents(True)
                                                                                        check_zeusConsole.gameImageRecentGameCardInsideMainStackWidget.setObjectName("gameImageRecentGameCardInsideMainStackWidget")
                                                                                        check_zeusConsole.verticalLayout_20.addWidget(check_zeusConsole.gameImageRecentGameCardInsideMainStackWidget)
                                                                                        check_zeusConsole.nameAndButtonSectionRecentGameCardInsideMainStackWidget = QtWidgets.QWidget(check_zeusConsole.recentGameCardInsideMainStackWidget)
                                                                                        check_zeusConsole.nameAndButtonSectionRecentGameCardInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, 101))
                                                                                        check_zeusConsole.nameAndButtonSectionRecentGameCardInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, 101))
                                                                                        check_zeusConsole.nameAndButtonSectionRecentGameCardInsideMainStackWidget.setStyleSheet("background-color: rgb(255, 255, 255);")
                                                                                        check_zeusConsole.nameAndButtonSectionRecentGameCardInsideMainStackWidget.setObjectName("nameAndButtonSectionRecentGameCardInsideMainStackWidget")
                                                                                        check_zeusConsole.verticalLayout_21 = QtWidgets.QVBoxLayout(check_zeusConsole.nameAndButtonSectionRecentGameCardInsideMainStackWidget)
                                                                                        check_zeusConsole.verticalLayout_21.setSpacing(12)
                                                                                        check_zeusConsole.verticalLayout_21.setObjectName("verticalLayout_21")
                                                                                        check_zeusConsole.gameNaemRecentGameCardInsideMainStackWidget = QtWidgets.QLabel(check_zeusConsole.nameAndButtonSectionRecentGameCardInsideMainStackWidget)
                                                                                        font = QtGui.QFont()
                                                                                        font.setPointSize(11)
                                                                                        check_zeusConsole.gameNaemRecentGameCardInsideMainStackWidget.setFont(QFont('raleway',12))
                                                                                        check_zeusConsole.gameNaemRecentGameCardInsideMainStackWidget.setText(data['data']['data'][i]['filename'])
                                                                                        
                                                                                        check_zeusConsole.gameNaemRecentGameCardInsideMainStackWidget.setObjectName("gameNaemRecentGameCardInsideMainStackWidget")
                                                                                        check_zeusConsole.verticalLayout_21.addWidget(check_zeusConsole.gameNaemRecentGameCardInsideMainStackWidget)
                                                                                        check_zeusConsole.playButtonRecentGameCardInsideMainStackWidget = QtWidgets.QPushButton(check_zeusConsole.nameAndButtonSectionRecentGameCardInsideMainStackWidget)
                                                                                        check_zeusConsole.playButtonRecentGameCardInsideMainStackWidget.setMaximumSize(QtCore.QSize(75, 16777215))
                                                                                        font = QtGui.QFont()
                                                                                        font.setPointSize(11)
                                                                                        check_zeusConsole.playButtonRecentGameCardInsideMainStackWidget.setFont(QFont('raleway',11,100))
                                                                                        check_zeusConsole.playButtonRecentGameCardInsideMainStackWidget.setText("Play")
                                                                                        # check_zeusConsole.playButtonRecentGameCardInsideMainStackWidget.clicked.connect(lambda state, path=data['data']['data'][i]['filepath']: check_zeusConsole.launch_exe(path))
                                                                                        # check_zeusConsole.playButtonRecentGameCardInsideMainStackWidget.clicked.connect(lambda state, path=data['data']['data'][i]['filepath'],game_id=data['data']['data'][i]['game_id']: execute_exe(path,game_id))
                                                                                        
                                                                                        check_zeusConsole.playButtonRecentGameCardInsideMainStackWidget.clicked.connect(lambda state, path=data['data']['data'][i]['filepath'],game_id=data['data']['data'][i]['game_id']: check_zeusConsole.Not_start_process(path,game_id))
                                                                                        # ----------------------------------------------------------------------------
                                                                                        {'id': 61, 'date': '1970-01-01', 'starttime': '15:18:40', 'endtime': '15:18:48', 'totaltime': '2', 'isdeleted': False, 'client_id': 6, 'game_id': 2, 'games': 2, 'filename': 'Designer tool', 'name': 'raj soni', 'username': 'raj_003'}
                                                                                
                                                                                        # ----------------------------------------------------------------------------
                                                                                        check_zeusConsole.playButtonRecentGameCardInsideMainStackWidget.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0.359565, stop:0.187192 rgba(209, 88, 248, 255), stop:0.935 rgba(151, 71, 255, 255));\n"
                                                                                        "color: rgb(255, 255, 255);\n"
                                                                                        "border-radius : 5;\n"
                                                                                        "padding-top: 8px; padding-bottom: 8px;")
                                                                                        check_zeusConsole.playButtonRecentGameCardInsideMainStackWidget.setObjectName("playButtonRecentGameCardInsideMainStackWidget")
                                                                                        check_zeusConsole.verticalLayout_21.addWidget(check_zeusConsole.playButtonRecentGameCardInsideMainStackWidget)
                                                                                        check_zeusConsole.verticalLayout_20.addWidget(check_zeusConsole.nameAndButtonSectionRecentGameCardInsideMainStackWidget)
                                                                                        check_zeusConsole.gridLayout_2.addWidget(check_zeusConsole.recentGameCardInsideMainStackWidget, 0, i, 1, 1)
                                                                                        check_zeusConsole.secondSectionScrollAreaInsideMainStackWidget.setWidget(check_zeusConsole.scrollAreaWidgetContentsInsideMainStackWidget)

                                                                                        settings = QSettings("MyCompany", "MyApp")
                                                                                        settings.remove("handle_main_page_recent_activity")
                                                                                        settings.setValue("handle_main_page_recent_activity",check_zeusConsole.recentGameCardInsideMainStackWidget.objectName())
                                                                                        # -------------------main page recent activity start--------------------------------------

                                                                                check_zeusConsole.secondSectionScrollAreaInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, check_zeusConsole.set_recentgames_height_maincard))
                                                                                check_zeusConsole.secondSectionScrollAreaInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, check_zeusConsole.set_recentgames_height_maincard))
                                                                        
                                                                                check_zeusConsole.firstSectionFrameInsideMainStackWidget.setMinimumSize(QtCore.QSize(0, check_zeusConsole.set_recentgames_height_main))
                                                                                check_zeusConsole.firstSectionFrameInsideMainStackWidget.setMaximumSize(QtCore.QSize(16777215, check_zeusConsole.set_recentgames_height_main))
                                                                        else:
                                                                                print("data recent games qr????")

                                                                except requests.exceptions.RequestException as e:
                                                                        print("data recent games exception qr????---------")

        
        
                                                                print("------------------------add recent games of user end--------------------------------------------------------------")


                                                                # ---------------------------------------------------------------
                                                            
                                                                # --------------------------------------------
                                                                check_zeusConsole.show_mainSW_after_QR_login_call()

                                                                # self.overlayTry = MainWindow()
                                                                # self.overlayTry.show()
                                                                # --------------------------------------------

                                                                thread2.stop()
                                                                # thread2.quit()
                                                                # thread2.terminate()

                                                                
                                                                                                                                   
                                                else:
                                                        print(">>>>>>>>>>>>>>>>>>>>>>>>>",response.json())
                                                        print("Node.js API is down!")
                                                

                                        except requests.exceptions.RequestException as e:
                                                print(">>>>>>>>>>>>>>>>>>>>>>")
                                                # thread2.stop()
                                                ("Failed to connect to Node.js API.")

                                
                        else:
                                print("data group id reservation ????")

                except requests.exceptions.RequestException as e:
                        print("data group id reservation ????---------")

                # ---------------------------------------------------------------------------------------------------

               
    # Define a function to check the API and start the check_timer again
    def check_api_and_restart(self):
        print("checkinnnnnnnn")
        print("checkinnnnnnnn",self._is_running)
        if self._is_running:
                print('hello....')
                self.check_node_api()
                self.check_timer.start(3000)  # 3000 milliseconds = 3 seconds

# ------------------------------task manager kill thread START--------------------------------------------------------------------

class TaskMgrCheck(QThread):
    
    def __init__(self, parent=None):
        super(TaskMgrCheck, self).__init__(parent)

         # Create a QTimer object
        self.new_timer = QTimer()
        # Connect the QTimer timeout signal to your function
        self.new_timer.timeout.connect(self.check_api_and_restart_run)
        # Start the check_timer
        self.new_timer.start(3000) 
        

    def run(self):
        
        # hide task bar start--------------------------
        
        try:
                hwnd = win32gui.FindWindow("Shell_TrayWnd", None)
                win32gui.ShowWindow(hwnd, win32con.SW_HIDE)
        except Exception as e:
               print(">>>>>>>taskmgrcheck",e)

        # hide task bar end--------------------------

        for proc in psutil.process_iter(['pid', 'name']):
                if "Taskmgr.exe" in proc.info['name']:
                        proc.terminate()

    def check_api_and_restart_run(self):
        self.run()
        self.new_timer.start(3000) 

# ------------------------------task manager kill thread end----------------------------------------------------------------------


# ------------------------------file manager kill thread START--------------------------------------------------------------------

class FileMgrCheck(QThread):
    
    def __init__(self, parent=None):
        super(FileMgrCheck, self).__init__(parent)

        # Create a QTimer object
        self.new_timer_file = QTimer()
        # Connect the QTimer timeout signal to your function
        self.new_timer_file.timeout.connect(self.check_api_and_restart_run_file)
        # Start the check_timer
        self.new_timer_file.start(5000) 

    def run_file(self):
        for proc_file in psutil.process_iter(['pid', 'name']):
                if "explorer.exe" in proc_file.info['name']:
                        proc_file.terminate()

    def check_api_and_restart_run_file(self):
        self.run_file()
        self.new_timer_file.start(5000) 

# ------------------------------file manager kill thread end----------------------------------------------------------------------

# ------------------------prevent win key in sw-------------------------------------------------------

def check_win_keyPress(self):
        keyboard.send('esc')

# keyboard.on_press_key('win', check_win_keyPress)
# keyboard.on_press('win',check_win_keyPress)
keyboard.block_key('win')
# keyboard.on_release_key('win', check_win_keyPress)

# ---------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------
def on_key_event(event):
        
        # Check if the pressed key is Ctrl+Esc
        if event.name == 'esc' and event.event_type == keyboard.KEY_DOWN and event.modifiers() == Qt.ControlModifier:

                print("hello esc")
                print("hello ctrl")

                event.ignore()
                return False  # Returning False suppresses the keypress event

keyboard.on_press_key('esc', on_key_event)

# def block_ctrl_esc(event):

#         print("in qweqeqe",event.name)
#         print("in qweqeqe")
#         print("in qweqeqe")

#         # if event.modifiers() & Qt.ControlModifier:
#         #         if event.key() == Qt.Key_Escape:
#         #                print("in")

#         if keyboard.is_pressed('esc'):
#                 result = call_function()
#                 if not result:
#                         print("Function returned False")

# def call_function():
#         # Your function logic here
#         return False

        # Check if Ctrl is pressed along with Esc
        # if event.name == 'ctrl' and event.event_type == keyboard.KEY_DOWN and event.modifiers() == Qt.Key_Escape:

        # # if event.key() == Qt.Key_Escape and event.key() == Qt.Key_Control and event.event_type == keyboard.KEY_DOWN:
        # # if event.name == 'esc' and keyboard.is_pressed('ctrl'):
        #     print("Ctrl + Esc combination detected and blocked")

#         if event.name == 'ctrl' and event.event_type == 'down':
#                 if keyboard.is_pressed('esc'):
#                         return False
        
# keyboard.on_press(block_ctrl_esc)

# ----------------------------------------------------------------------------------------------------
def show_window_on_f1(self):
        print("helllllllllllo-min")
        try:
                print("111111111111helllllllllllo-min")
               
                try:
                        print("innn")
                        z = zeusConsole.overlayTry
                except:
                        print("innn notttttt")
                        # z = thread2.overlayTry
                try:
                        print("innn check")
                        try:
                                if z.isVisible():
                                        z.hide()
                        except Exception as e:
                              print("eeeeeee",e)
                except:
                        print("innn notttttt check")
                        pass

        except Exception as e:
              print("close win ",e)

def close_window_on_f2(self):
        print("helllllllllllo-max")
        try:
                print("222222222222helllllllllllo-max")
                try:
                        print("innn f222222")
                        z = zeusConsole.overlayTry
                except:
                        print("innn notttttt f222222")
                        # z = thread2.overlayTry

                try:
                        print("innn check f222222")
                        try:
                                if z.isHidden():
                                        z.show()
                        except Exception as e:
                                print("eeeeeee------------",e)     
                except:
                        print("innn notttttt check f222222")
                        pass
                
        except Exception as e:
              print("show win ",e)

def on_enter_press(self):
        print("HELLO")
        print("HELLO")
        print("HELLO")
        print("HELLO")
        check_current_stackpage = zeusConsole.outsideMainStackWidget.currentIndex()
        print("abcabc-----current index is this----",check_current_stackpage) 
        
        if check_current_stackpage == 5:
                print("yes its groupiddd page")
                try:
                        zeusConsole.pushButton_2_GroupID.click() #click continue of groupid page
                except:
                        pass
        elif check_current_stackpage ==1:
                print("yes its simple login page")
                try:
                        zeusConsole.signInButtonLogin.click() #click continue of groupid page
                except:
                        pass
        elif check_current_stackpage ==6:
                print("yes its group info page")
                try:
                        zeusConsole.pushButton_4_GroupInfo.click() #click continue of groupinfo page
                except:
                        pass
        elif check_current_stackpage ==2:
                print("yes its verify page")
                try:
                        zeusConsole.verifyButtonOTP.click() #click continue of verify page
                except:
                        pass
        else:
              print("helllllllmmmmmmm")

def Exe_Close_check():
        try:
                settings = QSettings("MyCompany", "MyApp")
                print("<><><><><><><>",QSettings.fileName(settings))

                # Retrieve a value

                handleExe_id = settings.value("handleExe_id", type=str)
                handleExe_login_user_id = settings.value("handleExe_login_user_id", type=str)
                handleExe_end_time = settings.value("handleExe_end_time", type=str)

                handleExe_end_time_from_timer = settings.value("handleExe_end_time_from_timer", type=str)

                if handleExe_end_time_from_timer:
                        handleExe_start_time = settings.value("handleExe_set_from_timer_game_start_time", type=str)
                else:   
                        handleExe_start_time = settings.value("handleExe_start_time", type=str)

                print("handleExe_id:", handleExe_id)
                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>> handleExe_start_time",handleExe_start_time)
                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>> handleExe_login_user_id",handleExe_login_user_id)
                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>> end_time",handleExe_end_time)

        # # -----------------recent played poststart----------------------------------------------
                get_date=datetime.date.today().strftime("%Y-%m-%d")

                FMT = '%H:%M:%S'
                tdelta = datetime.datetime.strptime(handleExe_end_time, FMT) - datetime.datetime.strptime(handleExe_start_time, FMT)

                hours, remainder = divmod(tdelta.seconds, 3600)
                minutes, seconds = divmod(remainder, 60)

                print("Time difference:", "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)))
                print("Time difference:", "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)))
                print("Time difference:", "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)))
                print("Time difference:", "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)))

                data = {
                        "date": get_date,
                        "starttime": handleExe_start_time,
                        "endtime": handleExe_end_time,
                        "totaltime": "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)),
                        "client_id": handleExe_login_user_id,
                        "game_id": handleExe_id,
                        }
                
                settings.remove("handleExe_id")
                settings.remove("handleExe_start_time")
                settings.remove("handleExe_login_user_id")
                settings.remove("handleExe_end_time")
                settings.remove("handleExe_end_time_from_timer")
                
                settings = QSettings("MyCompany", "MyApp")
                handleweb_webtoken = settings.value("webtoken")
                headers={"Authorization":handleweb_webtoken}
                url = "https://server.zeusgaming.gg/api/gameplayhistory/addgameplayhistory"  # Replace with your API endpoint
                if  "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)) != "00:00:00":
                        try:
                                response = requests.post(url, json=data,headers=headers)
                                print(">>>>>>>>>>>>>>>>>>>>>>>>>>>addgameplayhistory",response.json())
                        
                                if response.status_code == 200:
                                        print("Data submitted play history successfully.")
                                else:
                                        print(f"Failed to submit play history data. Status code: {response.status_code}")
                        except Exception as e:
                                print(f"Error  play history: {e}")
        except Exception as e:
                               print(">>>>>>>>",e)

def Exe_Otherapps_Close_check():

        try:

                settings = QSettings("MyCompany", "MyApp")
                print("<><><><><><><>",QSettings.fileName(settings))

                # Retrieve a value

                # otherapps_filepath
                # otherapps_handleExe_id
                # otherapps_handleExe_start_time
                # otherapps_handleExe_end_time
                # otherapps_handleExe_end_time_from_timer
                # handleExe_set_from_timer_otherapps_start_time


                otherapps_handleExe_id = settings.value("otherapps_handleExe_id", type=str)
                handleExe_login_user_id = settings.value("handleExe_login_user_id", type=str)
                otherapps_handleExe_end_time = settings.value("otherapps_handleExe_end_time", type=str)

                handleExe_end_time_from_timer_otherapps = settings.value("handleExe_end_time_from_timer_otherapps", type=str)

                if handleExe_end_time_from_timer_otherapps:
                        otherapps_handleExe_start_time = settings.value("handleExe_set_from_timer_otherapps_start_time", type=str)
                else:   
                        otherapps_handleExe_start_time = settings.value("otherapps_handleExe_start_time", type=str)

                # print("otherapps_handleExe_id:", otherapps_handleExe_id)
                # print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>> otherapps_handleExe_start_time",otherapps_handleExe_start_time)
                # print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>> handleExe_login_user_id",handleExe_login_user_id)
                # print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>> end_time",otherapps_handleExe_end_time)

        # # -----------------recent played poststart----------------------------------------------
                get_date=datetime.date.today().strftime("%Y-%m-%d")

                FMT = '%H:%M:%S'
                tdelta = datetime.datetime.strptime(otherapps_handleExe_end_time, FMT) - datetime.datetime.strptime(otherapps_handleExe_start_time, FMT)

                hours, remainder = divmod(tdelta.seconds, 3600)
                minutes, seconds = divmod(remainder, 60)

                print("Time otherapps difference:", "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)))
                print("Time otherapps difference:", "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)))
                print("Time otherapps difference:", "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)))
                print("Time otherapps difference:", "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)))

                data = {
                        "date": get_date,
                        # "starttime": otherapps_handleExe_start_time,
                        # "endtime": otherapps_handleExe_end_time,
                        # "totaltime": "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)),
                        "client_id": handleExe_login_user_id,
                        "other_id": otherapps_handleExe_id,
                        }
                
                settings.remove("otherapps_handleExe_id")
                settings.remove("otherapps_handleExe_start_time")
                settings.remove("handleExe_login_user_id")
                settings.remove("otherapps_handleExe_end_time")
                settings.remove("handleExe_end_time_from_timer_otherapps")

                settings = QSettings("MyCompany", "MyApp")
                handleweb_webtoken = settings.value("webtoken")
                headers={"Authorization":handleweb_webtoken}

                url = "https://server.zeusgaming.gg/api/gameplayhistory/addOtherPlayHistory"  # Replace with your API endpoint
                # if  "{:02}:{:02}:{:02}".format(int(hours), int(minutes), int(seconds)) != "00:00:00":
                try:
                        response = requests.post(url, json=data,headers=headers)
                        print(">>>>>>>>>>>>>>>>>>>>>>>>>>>add otherapps",response.json())
                
                        if response.status_code == 200:
                                print("Data submitted otherapps history successfully.")
                        else:
                                print(f"Failed to submit otherapps history data. Status code: {response.status_code}")
                except Exception as e:
                        print(f"Error  play history: {e}")

        except Exception as e:
                               
                               print(">>>>>>>>",e)

# -----------------recent played post end---------------------------------------------------

def check_installation_status():
    # Check if installation has been completed before
    return os.path.exists(CONFIG_PATH)

def get_ip_address():
    # Create a socket object
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # Connect to a remote server (doesn't have to exist)
        s.connect(("8.8.8.8", 80))
        # Get the socket's local address (IP address)
        ip_address = s.getsockname()[0]
    finally:
        s.close()
    return ip_address

def get_mac_address():
    # Get the MAC address of the first network interface
    mac_address = uuid.getnode()
    return ':'.join(("%012X" % mac_address)[i:i+2] for i in range(0, 12, 2))

def sample_execute_exe(path,filename,id):
        print(">>>>>>>>>>>>>",id)

         # Record start time
        start_time = time.time()
        
        # Instantiate QProcess
        process = QProcess()
        
        # Set up the command and arguments
        command = path
        arguments = ["arg1", "arg2"]  # Replace with actual arguments
        
        # Start the process
        process.start(command, arguments)
        
        # Wait for the process to finish (optional)
        process.waitForFinished(-1)
        
        # Record end time
        end_time = time.time()
        
        # Calculate duration
        duration = end_time - start_time
        print("Process took {:.2f} seconds".format(duration))

        # filePath = path

        # if filePath:
        #     try:
        #         print(f"{filename} opened at:", time.strftime("%Y-%m-%d %H:%M:%S"))
        #         os.startfile(filePath)

        #         # threading.Thread(target=call_new(filename)).start()
        #     except Exception as e:
        #         print(f"Error: {e}")

# ----------------------------------------------------------------------------------------------------
# --------task manager kill code----------------------------------------------------------------------

def close_task_manager():
    for proc in psutil.process_iter(['pid', 'name']):
        if "Taskmgr.exe" in proc.info['name']:
            proc.terminate()

# ----------------------------------------------------------------------------------------------------

# ----------- check thread if signin page open close all other apps start -----------------------------------------------------------------------------------------

# class AppMonitor(QThread):
    
#     def __init__(self, exclude_processes):
#         super().__init__()
#         self.exclude_processes = exclude_processes
#         self.running = True

#     def run(self):
#         while self.running:
#             for process in psutil.process_iter(attrs=['pid', 'name']):
#                 try:
#                     process_name = process.info['name']
#                     if process_name and process_name.lower() not in [name.lower() for name in self.exclude_processes]:
#                         psutil.Process(process.info['pid']).terminate()
#                 except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
#                     pass
#             self.sleep(3)  # Check every 3 seconds

#     def stop(self):
#         self.running = False
#         self.quit()
#         self.wait()

# ----------- check thread if signin page open close all other apps end -----------------------------------------------------------------------------------------

if __name__ == "__main__":
        
        if not check_installation_status():
                # setup not
                print("innnn 1st- time user ------------------")
                pass
        else:
                print("innnn 2nd- time user ------------------")
                first_time_check=1

        get_date=datetime.date.today()
        print(">>>>>>>>>>>>>>>>>>>>",get_date)
                
        app = QtWidgets.QApplication(sys.argv)
        zeusConsole = Ui_zeusConsole()
        #     ui = Ui_zeusConsole()
        #     ui.setupUi(zeusConsole)

        zeusConsole.show()
        keyboard.on_press_key('f1', zeusConsole.emit_show_signal)
        keyboard.on_press_key('f2', zeusConsole.emit_hide_signal)

        try:
                keyboard.on_press_key('f1', zeusConsole.emit_show_signal)
        except Exception as e:
                print(">>>>>>>>emit_show_signal",e)

        try:
                keyboard.on_press_key('f2', zeusConsole.emit_hide_signal)
        except Exception as e:                   
                print(">>>>>>>>emit_hide_signal",e)
       
        thread2 = QRLoginThread()
        thread2.start(True)
        thread2.stop()

        thread3 = TaskMgrCheck()
        thread3.start()
        
        # thread4 = FileMgrCheck()
        # thread4.start()
        
        sys.exit(app.exec_())



       